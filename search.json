[{"path":"index.html","id":"welcome","chapter":"Welcome!","heading":"Welcome!","text":" Welcome R packages Hadley Wickham Jenny Bryan. Packages fundamental units reproducible R code. include reusable R functions, documentation describes use , sample data. book ’ll learn turn code packages others can easily download use. Writing package can seem overwhelming first. start basics improve time. doesn’t matter first version isn’t perfect long next version better.work--progress 2nd edition book.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::Welcome 2nd edition R Packages!\n’re familiar 1st edition, preface describes major changes can focus reading new areas.X main goals edition:Update reflect changes devtools package, specifically, “conscious uncoupling” set smaller, focused packages.Update reflect changes devtools package, specifically, “conscious uncoupling” set smaller, focused packages.Expanded coverage workflow process, alongside presentation important moving parts make R package.Expanded coverage workflow process, alongside presentation important moving parts make R package.comemore comeSpecifics individual chapters:New chapter 2, “Whole Game”, previews key steps package development process.New chapter 2, “Whole Game”, previews key steps package development process.New chapter 3, “Setup”, carved previous Introduction gained detail.New chapter 3, “Setup”, carved previous Introduction gained detail.sections “Organising functions” “Code style”, Chapter 7, “R code”, removed, favor online style guide, https://style.tidyverse.org/.\nstyle guide paired new styler package (Müller Walthert 2018) can automatically apply many rules.sections “Organising functions” “Code style”, Chapter 7, “R code”, removed, favor online style guide, https://style.tidyverse.org/.\nstyle guide paired new styler package (Müller Walthert 2018) can automatically apply many rules.chapter formerly known “Package structure” expanded split two chapters, one covering package structure state (Chapter 4) another workflows tooling (Chapter 5).chapter formerly known “Package structure” expanded split two chapters, one covering package structure state (Chapter 4) another workflows tooling (Chapter 5).chapters Git/GitHub C/C++ removed.\ndidn’t quite enough information useful, since first edition book, resources arisen better learning resources.chapters Git/GitHub C/C++ removed.\ndidn’t quite enough information useful, since first edition book, resources arisen better learning resources.short inst chatper combined Chapter 9, directories relatively minor importance.short inst chatper combined Chapter 9, directories relatively minor importance.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introduction","heading":"1 Introduction","text":"R, fundamental unit shareable code package.\npackage bundles together code, data, documentation, tests, easy share others.\nJune 2022, 18,000 packages available Comprehensive R Archive Network, CRAN, public clearing house R packages.\nhuge variety packages one reasons R successful: chances someone already solved problem ’re working , can benefit work downloading package.’re reading book, already know work packages following ways:install CRAN install.packages(\"x\").use R library(\"x\") library(x).get help package?x help(package = \"x\").goal book teach develop packages can write , just use people’s.\nwrite package?\nOne compelling reason code want share others.\nBundling code package makes easy people use , like , already know use packages.\ncode package, R user can easily download , install learn use .packages useful even never share code.\nHilary Parker says introduction packages: “Seriously, doesn’t sharing code (although added benefit!). saving time.” Organising code package makes life easier packages come conventions.\nexample, put R code R/, put tests tests/ put data data/.\nconventions helpful :save time — don’t need think best way organise project, can just follow template.save time — don’t need think best way organise project, can just follow template.Standardised conventions lead standardised tools — buy R’s package conventions, get many tools free.Standardised conventions lead standardised tools — buy R’s package conventions, get many tools free.’s even possible use packages structure data analyses (see, e.g., (Marwick, Boettiger, Mullen 2018a) (Marwick, Boettiger, Mullen 2018b)), although won’t delve deeply use case .","code":""},{"path":"intro.html","id":"intro-phil","chapter":"1 Introduction","heading":"1.1 Philosophy","text":"book espouses philosophy package development: anything can automated, automated.\nlittle possible hand.\nmuch possible functions.\ngoal spend time thinking want package rather thinking minutiae package structure.philosophy realised primarily devtools package, public face suite R functions automate common development tasks.\nrelease version 2.0.0 October 2018 marked internal restructuring set focused packages, devtools becoming meta-package.\nusethis package sub-package likely interact directly; explain devtools-usethis relationship section 3.2.always, goal devtools make package development painless possible.\nencapsulates best practices developed first author Hadley Wickham, initially years prolific solo developer.\nrecently, assembled team ~10 developers RStudio, collectively look ~150 open source R packages, including known tidyverse.\nreach team allows us explore space possible mistakes extraordinary scale.\nFortunately, also affords us opportunity reflect successes failures, company expert sympathetic colleagues.\ntry develop practices make life enjoyable maintainer users package.\ndevtools meta-package lessons made concrete.Throughout book, highlight specific ways RStudio can expedite package development workflow, specially formatted sections like .devtools works hand--hand RStudio, believe best development environment R users.\nmain alternative Emacs Speaks Statistics (ESS), rewarding environment ’re willing put time learn Emacs customise needs.\nhistory ESS stretches back 20 years (predating R!), ’s still actively developed many workflows described book also available .\nloyal vim, recommend Nvim-R plugin.Together, devtools RStudio insulate low-level details packages built.\nstart develop packages, highly recommend learn details.\nbest resource official details package development always official writing R extensions manual.\nHowever, manual can hard understand ’re already familiar basics packages.\n’s also exhaustive, covering every possible package component, rather focusing common useful components, book .\nWriting R extensions useful resource ’ve mastered basics want learn ’s going hood.","code":""},{"path":"intro.html","id":"intro-outline","chapter":"1 Introduction","heading":"1.2 In this book","text":"Chapter 2 runs development small toy package.\n’s meant paint big picture suggest workflow, descend detailed treatment key components R package.Chapter 3 describes prepare system package development, requirements simply running R scripts.\nincludes recommendations optional setup can make workflow pleasant, tends lead higher-quality product.basic structure package varies across different states explained chapter 4.Chapter 5 goes core workflows come repeatedly package developers.\nchapter also covers connections favored tools, devtools (underlying packages, usethis) RStudio, philosophies drive design tools.Subsequent chapters book go details package component.\n’re roughly organised order importance:R code, chapter 7: important directory R/, R code lives.\npackage just directory still useful package.\n(indeed, stop reading book chapter, ’ll still learned useful new skills.)R code, chapter 7: important directory R/, R code lives.\npackage just directory still useful package.\n(indeed, stop reading book chapter, ’ll still learned useful new skills.)Package metadata, chapter 10.2: DESCRIPTION lets describe package needs work.\n’re sharing package, ’ll also use DESCRIPTION describe , can use (license), contact things go wrong.Package metadata, chapter 10.2: DESCRIPTION lets describe package needs work.\n’re sharing package, ’ll also use DESCRIPTION describe , can use (license), contact things go wrong.Documentation, chapter 16: want people (including future-!) understand use functions package, ’ll need document .\n’ll show use roxygen2 document functions.\nrecommend roxygen2 lets write code documentation together continuing produce R’s standard documentation format.Documentation, chapter 16: want people (including future-!) understand use functions package, ’ll need document .\n’ll show use roxygen2 document functions.\nrecommend roxygen2 lets write code documentation together continuing produce R’s standard documentation format.Vignettes, chapter 17: function documentation describes nit-picky details every function package.\nVignettes give big picture.\n’re long-form documents show combine multiple parts package solve real problems.\n’ll show use Rmarkdown knitr create vignettes minimum fuss.Vignettes, chapter 17: function documentation describes nit-picky details every function package.\nVignettes give big picture.\n’re long-form documents show combine multiple parts package solve real problems.\n’ll show use Rmarkdown knitr create vignettes minimum fuss.Tests, chapter 13: ensure package works designed (continues work make changes), ’s essential write unit tests define correct behaviour, alert functions break.\nchapter, ’ll teach use testthat package convert informal interactive tests ’re already formal, automated tests.Tests, chapter 13: ensure package works designed (continues work make changes), ’s essential write unit tests define correct behaviour, alert functions break.\nchapter, ’ll teach use testthat package convert informal interactive tests ’re already formal, automated tests.Namespace, chapter 11.5: play nicely others, package needs define functions makes available packages functions requires packages.\njob NAMESPACE file ’ll show use roxygen2 generate .\nNAMESPACE one challenging parts developing R package ’s critical master want package work reliably.Namespace, chapter 11.5: play nicely others, package needs define functions makes available packages functions requires packages.\njob NAMESPACE file ’ll show use roxygen2 generate .\nNAMESPACE one challenging parts developing R package ’s critical master want package work reliably.External data, chapter 8: data/ directory allows include data package.\nmight bundle data way ’s easy R users access, just provide compelling examples documentation.External data, chapter 8: data/ directory allows include data package.\nmight bundle data way ’s easy R users access, just provide compelling examples documentation.components, chapter 9: chapter documents handful components rarely needed: demo/, exec/, po/ tools/.components, chapter 9: chapter documents handful components rarely needed: demo/, exec/, po/ tools/.final chapters describe general best practices specifically tied one directory:Automated checking, chapter 20: R provides useful automated quality checks form R CMD check.\nRunning regularly great way avoid many common mistakes.\nresults can sometimes bit cryptic, provide comprehensive cheatsheet help convert warnings actionable insight.Automated checking, chapter 20: R provides useful automated quality checks form R CMD check.\nRunning regularly great way avoid many common mistakes.\nresults can sometimes bit cryptic, provide comprehensive cheatsheet help convert warnings actionable insight.Release, chapter 22: life-cycle package culminates release public.\nchapter compares two main options (CRAN GitHub) offers general advice managing process.Release, chapter 22: life-cycle package culminates release public.\nchapter compares two main options (CRAN GitHub) offers general advice managing process.lot learn, don’t feel overwhelmed.\nStart minimal subset useful features (e.g. just R/ directory!) build time.\nparaphrase Zen monk Shunryu Suzuki: “package perfect way — can use little improvement”.","code":""},{"path":"intro.html","id":"you-wont-learn","chapter":"1 Introduction","heading":"1.3 What you won’t learn","text":"important topics won’t learn book:Git GitHub: mastering version control system vital easily collaborate others, useful even solo work allows easily undo mistakes.\nLearn http://happygitwithr.com/.Git GitHub: mastering version control system vital easily collaborate others, useful even solo work allows easily undo mistakes.\nLearn http://happygitwithr.com/.Compiled code: R code designed human efficiency, computer efficiency, ’s useful tool back pocket allows write fast code.\nLearn https://adv-r.hadley.nz/rcpp.html, https://cpp11.r-lib.org.Compiled code: R code designed human efficiency, computer efficiency, ’s useful tool back pocket allows write fast code.\nLearn https://adv-r.hadley.nz/rcpp.html, https://cpp11.r-lib.org.Markdown RMarkdown.Markdown RMarkdown.","code":""},{"path":"intro.html","id":"intro-ack","chapter":"1 Introduction","heading":"1.4 Acknowledgments","text":"Since first edition R Packages published, packages supporting workflows described undergone extensive development.\noriginal trio devtools, roxygen2, testthat expanded include packages created “conscious uncoupling” devtools.\npackages originate Hadley Wickham (HW), devtools roots.\nmany significant contributors, many now serve maintainers:devtools: HW, Winston Chang, Jim Hester (maintainer, >= v1.13.5)usethis: HW, Jennifer Bryan (maintainer >= v1.5.0)roxygen2: HW (maintainer), Peter Danenburg, Manuel Eugstertestthat: HW (maintainer)desc: Gábor Csárdi (maintainer), Kirill Müller, Jim Hesterpkgbuild: HW, Jim Hester (maintainer)pkgload: HW, Jim Hester (maintainer), Winston Changrcmdcheck: Gábor Csárdi (maintainer)remotes: HW, Jim Hester (maintainer), Gábor Csárdi, Winston Chang, Martin Morgan, Dan Tenenbaumrevdepcheck: HW, Gábor Csárdi (maintainer)sessioninfo: HW, Gábor Csárdi (maintainer), Winston Chang, Robert Flight, Kirill Müller, Jim HesterThis book R package development community benefit tremendously experts smooth specific pain points:Kevin Ushey, JJ Allaire, Dirk Eddelbuettel tirelessly answered sorts C, C++, Rcpp questions.Craig Citro wrote much initial code facilitate using Travis-CI R packages.Jeroen Ooms also helps maintain R community infrastructure, current R support Travis-CI (along Jim Hester), Windows toolchain.TODO: revisit rest section 2nd edition nears completion. Currently applies worded 1st edition.Often way learn right way wrong way first.\nsuffering many package development errors, ’d like thank CRAN maintainers, especially Brian Ripley, Uwe Ligges Kurt Hornik.book written revised open truly community effort: many people read drafts, fix typos, suggest improvements, contribute content.\nWithout contributors, book wouldn’t nearly good , deeply grateful help.special thanks goes Peter Li, read book cover--cover provided many fixes.\nalso deeply appreciate time reviewers (Duncan Murdoch, Karthik Ram, Vitalie Spinu Ramnath Vaidyanathan) spent reading book giving thorough feedback.Thanks go contributors submitted improvements via github (alphabetical order): @aaronwolen, @adessy, Adrien Todeschini, Andrea Cantieni, Andy Visser, @apomatix, Ben Bond-Lamberty, Ben Marwick, Brett K, Brett Klamer, @contravariant, Craig Citro, David Robinson, David Smith, @davidkane9, Dean Attali, Eduardo Ariño de la Rubia, Federico Marini, Gerhard Nachtmann, Gerrit-Jan Schutten, Hadley Wickham, Henrik Bengtsson, @heogden, Ian Gow, @jacobbien, Jennifer (Jenny) Bryan, Jim Hester, @jmarshallnz, Jo-Anne Tan, Joanna Zhao, Joe Cainey, John Blischak, @jowalski, Justin Alford, Karl Broman, Karthik Ram, Kevin Ushey, Kun Ren, @kwenzig, @kylelundstedt, @lancelote, Lech Madeyski, @lindbrook, @maiermarco, Manuel Reif, Michael Buckley, @MikeLeonard, Nick Carchedi, Oliver Keyes, Patrick Kimes, Paul Blischak, Peter Meissner, @PeterDee, Po Su, R. Mark Sharp, Richard M. Smith, @rmar073, @rmsharp, Robert Krzyzanowski, @ryanatanner, Sascha Holzhauer, @scharne, Sean Wilkinson, @SimonPBiggs, Stefan Widgren, Stephen Frank, Stephen Rushe, Tony Breyal, Tony Fischetti, @urmils, Vlad Petyuk, Winston Chang, @winterschlaefer, @wrathematics, @zhaoy.light bulb image used workflow tips comes www.vecteezy.com.","code":""},{"path":"intro.html","id":"intro-conventions","chapter":"1 Introduction","heading":"1.5 Conventions","text":"Throughout book, write foo() refer functions, bar refer variables function parameters, baz/ paths.Larger code blocks intermingle input output.\nOutput commented electronic version book, e.g., https://r-pkgs.org, can easily copy paste examples R.\nOutput comments look like #> distinguish regular comments.","code":""},{"path":"intro.html","id":"intro-colophon","chapter":"1 Introduction","heading":"1.6 Colophon","text":"book authored using R Markdown, using bookdown, inside RStudio.\nwebsite hosted Netlify, automatically updated every commit GitHub actions.\ncomplete source available GitHub.version book built :","code":"\nlibrary(devtools)\n#> Loading required package: usethis\nlibrary(roxygen2)\nlibrary(testthat)\n#> \n#> Attaching package: 'testthat'\n#> The following object is masked from 'package:devtools':\n#> \n#>     test_file\ndevtools::session_info()\n#> ─ Session info ───────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.0 (2022-04-22)\n#>  os       Ubuntu 20.04.4 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language (EN)\n#>  collate  C.UTF-8\n#>  ctype    C.UTF-8\n#>  tz       UTC\n#>  date     2022-07-04\n#>  pandoc   2.14.2 @ /usr/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  bookdown      0.27       2022-06-14 [1] RSPM\n#>  brio          1.1.3      2021-11-30 [1] RSPM\n#>  bslib         0.3.1      2021-10-06 [1] RSPM\n#>  cachem        1.0.6      2021-08-19 [1] RSPM\n#>  callr         3.7.0      2021-04-20 [1] RSPM\n#>  cli           3.3.0      2022-04-25 [1] RSPM\n#>  crayon        1.5.1      2022-03-26 [1] RSPM\n#>  devtools    * 2.4.3      2021-11-30 [1] RSPM\n#>  digest        0.6.29     2021-12-01 [1] RSPM\n#>  downlit       0.4.1.9000 2022-07-01 [1] Github (r-lib/downlit@128f49a)\n#>  ellipsis      0.3.2      2021-04-29 [1] RSPM\n#>  evaluate      0.15       2022-02-18 [1] RSPM\n#>  fastmap       1.1.0      2021-01-25 [1] RSPM\n#>  fs            1.5.2      2021-12-08 [1] RSPM\n#>  glue          1.6.2      2022-02-24 [1] RSPM\n#>  htmltools     0.5.2      2021-08-25 [1] RSPM\n#>  jquerylib     0.1.4      2021-04-26 [1] RSPM\n#>  jsonlite      1.8.0      2022-02-22 [1] RSPM\n#>  knitr         1.39       2022-04-26 [1] RSPM\n#>  lifecycle     1.0.1      2021-09-24 [1] RSPM\n#>  magrittr      2.0.3      2022-03-30 [1] RSPM\n#>  memoise       2.0.1      2021-11-26 [1] RSPM\n#>  pkgbuild      1.3.1      2021-12-20 [1] RSPM\n#>  pkgload       1.3.0      2022-06-27 [1] RSPM\n#>  prettyunits   1.1.1      2020-01-24 [1] RSPM\n#>  processx      3.6.1      2022-06-17 [1] RSPM\n#>  ps            1.7.1      2022-06-18 [1] RSPM\n#>  purrr         0.3.4      2020-04-17 [1] RSPM\n#>  R6            2.5.1      2021-08-19 [1] RSPM\n#>  remotes       2.4.2      2021-11-30 [1] RSPM\n#>  rlang         1.0.3      2022-06-27 [1] RSPM\n#>  rmarkdown     2.14       2022-04-25 [1] RSPM\n#>  roxygen2    * 7.2.0      2022-05-13 [1] RSPM\n#>  sass          0.4.1      2022-03-23 [1] RSPM\n#>  sessioninfo   1.2.2      2021-12-06 [1] RSPM\n#>  stringi       1.7.6      2021-11-29 [1] RSPM\n#>  stringr       1.4.0.9000 2022-06-09 [1] Github (tidyverse/stringr@9b46754)\n#>  testthat    * 3.1.4      2022-04-26 [1] RSPM\n#>  usethis     * 2.1.6      2022-05-25 [1] RSPM\n#>  vctrs         0.4.1      2022-04-13 [1] RSPM\n#>  xfun          0.31       2022-05-10 [1] RSPM\n#>  xml2          1.3.3      2021-11-30 [1] RSPM\n#>  yaml          2.3.5      2022-02-21 [1] RSPM\n#> \n#>  [1] /home/runner/work/_temp/Library\n#>  [2] /opt/R/4.2.0/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────"},{"path":"whole-game.html","id":"whole-game","chapter":"2 The whole game","heading":"2 The whole game","text":"","code":""},{"path":"whole-game.html","id":"introduction","chapter":"2 The whole game","heading":"2.1 Introduction","text":"Spoiler alert!chapter runs development small toy package.\n’s meant paint Big Picture suggest workflow, descend detailed treatment key components R package.keep pace brisk, exploit modern conveniences devtools package RStudio IDE. later chapters, explicit helpers us.","code":""},{"path":"whole-game.html","id":"load-devtools-and-friends","chapter":"2 The whole game","heading":"2.2 Load devtools and friends","text":"can initiate new package active R session.\ndon’t need worry whether ’re existing new project .\nfunctions use take care .Load devtools package, public face set packages support various aspects package development.\nobvious usethis package, ’ll see also loaded.old version devtools?\nCompare version upgrade necessary.","code":"\nlibrary(devtools)\n#> Loading required package: usethis\npackageVersion(\"devtools\")\n#> [1] '2.4.3'"},{"path":"whole-game.html","id":"toy-package-regexcite","chapter":"2 The whole game","heading":"2.3 Toy package: regexcite","text":"use various functions devtools build small toy package scratch, features commonly seen released packages:Functions address specific need, case helpers work regular expressions.Version control open development process.\ncompletely optional work, highly recommended. ’ll see Git GitHub help us expose intermediate stages toy package.\ncompletely optional work, highly recommended. ’ll see Git GitHub help us expose intermediate stages toy package.Access established workflows installation, getting help, checking quality.\nDocumentation individual functions via roxygen2.\nUnit testing testthat.\nDocumentation package whole via executable README.Rmd.\nDocumentation individual functions via roxygen2.Unit testing testthat.Documentation package whole via executable README.Rmd.call package regexcite couple functions make common tasks regular expressions easier.\nPlease note functions super simple definitely point!\nreal work, several proper R packages address problem space:stringr (uses stringi)stringirexrematch2The regexcite package goal .\ndevice demonstrating typical workflow package development devtools.","code":""},{"path":"whole-game.html","id":"peek-at-the-finished-product","chapter":"2 The whole game","heading":"2.4 Peek at the finished product","text":"regexcite package tracked development Git version control system.\npurely optional can certainly follow along without implementing .\nnice side benefit eventually connect remote repository GitHub, means can see glorious result working towards visiting regexcite GitHub: https://github.com/jennybc/regexcite.\ninspecting commit history especially diffs, can see exactly changes step process laid .","code":""},{"path":"whole-game.html","id":"create_package","chapter":"2 The whole game","heading":"2.5 create_package()","text":"Call create_package() initialize new package directory computer (create directory, necessary).\nSee section 5.2.3 .Make deliberate choice create package computer.\nprobably somewhere within home directory, alongside R projects.\nnested inside another RStudio Project, R package, Git repo.\nR package library, holds packages already built installed.\nconversion source package create installed package part devtools facilitates.\nDon’t try devtools’ job !\nSee 5.2.4 .Substitute chosen path create_package() call like :work temp directory, book built non-interactively, cloud.\nBehind scenes, ’re executing create_package() command, don’t surprised output differs bit .’re working RStudio, find new instance RStudio, opened new regexcite package (Project).\nsomehow need manually, navigate directory double click regexcite.Rproj.\nRStudio special handling packages now see Build tab pane Environment History.’s new directory also R package , probably, RStudio Project?\n’s listing (locally, can consult Files pane):file browser, go > Show Hidden Files toggle visibility hidden files (.k.. “dotfiles”).\nselect visible time, sometimes want see ..Rbuildignore lists files need around included building R package source. 4.4.1..Rproj.user, , directory used internally RStudio..gitignore anticipates Git usage ignores standard, behind--scenes files created R RStudio. Even plan use Git, harmless.DESCRIPTION provides metadata package. edit shortly.NAMESPACE declares functions package exports external use external functions package imports packages. point, empty, except comment declaring file edit hand.R/ directory “business end” package. soon contain .R files function definitions.regexcite.Rproj file makes directory RStudio Project. Even don’t use RStudio, file harmless. can suppress creation create_package(..., rstudio = FALSE). 5.3.probably need call library(devtools) , create_package() probably dropped fresh R session, new package.","code":"\ncreate_package(\"~/path/to/regexcite\")\n#> ✔ Creating '/tmp/RtmpQCHbfq/regexcite/'\n#> ✔ Setting active project to '/tmp/RtmpQCHbfq/regexcite'\n#> ✔ Creating 'R/'\n#> ✔ Writing 'DESCRIPTION'\n#> Package: regexcite\n#> Title: What the Package Does (One Line, Title Case)\n#> Version: 0.0.0.9000\n#> Authors@R (parsed):\n#>     * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)\n#> Description: What the package does (one paragraph).\n#> License: `use_mit_license()`, `use_gpl3_license()` or friends to\n#>     pick a license\n#> Encoding: UTF-8\n#> Roxygen: list(markdown = TRUE)\n#> RoxygenNote: 7.2.0\n#> ✔ Writing 'NAMESPACE'\n#> ✔ Writing 'regexcite.Rproj'\n#> ✔ Adding '^regexcite\\\\.Rproj$' to '.Rbuildignore'\n#> ✔ Adding '.Rproj.user' to '.gitignore'\n#> ✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n#> ✔ Setting active project to '<no active project>'\n#> # A tibble: 6 × 2\n#>   path            type     \n#>   <fs::path>      <fct>    \n#> 1 .Rbuildignore   file     \n#> 2 .gitignore      file     \n#> 3 DESCRIPTION     file     \n#> 4 NAMESPACE       file     \n#> 5 R               directory\n#> 6 regexcite.Rproj file\nlibrary(devtools)"},{"path":"whole-game.html","id":"use_git","chapter":"2 The whole game","heading":"2.6 use_git()","text":"regexcite directory R source package RStudio Project.\nNow make also Git repository, use_git().interactive session, asked want commit files probably accept offer.\nBehind scenes, ’ll cause happen us.’s new?\ncreation .git directory, hidden contexts, including RStudio file browser.\nexistence evidence indeed initialized Git repo .’re using RStudio, probably requested permission relaunch Project, .\ncan manually quitting, relaunching RStudio double clicking regexcite.Rproj.\nNow, addition package development support, access basic Git client Git tab Environment/History/Build pane.Click History (clock icon Git pane) , consented, see initial commit made via use_git():RStudio can initialize Git repository, Project, even ’s R package, long ’ve set RStudio + Git integration.\nTools > Version Control > Project Setup.\nchoose Version control system: Git initialize new git repository project.","code":"\nuse_git()\n#> ✔ Initialising Git repo\n#> ✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store' to '.gitignore'\n#> # A tibble: 1 × 2\n#>   path       type     \n#>   <fs::path> <fct>    \n#> 1 .git       directory\n#> # A tibble: 1 × 3\n#>   commit                                   author            message\n#>   <chr>                                    <chr>             <chr>  \n#> 1 5978ece0d64bcc9c3af255a306067e82ae4ba6ec hadley <hadley@u… \"Initi…"},{"path":"whole-game.html","id":"write-the-first-function","chapter":"2 The whole game","heading":"2.7 Write the first function","text":"fairly common task dealing strings need split single string many parts.\nstrsplit() function base R exactly .Take close look return value.shape return value often surprises people , least, inconveniences .\ninput character vector length one output list length one.\nmakes total sense light R’s fundamental tendency towards vectorization.\nsometimes ’s still bit bummer.\nOften know input morally scalar, .e. ’s just single string, really want output character vector parts.leads R users employ various methods “unlist”-ing result:second, safer solution basis inaugural function regexcite: strsplit1().book teach write functions R.\nlearn take look Functions chapter R Data Science Functions chapter Advanced R.name strsplit1() nod handy paste0(), first appeared R 2.15.0 2012.\npaste0() created address extremely common use case paste()-ing strings together without separator.\npaste0() lovingly described “statistical computing’s influential contribution 21st century”.","code":"\n(x <- \"alfa,bravo,charlie,delta\")\n#> [1] \"alfa,bravo,charlie,delta\"\nstrsplit(x, split = \",\")\n#> [[1]]\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\nstr(strsplit(x, split = \",\"))\n#> List of 1\n#>  $ : chr [1:4] \"alfa\" \"bravo\" \"charlie\" \"delta\"\nunlist(strsplit(x, split = \",\"))\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nstrsplit(x, split = \",\")[[1]]\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\nstrsplit1 <- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}"},{"path":"whole-game.html","id":"use_r","chapter":"2 The whole game","heading":"2.8 use_r()","text":"shall define strsplit1()?\nSave .R file, R/ subdirectory package.\nreasonable starting position make new .R file user-facing function package name file function.\nadd functions, ’ll want relax begin group related functions together.\n’ll save definition strsplit1() file R/strsplit1.R.helper use_r() creates /opens script R/.\nreally shines mature package, navigating .R files associated test file.\n, even , ’s useful keep getting carried away working Untitled4.Put definition strsplit1() definition strsplit1() R/strsplit1.R save .\nfile R/strsplit1.R contain top-level code recently executed, definition practice input x, library(devtools), use_git().\nforeshadows adjustment ’ll need make transition writing R scripts R packages.\nPackages scripts use different mechanisms declare dependency packages store example test code.\nexplore Chapter 7.","code":"\nuse_r(\"strsplit1\")\n#> • Edit 'R/strsplit1.R'\n#> • Call `use_test()` to create a matching test file"},{"path":"whole-game.html","id":"whole-game-load-all","chapter":"2 The whole game","heading":"2.9 load_all()","text":"test drive strsplit1()?\nregular R script, might use RStudio send function definition R Console define strsplit1() global environment.\nmaybe ’d call source(\"R/strsplit1.R\").\npackage development, however, devtools offers robust approach.\nSee section 5.5 .Call load_all() make strsplit1() available experimentation.Now call strsplit1(x) see works.Note load_all() made strsplit1() function available, although exist global environment.see TRUE instead FALSE, indicates ’re still using script-oriented workflow sourcing functions.\n’s get back track:Clean global environment restart R.Re-attach devtools library(devtools) re-load regexcite load_all().Redefine test input x call strsplit1(x, split = \",\") . work!Run exists(\"strsplit1\", = globalenv(), inherits = FALSE) see FALSE.load_all() simulates process building, installing, attaching regexcite package.\npackage accumulates functions, exported, , call , call functions packages depend , load_all() gives much accurate sense package developing test driving functions defined global environment.\nAlso load_all() allows much faster iteration actually building, installing, attaching package.Review far:wrote first function, strsplit1(), split string character vector (list containing character vector).used load_all() quickly make function available interactive use, ’d built installed regexcite attached via library(regexcite).RStudio exposes load_all() Build menu, Build pane via > Load , keyboard shortcuts Ctrl + Shift + L (Windows & Linux) Cmd + Shift + L (macOS).","code":"\nload_all()\n#> ℹ Loading regexcite\n(x <- \"alfa,bravo,charlie,delta\")\n#> [1] \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\nexists(\"strsplit1\", where = globalenv(), inherits = FALSE)\n#> [1] FALSE"},{"path":"whole-game.html","id":"commit-strsplit1","chapter":"2 The whole game","heading":"2.9.1 Commit strsplit1()","text":"’re using Git, use preferred method commit new R/strsplit1.R file.\nbehind scenes ’s associated diff.point , commit step.\nRemember commits available public repository.","code":"#> diff --git a/R/strsplit1.R b/R/strsplit1.R\n#> new file mode 100644\n#> index 0000000..29efb88\n#> --- /dev/null\n#> +++ b/R/strsplit1.R\n#> @@ -0,0 +1,3 @@\n#> +strsplit1 <- function(x, split) {\n#> +  strsplit(x, split = split)[[1]]\n#> +}"},{"path":"whole-game.html","id":"check","chapter":"2 The whole game","heading":"2.10 check()","text":"informal, empirical evidence strsplit1() works.\ncan sure moving parts regexcite package still work?\nmay seem silly check, small addition, ’s good establish habit checking often.R CMD check, executed shell, gold standard checking R package full working order.\ncheck() convenient way run without leaving R session.Note check() produces rather voluminous output, optimized interactive consumption.\nintercept just reveal summary.\nlocal check() output different.Read output check! Deal problems early often.\n’s just like incremental development .R .Rmd files.\nlonger go full checks everything works, harder becomes pinpoint solve problems.point, expect 1 warning (0 errors, 0 notes):’ll address soon, exactly says.RStudio exposes check() Build menu, Build pane via Check, keyboard shortcuts Ctrl + Shift + E (Windows & Linux) Cmd + Shift + E (macOS).","code":"\ncheck()\n#> ── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\n#> Duration: 23.5s\n#> \n#> ❯ checking DESCRIPTION meta-information ... WARNING\n#>   Non-standard license specification:\n#>     `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n#>     license\n#>   Standardizable: FALSE\n#> \n#> 0 errors ✔ | 1 warning ✖ | 0 notes ✔Non-standard license specification:\n  `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n  license"},{"path":"whole-game.html","id":"edit-description","chapter":"2 The whole game","heading":"2.11 Edit DESCRIPTION","text":"DESCRIPTION file provides metadata package covered fully chapter 10.2.\ngood time look regexcite’s current DESCRIPTION.\n’ll see ’s populated boilerplate content, needs replaced.Make edits:Make author. don’t ORCID, can omit comment = ... portion.Write descriptive text Title Description fields.Use Ctrl + . RStudio start typing “DESCRIPTION” activate helper makes easy open file editing.\naddition filename, hint can function name.\nhandy package lots files.’re done, DESCRIPTION look similar :","code":"Package: regexcite\nTitle: Make Regular Expressions More Exciting\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Jane\", \"Doe\", , \"jane@example.com\", role = c(\"aut\", \"cre\"))\nDescription: Convenience functions to make some common tasks with string\n    manipulation and regular expressions a bit easier.\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.1.2"},{"path":"whole-game.html","id":"use_mit_license","chapter":"2 The whole game","heading":"2.12 use_mit_license()","text":"Pick License, License. – Jeff AtwoodWe currently placeholder License field DESCRIPTION ’s deliberately invalid suggests resolution.Let’s call use_mit_license().configures License field correctly MIT license, promises name copyright holders year LICENSE file.\nOpen newly created LICENSE file confirm looks something like :Like license helpers, use_mit_license() also puts copy full license LICENSE.md adds file .Rbuildignore.\n’s considered best practice include full license package’s source, GitHub, CRAN disallows inclusion file package tarball.","code":"License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nuse_mit_license()\n#> ✔ Setting License field in DESCRIPTION to 'MIT + file LICENSE'\n#> ✔ Writing 'LICENSE'\n#> ✔ Writing 'LICENSE.md'\n#> ✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'YEAR: 2022\nCOPYRIGHT HOLDER: regexcite authors"},{"path":"whole-game.html","id":"whole-game-document","chapter":"2 The whole game","heading":"2.13 document()","text":"Wouldn’t nice get help strsplit1(), just like R functions?\nrequires package special R documentation file, man/strsplit1.Rd, written R-specific markup language sort like LaTeX.\nLuckily don’t necessarily author directly.write specially formatted comment right strsplit1(), source file, let package called roxygen2 handle creation man/strsplit1.Rd.\nmotivation mechanics roxygen2 covered chapter 16.use RStudio, open R/strsplit1.R source editor put cursor somewhere strsplit1() function definition.\nNow Code > Insert roxygen skeleton.\nspecial comment appear function, line begins #'.\nRStudio inserts barebones template, need edit look something like .don’t use RStudio, create comment .\nRegardless, modify look something like :’re done yet!\nstill need trigger conversion new roxygen comment man/strsplit1.Rd document():RStudio exposes document() Build menu, Build pane via > Document, keyboard shortcuts Ctrl + Shift + D (Windows & Linux) Cmd + Shift + D (macOS).now able preview help file like :’ll see message like “Rendering development documentation ‘strsplit1’”, reminds basically previewing draft documentation.\n, documentation present package’s source, yet present installed package.\nfact, haven’t installed regexcite yet, soon.Note also package’s documentation won’t properly wired formally built installed.\npolishes niceties like links help files creation package index.","code":"\n#' Split a string\n#'\n#' @param x A character vector with one element.\n#' @param split What to split on.\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x <- \"alfa,bravo,charlie,delta\"\n#' strsplit1(x, split = \",\")\nstrsplit1 <- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}\ndocument()\n#> ℹ Updating regexcite documentation\n#> Setting `RoxygenNote` to \"7.2.0\"\n#> ℹ Loading regexcite\n#> Writing NAMESPACE\n#> Writing strsplit1.Rd\n?strsplit1"},{"path":"whole-game.html","id":"namespace-changes","chapter":"2 The whole game","heading":"2.13.1 NAMESPACE changes","text":"addition converting strsplit1()’s special comment man/strsplit1.Rd, call document() updates NAMESPACE file, based @export tags found roxygen comments.\nOpen NAMESPACE inspection.\ncontents :export directive NAMESPACE makes strsplit1() available user attaching regexcite via library(regexcite).\nJust entirely possible author .Rd files “hand”, can manage NAMESPACE explicitly .\nchoose delegate devtools (roxygen2).","code":"# Generated by roxygen2: do not edit by hand\n\nexport(strsplit1)"},{"path":"whole-game.html","id":"check-again","chapter":"2 The whole game","heading":"2.14 check() again","text":"regexcite pass R CMD check cleanly now forever : 0 errors, 0 warnings, 0 notes.","code":"\ncheck()\n#> ── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\n#> Duration: 24.8s\n#> \n#> 0 errors ✔ | 0 warnings ✔ | 0 notes ✔"},{"path":"whole-game.html","id":"install","chapter":"2 The whole game","heading":"2.15 install()","text":"Since minimum viable product now, let’s install regexcite package library via install():RStudio exposes similar functionality Build menu Build pane via Install Restart.Now can attach use regexcite like package.\nLet’s revisit small example top.\ngood time restart R session ensure clean workspace.Success!","code":"\ninstall()* checking for file ‘/tmp/RtmpQCHbfq/regexcite/DESCRIPTION’ ... OK\n* preparing ‘regexcite’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‘regexcite_0.0.0.9000.tar.gz’\nRunning /opt/R/4.2.0/lib/R/bin/R CMD INSTALL \\\n  /tmp/RtmpQCHbfq/regexcite_0.0.0.9000.tar.gz --install-tests \n* installing to library ‘/home/runner/work/_temp/Library’\n* installing *source* package ‘regexcite’ ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)\nlibrary(regexcite)\n\nx <- \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\""},{"path":"whole-game.html","id":"use_testthat","chapter":"2 The whole game","heading":"2.16 use_testthat()","text":"’ve tested strsplit1() informally, single example.\ncan formalize unit test.\nmeans express concrete expectation correct strsplit1() result specific input.First, declare intent write unit tests use testthat package , via use_testthat():initializes unit testing machinery package.\nadds Suggests: testthat DESCRIPTION, creates directory tests/testthat/, adds script tests/testthat.R.\n’ll notice testthat probably added minimum version 3.0.0 second DESCRIPTION field, Config/testthat/edition: 3.\n’ll talk details chapter 13.However, ’s still write actual tests!helper use_test() opens /creates test file.\ncan provide file’s basename , editing relevant source file RStudio, automatically generated.\nmany , R/strsplit1.R active file RStudio, can just call use_test().\nHowever, since book built non-interactively, must provide basename explicitly:creates file tests/testthat/test-strsplit1.R.\nalready existed, use_test() just opened .\nPut content :tests strsplit1() gives expected result splitting string.Run test interactively, write .\nNote ’ll attach testthat via library(testthat) R session first ’ll probably want load_all().Going forward, tests mostly run en masse arm’s length via test():RStudio exposes test() Build menu, Build pane via > Test package, keyboard shortcuts Ctrl + Shift + T (Windows & Linux) Cmd + Shift + T (macOS).tests also run whenever check() package.\nway, basically augment standard checks , specific package.\ngood idea use covr package track proportion package’s source code exercised tests.\ndetails can found chapter 13.","code":"\nuse_testthat()\n#> ✔ Adding 'testthat' to Suggests field in DESCRIPTION\n#> ✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n#> ✔ Creating 'tests/testthat/'\n#> ✔ Writing 'tests/testthat.R'\n#> • Call `use_test()` to initialize a basic test file and open it for editing.\nuse_test(\"strsplit1\")\n#> ✔ Writing 'tests/testthat/test-strsplit1.R'\n#> • Edit 'tests/testthat/test-strsplit1.R'\ntest_that(\"strsplit1() splits a string\", {\n  expect_equal(strsplit1(\"a,b,c\", split = \",\"), c(\"a\", \"b\", \"c\"))\n})\ntest()\n#> ℹ Loading regexcite\n#> ℹ Testing regexcite\n#> ✔ | F W S  OK | Context\n#> \n#> ⠏ |         0 | strsplit1                                           \n#> ✔ |         1 | strsplit1\n#> \n#> ══ Results ═════════════════════════════════════════════════════════\n#> [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]"},{"path":"whole-game.html","id":"use_package","chapter":"2 The whole game","heading":"2.17 use_package()","text":"inevitably want use function another package package.\nJust needed export strsplit1(), need import functions namespace packages.\nplan submit package CRAN, note even applies functions packages think “always available”, stats::median() utils::head().One common dilemma using R’s regular expression functions uncertainty whether request perl = TRUE perl = FALSE.\noften, always, arguments alter patterns matched, fixed, ignore.case, invert.\ncan hard keep track functions use arguments arguments interact, many users never get point retain details without rereading docs.stringr package “provides cohesive set functions designed make working strings easy possible”.\nparticular, stringr uses one regular expression system everywhere (ICU regular expressions) uses interface every function controlling matching behaviors, case sensitivity.\npeople find easier internalize program around.\nLet’s imagine decide ’d rather build regexcite based stringr (stringi) base R’s regular expression functions.First, declare general intent use functions stringr namespace use_package():adds stringr package “Imports” section DESCRIPTION.\n.Let’s revisit strsplit1() make stringr-like.\n’s new take :Notice :Rename function str_split_one(), signal wrapper around stringr::str_split().Adopt argument names stringr::str_split(). Now string pattern (n), instead x split.Introduce bit argument checking edge case handling. unrelated switch stringr equally beneficial version built strsplit().Use package::function() form calling stringr::str_split(). specifies want call str_split() function stringr namespace. one way call function another package one endorse explained fully chapter 11.5.write new function definition?\n’d like keep following convention name .R file function defines, now need fiddly file shuffling.\ncomes fairly often real life, rename_files() function, choreographs renaming file R/ associated companion files test/.Remember: file name work purely aspirational.\nstill need update contents files!updated contents R/str_split_one.R.\naddition changing function definition, ’ve also updated roxygen header reflect new arguments include examples show stringr features.Don’t forget also update test file!updated contents tests/testthat/test-str_split_one.R.\naddition change function’s name arguments, ’ve added couple tests.take new str_split_one() test drive, need call document().\n?\nRemember document() two main jobs:Converts roxygen comments proper R documentation.(Re)generates NAMESPACE.second point especially important , since longer export strsplit1() newly export str_split_one().\nDon’t dismayed warning \"Objects listed exports, present namespace: strsplit1\".\nalways happens remove something namespace.Try new str_split_one() function simulating package installation via load_all():","code":"\nuse_package(\"stringr\")\n#> ✔ Adding 'stringr' to Imports field in DESCRIPTION\n#> • Refer to functions with `stringr::fun()`\nstr_split_one <- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) <= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\nrename_files(\"strsplit1\", \"str_split_one\")\n#> ✔ Moving 'R/strsplit1.R' to 'R/str_split_one.R'\n#> ✔ Moving 'tests/testthat/test-strsplit1.R' to 'tests/testthat/test-str_split_one.R'\n#' Split a string\n#'\n#' @param string A character vector with, at most, one element.\n#' @inheritParams stringr::str_split\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x <- \"alfa,bravo,charlie,delta\"\n#' str_split_one(x, pattern = \",\")\n#' str_split_one(x, pattern = \",\", n = 2)\n#'\n#' y <- \"192.168.0.1\"\n#' str_split_one(y, pattern = stringr::fixed(\".\"))\nstr_split_one <- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) <= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\ntest_that(\"str_split_one() splits a string\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\"), c(\"a\", \"b\", \"c\"))\n})\n\ntest_that(\"str_split_one() errors if input length > 1\", {\n  expect_error(str_split_one(c(\"a,b\",\"c,d\"), \",\"))\n})\n\ntest_that(\"str_split_one() exposes features of stringr::str_split()\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\", n = 2), c(\"a\", \"b,c\"))\n  expect_equal(str_split_one(\"a.b\", stringr::fixed(\".\")), c(\"a\", \"b\"))\n})\ndocument()\n#> ℹ Updating regexcite documentation\n#> ℹ Loading regexcite\n#> Warning: Objects listed as exports, but not present in namespace:\n#> • strsplit1\n#> Writing NAMESPACE\n#> Writing str_split_one.Rd\n#> Deleting strsplit1.Rd\nload_all()\n#> ℹ Loading regexcite\nstr_split_one(\"a, b, c\", pattern = \", \")\n#> [1] \"a\" \"b\" \"c\""},{"path":"whole-game.html","id":"use_github","chapter":"2 The whole game","heading":"2.18 use_github()","text":"’ve seen us making commits development process regexcite.\ncan see indicative history https://github.com/jennybc/regexcite.\nuse version control decision expose development process means can inspect state regexcite source developmental stage.\nlooking -called diffs, can see exactly devtools helper function modifies source files constitute regexcite package.connect local regexcite package Git repository companion repository GitHub?use_github() helper recommend long-term. won’t demonstrate requires credential setup end. also don’t want tear rebuild public regexcite package every time build book.Set GitHub repo first! sounds counter-intuitive, easiest way get work onto GitHub initiate , use RStudio start working synced local copy. approach described Happy Git’s workflows New project, GitHub first Existing project, GitHub first.Command line Git can always used add remote repository post hoc. described Happy Git workflow Existing project, GitHub last.approaches connect local regexcite project GitHub repo, public private, can push pull using Git client built RStudio.","code":""},{"path":"whole-game.html","id":"use_readme_rmd","chapter":"2 The whole game","heading":"2.19 use_readme_rmd()","text":"Now package GitHub, README.md file matters.\npackage’s home page welcome mat, least decide give website (see pkgdown), add vignette (see chapter 17), submit CRAN (see chapter 22).use_readme_rmd() function initializes basic, executable README.Rmd ready edit:addition creating README.Rmd, adds lines .Rbuildignore, creates Git pre-commit hook help keep README.Rmd README.md sync.README.Rmd already sections prompt :Describe purpose package.Provide installation instructions. GitHub remote detected use_readme_rmd() called, section pre-filled instructions install GitHub.Show bit usage.populate skeleton?\nCopy stuff liberally DESCRIPTION formal informal tests examples .\nAnything better nothing.\nOtherwise … expect people install package comb individual help files figure use ?\nprobably won’t.like write README R Markdown, can feature actual usage.\ninclusion live code also makes less likely README grows stale --sync actual package.RStudio already done , open README.Rmd editing.\nMake sure shows usage str_split_one().README.Rmd use : README.Rmd ’s contains:Don’t forget render make README.md!\npre-commit hook remind try commit README.Rmd, README.md, also README.md appears --date.best way render README.Rmd build_readme(), takes care render current version package, .e. installs temporary copy current source.can see rendered README.md simply visiting regexcite GitHub.Finally, don’t forget one last commit.\npush, ’re using GitHub.","code":"\nuse_readme_rmd()\n#> ✔ Writing 'README.Rmd'\n#> ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n#> • Update 'README.Rmd' to include installation instructions.\n#> ✔ Writing '.git/hooks/pre-commit'---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"man/figures/README-\",\n  out.width = \"100%\"\n)\n```\n\n**NOTE: This is a toy package created for expository purposes, for the second edition of [R Packages](https://r-pkgs.org). It is not meant to actually be useful. If you want a package for factor handling, please see [stringr](https://stringr.tidyverse.org), [stringi](https://stringi.gagolewski.com/),\n[rex](https://cran.r-project.org/package=rex), and\n[rematch2](https://cran.r-project.org/package=rematch2).**\n\n# regexcite\n\n<!-- badges: start -->\n<!-- badges: end -->\n\nThe goal of regexcite is to make regular expressions more exciting!\nIt provides convenience functions to make some common tasks with string manipulation and regular expressions a bit easier.\n\n## Installation\n\nYou can install the development version of regexcite from [GitHub](https://github.com/) with:\n      \n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"jennybc/regexcite\")\n```\n\n## Usage\n\nA fairly common task when dealing with strings is the need to split a single string into many parts.\nThis is what `base::strplit()` and `stringr::str_split()` do.\n\n```{r}\n(x <- \"alfa,bravo,charlie,delta\")\nstrsplit(x, split = \",\")\nstringr::str_split(x, pattern = \",\")\n```\n\nNotice how the return value is a **list** of length one, where the first element holds the character vector of parts.\nOften the shape of this output is inconvenient, i.e. we want the un-listed version.\n\nThat's exactly what `regexcite::str_split_one()` does.\n\n```{r}\nlibrary(regexcite)\n\nstr_split_one(x, pattern = \",\")\n```\n\nUse `str_split_one()` when the input is known to be a single string.\nFor safety, it will error if its input has length greater than one.\n\n`str_split_one()` is built on `stringr::str_split()`, so you can use its `n` argument and stringr's general interface for describing the `pattern` to be matched.\n\n```{r}\nstr_split_one(x, pattern = \",\", n = 2)\n\ny <- \"192.168.0.1\"\nstr_split_one(y, pattern = stringr::fixed(\".\"))\n```\nbuild_readme()\n#> ℹ Installing regexcite in temporary library\n#> ℹ Building /tmp/RtmpQCHbfq/regexcite/README.Rmd"},{"path":"whole-game.html","id":"the-end-check-and-install","chapter":"2 The whole game","heading":"2.20 The end: check() and install()","text":"Let’s run check() make sure still well.regexcite errors, warnings notes.\ngood time re-build install properly.\ncelebrate!Feel free visit regexcite package GitHub, exactly developed .\ncommit history reflects individual step, use diffs see addition modification files, package evolved.\nrest book goes greater detail step ’ve seen much .","code":"\ncheck()\n#> ── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\n#> Duration: 26.3s\n#> \n#> 0 errors ✔ | 0 warnings ✔ | 0 notes ✔\ninstall()* checking for file ‘/tmp/RtmpQCHbfq/regexcite/DESCRIPTION’ ... OK\n* preparing ‘regexcite’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nRemoved empty directory ‘regexcite/tests/testthat/_snaps’\n* building ‘regexcite_0.0.0.9000.tar.gz’\nRunning /opt/R/4.2.0/lib/R/bin/R CMD INSTALL \\\n  /tmp/RtmpQCHbfq/regexcite_0.0.0.9000.tar.gz --install-tests \n* installing to library ‘/home/runner/work/_temp/Library’\n* installing *source* package ‘regexcite’ ...\n** using staged installation\n** R\n** tests\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)"},{"path":"setup.html","id":"setup","chapter":"3 System setup","heading":"3 System setup","text":"","code":""},{"path":"setup.html","id":"setup-prep","chapter":"3 System setup","heading":"3.1 Prepare your system","text":"get started, make sure latest version R (least 4.2.0, version used render book), run following code get packages ’ll need:Make sure recent version RStudio integrated development environment (IDE).\nfact, consider using preview version updating regularly.\nCompared official released version, preview gives access latest greatest features slightly increases chances finding bug.\ndistinct volatile daily build.Preview version: https://www.rstudio.com/products/rstudio/download/preview/Released version: https://www.rstudio.com/products/rstudio/download/\nreaders can use free, open source version RStudio Desktop.\nreaders can use free, open source version RStudio Desktop.","code":"\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))"},{"path":"setup.html","id":"setup-usage","chapter":"3 System setup","heading":"3.2 devtools, usethis, and you","text":"“large, contain multitudes.”— Walt Whitman, Song MyselfAfter 7 years development, devtools grown rather unwieldy package, making maintenance difficult.\nVersion 2.0.0, released late 2018, marked conscious uncoupling devtools, functionality moving seven smaller packages.\nvarious means, devtools continues expose usual functionality, although mostly maintained elsewhere.\nexample, devtools might provide wrapper function order set user-friendly defaults, introduce helpful interactive behaviour, combine functionality multiple sub-packages.’s recommended approach devtools constituent packages?\nvaries, depending whether ’re working useR developeR mode:interactive use, useRs attach devtools think provider favorite functions package development.programmatic use, inside another package, developeRs depend devtools, instead access functions via package primary home.\ndevtools rarely appear role foo qualified call form foo::fcn(). Instead, foo package fcn() defined.\nexception continue feature devtools::install_github() way install development version package README, even though install_github() actually lives remotes package. ’s piece advice pertains interactive use, prefer emphasize devtools.\ndevtools rarely appear role foo qualified call form foo::fcn(). Instead, foo package fcn() defined.exception continue feature devtools::install_github() way install development version package README, even though install_github() actually lives remotes package. ’s piece advice pertains interactive use, prefer emphasize devtools.Try report bugs package function’s primary home.Example simulate installing loading package, interactive development:functionality used inside R package, preferred call:usethis package one constituent package people may aware may use directly.\nnow holds functions act files folders R project, especially project also R package.\nfunctions usethis made available devtools.\n, attach devtools, can use function usethis without qualification, .e. just call use_testthat().\nchoose specify namespace, working programmatic style, access usethis functions directly: usethis::use_testthat() instead devtools::use_testthat().","code":"\nlibrary(devtools)\nload_all()\npkgload::load_all()"},{"path":"setup.html","id":"personal-startup-configuration","chapter":"3 System setup","heading":"3.2.1 Personal startup configuration","text":"can attach devtools like :soon grows aggravating repeatedly attach devtools every R session.\nTherefore, strongly recommend attaching devtools .Rprofile startup file, like :convenience, function use_devtools() creates .Rprofile, needed, opens editing, puts necessary lines code clipboard screen.\nAnother package may want handle way testthat.general, ’s bad idea attach packages .Rprofile, invites create R scripts don’t reflect dependencies via explicit calls library(foo).\ndevtools workflow package smooths process package development , therefore, unlikely get baked analysis scripts.\nNote still take care attach interactive sessions.usethis consults certain options , example, creating R packages de novo.\nallows specify personal defaults package maintainer preferred license.\n’s example code snippet go .Rprofile:following code installs development versions devtools usethis, may important revision book.","code":"\nlibrary(devtools)\nif (interactive()) {\n  suppressMessages(require(devtools))\n}\noptions(\n  usethis.full_name = \"Jane Doe\",\n  usethis.description = list(\n    `Authors@R` = 'person(\"Jane\", \"Doe\", email = \"jane@example.com\", role = c(\"aut\", \"cre\"), \n    comment = c(ORCID = \"YOUR-ORCID-ID\"))',\n    License = \"MIT + file LICENSE\",\n    Version = \"0.0.0.9000\"\n  ),\n  usethis.protocol  = \"ssh\"  \n)\ndevtools::install_github(\"r-lib/devtools\")\ndevtools::install_github(\"r-lib/usethis\")"},{"path":"setup.html","id":"setup-tools","chapter":"3 System setup","heading":"3.3 R build toolchain","text":"fully capable building R packages source, ’ll also need compiler command line tools.\nmay strictly necessary want build packages containing C C++ code.\nEspecially using RStudio, can set aside now.\nIDE alert provide support try something requires setup development environment.\nRead advice .","code":""},{"path":"setup.html","id":"windows","chapter":"3 System setup","heading":"3.3.1 Windows","text":"Windows collection tools needed building packages source called Rtools.Rtools R package.\ninstalled install.packages().\nInstead, download https://cran.r-project.org/bin/windows/Rtools/ run installer.Rtools installation may see window asking “Select Additional Tasks”.select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed.select box “Save version information registry”. selected default.","code":""},{"path":"setup.html","id":"macos","chapter":"3 System setup","heading":"3.3.2 macOS","text":"need install Xcode command line tools, requires register Apple developer (don’t worry, ’s free)., shell, :Alternatively, can install current release full Xcode Mac App Store.\nincludes great deal need, offers advantage App Store convenience.","code":"xcode-select --install"},{"path":"setup.html","id":"linux","chapter":"3 System setup","heading":"3.3.3 Linux","text":"Make sure ’ve installed R, also R development tools.\nexample, Ubuntu (Debian) need install r-base-dev package.","code":""},{"path":"setup.html","id":"verify-system-prep","chapter":"3 System setup","heading":"3.3.4 Verify system prep","text":"can request “(package) development situation report” devtools::dev_sitrep():reveals certain tools packages missing --date, encouraged update .","code":"\ndevtools::dev_sitrep()\n#> ── R ───────────────────────────────────────────────────────────────────────\n#> • version: 4.1.2\n#> • path: '/Library/Frameworks/R.framework/Versions/4.1/Resources/'\n#> ── RStudio ─────────────────────────────────────────────────────────────────\n#> • version: 2022.2.0.443\n#> ── devtools ────────────────────────────────────────────────────────────────\n#> • version: 2.4.3.9000\n#> • devtools or its dependencies out of date:\n#>   'gitcreds', 'gh'\n#>   Update them with `devtools::update_packages(\"devtools\")`\n#> ── dev package ─────────────────────────────────────────────────────────────\n#> • package: 'rpkgs'\n#> • path: '/Users/jenny/rrr/r-pkgs/'\n#> • rpkgs dependencies out of date:\n#>   'gitcreds', 'generics', 'tidyselect', 'dplyr', 'tidyr', 'broom', 'gh'\n#>  Update them with `devtools::install_dev_deps()`"},{"path":"package-structure-state.html","id":"package-structure-state","chapter":"4 Package structure and state","heading":"4 Package structure and state","text":"","code":""},{"path":"package-structure-state.html","id":"introduction-1","chapter":"4 Package structure and state","heading":"4.1 Introduction","text":"chapter start road package development converting implicit knowledge ’ve gained using R packages explicit knowledge needed create modify .\n’ll learn various states package can difference package library (care).","code":""},{"path":"package-structure-state.html","id":"package-states","chapter":"4 Package structure and state","heading":"4.2 Package states","text":"create modify package, work “source code” “source files”.\ninteract -development package source form.\npackage form familiar day--day usage.\nPackage development workflows make much sense understand five states R package can :sourcebundledbinaryinstalledin-memoryYou already know functions put packages states.\nexample, install.packages() devtools::install_github() move package source, bundled, binary states installed state.\nlibrary() function loads installed package memory, making available immediate direct use.","code":""},{"path":"package-structure-state.html","id":"source-package","chapter":"4 Package structure and state","heading":"4.3 Source package","text":"source package just directory files specific structure.\nincludes particular components, DESCRIPTION file, R/ directory containing .R files, .\nremaining chapters book dedicated detailing components.new package development, may never seen package source form!\nmight even source packages computer.\neasiest way see package source form right away browse around code web.Many R packages developed open GitHub (GitLab similar).\nbest case scenario visit package’s CRAN landing page, e.g.:forcats: https://cran.r-project.org/package=forcatsreadxl: https://cran.r-project.org/package=readxland one URLs links repository public hosting service, e.g.:forcats: https://github.com/tidyverse/forcatsreadxl: https://github.com/tidyverse/readxlSome maintainers forget list URL, even though package developed public repository, still might able discover via search.Even package developed public platform, can visit source unofficial, read-mirror maintained R-hub.\nExamples:MASS: https://github.com/cran/MASScar: https://github.com/cran/carNote exploring package’s true development venue, source evolution just reverse-engineered package’s CRAN releases.\npresents redacted view package history, , definition, includes everything essential.","code":""},{"path":"package-structure-state.html","id":"bundled-package","chapter":"4 Package structure and state","heading":"4.4 Bundled package","text":"bundled package package ’s compressed single file.\nconvention (Linux), package bundles R use extension .tar.gz sometimes referred “source tarballs”.\nmeans multiple files reduced single file (.tar) compressed using gzip (.gz).\nbundle useful , ’s platform-agnostic, transportation-friendly intermediary source package installed package.rare case need make bundle package ’re developing locally, use devtools::build().\nhood, calls pkgbuild::build() , ultimately, R CMD build, described Building package tarballs section Writing R Extensions.tip package bundle “source tarball” simply result making tar archive source files, compressing gzip.\nconvention, R world, operations carried making .tar.gz file ’ve elected refer package bundle.Every CRAN package available bundled form, via “Package source” field individual landing pages.\nContinuing examples , download bundles forcats_0.4.0.tar.gz readxl_1.3.1.tar.gz (whatever current versions may ).\nunpack bundle shell (R console) like :decompress bundle, ’ll see looks almost source package.\ndiagram summarises files present top-level directory source, bundled, binary versions devtools.TODO: Remake figure https://github.com/hadley/r-pkgs/issues/587.\nFIGURE 4.1: Side--side comparison source, bundled, binary package.\nmain differences source package uncompressed bundle :Vignettes built, rendered outputs, HTML, appear inst/doc/ vignette index appears build/ directory, usually alongside PDF package manual.Vignettes built, rendered outputs, HTML, appear inst/doc/ vignette index appears build/ directory, usually alongside PDF package manual.local source package might contain temporary files used save time development, like compilation artefacts src/.\nnever found bundle.local source package might contain temporary files used save time development, like compilation artefacts src/.\nnever found bundle.files listed .Rbuildignore included bundle.\ntypically files facilitate development process, excluded distributed product.files listed .Rbuildignore included bundle.\ntypically files facilitate development process, excluded distributed product.","code":"tar xvf forcats_0.4.0.tar.gz"},{"path":"package-structure-state.html","id":"rbuildignore","chapter":"4 Package structure and state","heading":"4.4.1 .Rbuildignore","text":"won’t need contemplate exact structure package .tar.gz files often, need understand .Rbuildignore file.\ncontrols files source package make downstream forms.line .Rbuildignore Perl-compatible regular expression matched, without regard case, path file source package 1.\nregular expression matches, file directory excluded.\nNote default exclusions implemented R , mostly relating classic version control systems editors, SVN, Git, Emacs.exclude specific file directory (common use case), MUST anchor regular expression.\nexample, exclude directory called “notes”, use ^notes$.\nregular expression notes match file name containing notes, e.g.\nR/notes.R, man/important-notes.R, data/endnotes.Rdata, etc.\nsafest way exclude specific file directory use usethis::use_build_ignore(\"notes\"), escaping ..Rbuildignore way resolve tension practices support development process CRAN’s requirements submission distribution.\nEven aren’t planning release CRAN, following conventions allow make best use R’s built-tooling package checking installation.\naffected files fall two broad, semi-overlapping classes:Files help generate package contents programmatically. Examples:\nUsing README.Rmd generate informative current README.md.\nStoring .R scripts create update internal exported data.\nUsing README.Rmd generate informative current README.md.Storing .R scripts create update internal exported data.Files drive package development, checking, documentation, outside CRAN’s purview. Examples:\nFiles relating RStudio IDE.\nUsing pkgdown package generate website.\nConfiguration files related continuous integration/deployment monitoring test coverage.\nFiles relating RStudio IDE.Using pkgdown package generate website.Configuration files related continuous integration/deployment monitoring test coverage.non-exhaustive list typical entries .Rbuildignore file package tidyverse:Note comments must appear actual .Rbuildignore file; included exposition.’ll mention need add files .Rbuildignore whenever ’s important.\nRemember usethis::use_build_ignore() attractive way manage file.","code":"^.*\\.Rproj$         # Designates the directory as an RStudio Project\n^\\.Rproj\\.user$     # Used by RStudio for temporary files\n^README\\.Rmd$       # An Rmd file used to generate README.md\n^LICENSE\\.md$       # Full text of the license\n^cran-comments\\.md$ # Comments for CRAN submission\n^data-raw$          # Code used to create data included in the package\n^pkgdown$           # Resources used for the package website\n^_pkgdown\\.yml$     # Configuration info for the package website\n^\\.github$          # Contributing guidelines, CoC, issue templates, etc."},{"path":"package-structure-state.html","id":"structure-binary","chapter":"4 Package structure and state","heading":"4.5 Binary package","text":"want distribute package R user doesn’t package development tools, ’ll need provide binary package.\nLike package bundle, binary package single file.\nUnlike bundled package, binary package platform specific two basic flavors: Windows macOS.\n(Linux users generally required tools necessary install .tar.gz files.)Binary packages macOS stored .tgz, whereas Windows binary packages end .zip.\nneed make binary package, use devtools::build(binary = TRUE) relevant operating system.\nhood, calls pkgbuild::build(binary = TRUE) , ultimately, R CMD INSTALL --build, described Building binary packages section Writing R Extensions.clear, primary maker distributor binary packages CRAN, individual maintainers.\npackage intended public use, effective way make broadly available release CRAN.\nsubmit package bundle CRAN makes distributes package binaries.CRAN packages usually available binary form, macOS Windows, current, previous, (possibly) development versions R.\nContinuing examples , download binary packages :forcats macOS: forcats_0.4.0.tgzreadxl Windows: readxl_1.3.1.zipand , indeed, part ’s usually going behind scenes call install.packages().uncompress binary package, ’ll see internal structure rather different source bundled package.\nFigure 4.1 includes comparison.\nnotable differences:.R files R/ directory - instead three files store parsed functions efficient file format.\nbasically result loading R code saving functions save().\n(process, adds little extra metadata make things fast possible)..R files R/ directory - instead three files store parsed functions efficient file format.\nbasically result loading R code saving functions save().\n(process, adds little extra metadata make things fast possible).Meta/ directory contains number .rds files.\nfiles contain cached metadata package, like topics help files cover parsed version DESCRIPTION file.\n(can use readRDS() see exactly ’s files).\nfiles make package loading faster caching costly computations.Meta/ directory contains number .rds files.\nfiles contain cached metadata package, like topics help files cover parsed version DESCRIPTION file.\n(can use readRDS() see exactly ’s files).\nfiles make package loading faster caching costly computations.actual help content appears help/ html/ (longer man/).actual help content appears help/ html/ (longer man/).code src/ directory, now libs/ directory contains results compiling code.\nWindows, subdirectories 32 bit (i386/) 64 bit (x64/) environments.code src/ directory, now libs/ directory contains results compiling code.\nWindows, subdirectories 32 bit (i386/) 64 bit (x64/) environments.objects data/, now converted efficient form.objects data/, now converted efficient form.contents inst/ moved top-level directory.\nexample, vignette files now doc/.contents inst/ moved top-level directory.\nexample, vignette files now doc/.files folders dropped, README, build/, tests/, vignettes/.files folders dropped, README, build/, tests/, vignettes/.","code":""},{"path":"package-structure-state.html","id":"installed-package","chapter":"4 Package structure and state","heading":"4.6 Installed package","text":"installed package binary package ’s decompressed package library (described 4.8).\nfollowing diagram illustrates many ways package can installed.\ndiagram complicated!\nideal world, installing package involve stringing together set simple steps: source -> bundle, bundle -> binary, binary -> installed.\nreal world, ’s simple often (faster) shortcuts available.\nFIGURE 4.2: Many methods converting package states.\nbuilt-command line tool R CMD INSTALL powers package installation.\ncan install package source files, bundle (.k.. source tarball), binary package.\nDetails available Installing packages section R Installation Administration.\nJust like devtools::build(), devtools provides wrapper function, devtools::install(), makes tool available within R session.useRs understandably like install packages comfort R session directly CRAN.\nbuilt-function install.packages() meets need.\ncan download package, various forms, install , optionally attend installation dependencies.devtools exposes family install_*() functions address needs beyond reach install.packages() make existing capabilities easier access.\nfunctions actually maintained remotes package re-exported devtools.install_github() flagship example sub-family functions can download package remote location CRAN whatever necessary install .\nrest devtools/remotes install_*() functions aimed making things technically possible base tooling bit easier explicit, install_version() installs specific version CRAN package.Analogous .Rbuildignore, described section 4.4.1, .Rinstignore lets keep files present package bundle installed package.\nHowever, contrast .Rbuildignore, rather obscure rarely needed.TODO: Revisit section later respect pak https://pak.r-lib.org.","code":"\nlibrary(remotes)\n\nfuns <- as.character(lsf.str(\"package:remotes\"))\ngrep(\"^install_.+\", funs, value = TRUE)\n#>  [1] \"install_bioc\"      \"install_bitbucket\" \"install_cran\"     \n#>  [4] \"install_deps\"      \"install_dev\"       \"install_git\"      \n#>  [7] \"install_github\"    \"install_gitlab\"    \"install_local\"    \n#> [10] \"install_remote\"    \"install_svn\"       \"install_url\"      \n#> [13] \"install_version\""},{"path":"package-structure-state.html","id":"in-memory-package","chapter":"4 Package structure and state","heading":"4.7 In-memory package","text":"finally arrive command familiar everyone uses R:Assuming usethis installed, call makes functions available use, .e. now can :usethis package loaded memory , fact, also attached search path.\ndistinction loading attaching packages important ’re writing scripts, ’s important ’re writing packages.\n’ll learn difference ’s important search path.library() great way iteratively tweak test drive package ’re developing, works installed package.\nsection 5.5, ’ll learn devtools::load_all() accelerates development allowing load source package directly memory.","code":"\nlibrary(usethis)\ncreate_package(\"/path/to/my/coolpackage\")"},{"path":"package-structure-state.html","id":"library","chapter":"4 Package structure and state","heading":"4.8 Package libraries","text":"just discussed library() function, whose name inspired .\ncall library(foo), R looks current libraries installed package named “foo” , successful, makes foo available use.R, library directory containing installed packages, sort like library books.\nUnfortunately, R world, frequently encounter confused usage words “library” “package”.\n’s common someone refer dplyr, example, library actually package.\nreasons confusion.\nFirst, R’s terminology arguably runs counter broader programming conventions, usual meaning “library” closer mean “package”.\nname library() function probably reinforces wrong associations.\nFinally, vocabulary error often harmless, ’s easy R users fall wrong habit people point mistake look like insufferable pedants.\n’s bottom line:use library() function load 2 package.distinction two important useful get involved package development.can multiple libraries computer.\nfact, many already , especially ’re Windows.\ncan use .libPaths() see libraries currently active.\n’s might look Windows:’s similar look macOS (results may vary):cases see two active libraries, consulted order:user libraryA system-level global libraryThis setup typical Windows, something usually need opt macOS 3.\nsetup, add-packages installed CRAN (elsewhere) local development kept user library.\n, macOS system used primary development machine many packages (~1000), whereas Windows system used occasionally much spartan.\ncore set base recommended packages ship R live system-level library macOS Windows.\nseparation appeals many developers makes easy , example, clean add-packages without disturbing base R installation.’re macOS see one library, urgent need change anything.\nnext time upgrade R, consider creating user-level library.\ndefault, R looks user library found path stored environment variable R_LIBS_USER, defaults ~/Library/R/x.y/library.\ninstall, R x.y.z prior installing add-packages, use dir.create(\"~/Library/R/x.y/library\") set user library.\nNow library setup seen .\nAlternatively, setup user library elsewhere tell R setting R_LIBS_USER environment variable .Renviron.filepaths libraries also make clear associated specific version R (3.6.x time writing), also typical.\nreflects enforces fact need reinstall add-packages update R , say, 3.5 3.6, change minor version.\ngenerally need re-install add-packages patch release, e.g., going R 3.6.0 3.6.1.R usage grows sophisticated, ’s common start managing package libraries intention.\nexample, tools like renv (predecessor packrat) automate process managing project-specific libraries.\ncan important making data products reproducible, portable, isolated one another.\npackage developer might prepend library search path temporary library, containing set packages specific versions, order explore issues backwards forwards compatibility, without affecting day--day work.\nReverse dependency checks another example explicitly manage library search path.main levers control libraries active, order scope persistence:Environment variables, like R_LIBS R_LIBS_USER, consulted startup.Calling .libPaths() one filepaths.Executing small snippets code temporarily altered library search path via withr::with_libpaths().Arguments individual functions, like install.packages(lib =) library(lib.loc =).Finally, ’s important note library() NEVER used inside package.\nPackages scripts rely different mechanisms declaring dependencies one biggest adjustments need make mental model habits.\nexplore topic fully Chapter 11.5.","code":"\n# on Windows\n.libPaths()\n#> [1] \"C:/Users/jenny/Documents/R/win-library/3.6\"\n#> [2] \"C:/Program Files/R/R-3.6.0/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#> [[1]]\n#>   [1] \"abc\"           \"anytime\"       \"askpass\"       \"assertthat\"   \n#>  ...\n#> [145] \"zeallot\"      \n#> \n#> [[2]]\n#>  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#>  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#>  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#> [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#> [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#> [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#> [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#> [29] \"translations\" \"utils\"\n# on macOS\n.libPaths()\n#> [1] \"/Users/jenny/Library/R/3.6/library\"\n#> [2] \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#> [[1]]\n#>    [1] \"abc\"                  \"abc.data\"             \"abind\"                \n#>  ...\n#> [1033] \"Zelig\"                \"zip\"                  \"zoo\"                 \n#> \n#> [[2]]\n#>  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#>  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#>  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#> [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#> [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#> [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#> [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#> [29] \"translations\" \"utils\""},{"path":"workflows101.html","id":"workflows101","chapter":"5 Fundamental development workflows","heading":"5 Fundamental development workflows","text":"","code":""},{"path":"workflows101.html","id":"introduction-2","chapter":"5 Fundamental development workflows","heading":"5.1 Introduction","text":"peeked hood R packages libraries Chapter 4, provide basic workflows creating package moving different states come development.","code":""},{"path":"workflows101.html","id":"create-a-package","chapter":"5 Fundamental development workflows","heading":"5.2 Create a package","text":"","code":""},{"path":"workflows101.html","id":"survey-the-existing-landscape","chapter":"5 Fundamental development workflows","heading":"5.2.1 Survey the existing landscape","text":"Many packages born one person’s frustration common task easier.\ndecide whether something package-worthy?\n’s definitive answer, ’s helpful appreciate least two types payoff:Product: life better functionality implemented formally, package.Process: greater mastery R make effective work.care existence product, main goal navigate space existing packages.\nSilge, Nash, Graves organized survey sessions around useR!\n2017 write R Journal (Silge, Nash, Graves 2018) provides comprehensive roundup resources.looking ways increase R mastery, still educate landscape.\nplenty good reasons make package, even relevant prior work.\nway experts got way actually building things, often basic things, deserve chance learn tinkering.\n’re allowed work things never touched, ’re likely looking problems either obscure difficult.Finally, ’s also valid evaluate suitability existing tools basis user interface, defaults, edge case behaviour.\npackage can technically need, ’s unergonomic use case, ’s fair say doesn’t meet needs.\ncase, can still make sense develop implementation write wrapper functions hide sharp edges.work falls well-defined domain, educate existing R packages, even ’ve resolved create package.\nfollow specific design patterns?\nspecific data structures common primary input output?\nexample, active R community around spatial data analysis (r-spatial.org) successfully self-organised promote greater consistency across packages different maintainers.\nmodeling, hardhat package provides scaffolding creating modeling package plays well tidymodels ecosystem.\npackage get usage need less documentation fits nicely surrounding landscape.","code":""},{"path":"workflows101.html","id":"naming","chapter":"5 Fundamental development workflows","heading":"5.2.2 Name your package","text":"“two hard things Computer Science: cache invalidation naming things.”— Phil KarltonBefore can create package, need come name .\ncan hardest part creating package!\n(least one can automate .)","code":""},{"path":"workflows101.html","id":"formal-requirements","chapter":"5 Fundamental development workflows","heading":"5.2.2.1 Formal requirements","text":"three formal requirements:name can consist letters, numbers, periods, .e., ..must start letter.end period.Unfortunately, means can’t use either hyphens underscores, .e., - _, package name.\nrecommend using periods package names, due confusing associations file extensions S3 methods.","code":""},{"path":"workflows101.html","id":"pragmatic-advice","chapter":"5 Fundamental development workflows","heading":"5.2.2.2 Pragmatic advice","text":"plan share package others, ’s worth spending minutes come good name.\nthings consider:Pick unique name ’s easy Google.\nmakes easy potential users find package (associated resources) see ’s using .Pick unique name ’s easy Google.\nmakes easy potential users find package (associated resources) see ’s using .Don’t pick name ’s already use CRAN Bioconductor.\nmay also want consider types name collision:\n-development package maturing , say, GitHub already history seems heading towards release?\nname already used another piece software library framework , e.g., Python JavaScript ecosystem?\nDon’t pick name ’s already use CRAN Bioconductor.\nmay also want consider types name collision:-development package maturing , say, GitHub already history seems heading towards release?name already used another piece software library framework , e.g., Python JavaScript ecosystem?Avoid using upper lower case letters: makes package name hard type even harder remember.\nexample, ’s hard remember ’s Rgtk2 RGTK2 RGtk2.Avoid using upper lower case letters: makes package name hard type even harder remember.\nexample, ’s hard remember ’s Rgtk2 RGTK2 RGtk2.Give preference names pronounceable, people comfortable talking package way hear inside head.Give preference names pronounceable, people comfortable talking package way hear inside head.Find word evokes problem modify ’s unique:\nlubridate makes dates times easier.\nrvest “harvests” content web pages.\nr2d3 provides utilities working D3 visualisations.\nforcats anagram factors, use categorical data.\nFind word evokes problem modify ’s unique:lubridate makes dates times easier.rvest “harvests” content web pages.r2d3 provides utilities working D3 visualisations.forcats anagram factors, use categorical data.Use abbreviations:\nRcpp = R + C++ (plus plus)\nbrms = Bayesian Regression Models using Stan\nUse abbreviations:Rcpp = R + C++ (plus plus)brms = Bayesian Regression Models using StanAdd extra R:\nstringr provides string tools.\nbeepr plays notification sounds.\ncallr calls R, R.\nAdd extra R:stringr provides string tools.beepr plays notification sounds.callr calls R, R.Don’t get sued.\n’re creating package talks commercial service, check branding guidelines. example, rDrop isn’t called rDropbox Dropbox prohibits applications using full trademarked name.\nDon’t get sued.’re creating package talks commercial service, check branding guidelines. example, rDrop isn’t called rDropbox Dropbox prohibits applications using full trademarked name.Nick Tierney presents fun typology package names Naming Things blog post; see inspiring examples.\nalso experience renaming packages, post , ’ve decided change r package name good resource don’t get right first time.","code":""},{"path":"workflows101.html","id":"use-the-available-package","chapter":"5 Fundamental development workflows","heading":"5.2.2.3 Use the available package","text":"impossible abide suggestions simultaneously, obviously need make trade-offs.\navailable package function called available() helps evaluate potential package name many angles:available::available() following:Checks validity.Checks availability CRAN, Bioconductor, beyond.Searches various websites help discover unintended meanings. interactive session, URLs see opened browser tabs.Attempts report whether name positive negative sentiment.","code":"\nlibrary(available)\n\navailable(\"doofus\")\n#> Urban Dictionary can contain potentially offensive results,\n#>   should they be included? [Y]es / [N]o:\n#> 1: 1\n#> ── doofus ──────────────────────────────────────────────────────────────────\n#> Name valid: ✔\n#> Available on CRAN: ✔ \n#> Available on Bioconductor: ✔\n#> Available on GitHub:  ✔ \n#> Abbreviations: http://www.abbreviations.com/doofus\n#> Wikipedia: https://en.wikipedia.org/wiki/doofus\n#> Wiktionary: https://en.wiktionary.org/wiki/doofus\n#> Sentiment:???"},{"path":"workflows101.html","id":"creating","chapter":"5 Fundamental development workflows","heading":"5.2.3 Package creation","text":"’ve come name, two ways create package.Call usethis::create_package().RStudio, File > New Project > New Directory > R Package. ultimately calls usethis::create_package(), really ’s just one way.TODO: revisit tackle usethis + RStudio project templates https://github.com/r-lib/usethis/issues/770. particular, contemplate whether reinstate screenshot-y coverage RStudio workflows .produces smallest possible working package, three components:R/ directory, ’ll learn R code.R/ directory, ’ll learn R code.basic DESCRIPTION file, ’ll learn package metadata.basic DESCRIPTION file, ’ll learn package metadata.basic NAMESPACE file, ’ll learn namespace.basic NAMESPACE file, ’ll learn namespace.may also include RStudio project file, pkgname.Rproj, makes package easy use RStudio, described .\nBasic .Rbuildignore .gitignore files also left behind.Don’t use package.skeleton() create package.\nfunction comes R, might tempted use , creates package immediately throws errors R CMD build.\nanticipates different development process use , repairing broken initial state just makes unnecessary work people use devtools (, especially, roxygen2).\nUse create_package().","code":""},{"path":"workflows101.html","id":"where-source-package","chapter":"5 Fundamental development workflows","heading":"5.2.4 Where should you create_package()?","text":"main required argument create_package() path new package live:Remember package lives source form (section 4.3), installed form (section 4.6).\nInstalled packages live library discussed conventional setups libraries section 4.8.keep source packages?\nmain principle location distinct installed packages live.\nabsence external considerations, typical user designate directory inside home directory R (source) packages.\ndiscussed colleagues source favorite R packages lives inside directories like ~/rrr/, ~/documents/tidyverse/, ~/r/packages/, ~/pkg/.\nus use one directory , others divide source packages among directories based development role (contributor vs. ), GitHub organization (tidyverse vs r-lib), development stage (active vs. ), .probably reflects primarily tool-builders.\nacademic researcher might organize files around individual publications, whereas data scientist might organize around data products reports.\nparticular technical traditional reason one specific approach.\nlong keep clear distinction source installed packages, just pick strategy works within overall system file organization, use consistently.","code":"\ncreate_package(\"path/to/package/pkgname\")"},{"path":"workflows101.html","id":"projects","chapter":"5 Fundamental development workflows","heading":"5.3 RStudio Projects","text":"devtools works hand--hand RStudio, believe best development environment R users.\nclear, can use devtools without using RStudio can develop packages RStudio without using devtools.\nspecial, two-way relationship makes rewarding use devtools RStudio together.RStudio Project, capital “P”, regular directory computer includes (mostly hidden) RStudio infrastructure facilitate work one projects, lowercase “p”.\nproject might R package, data analysis, Shiny app, book, blog, etc.","code":""},{"path":"workflows101.html","id":"benefits-of-rstudio-projects","chapter":"5 Fundamental development workflows","heading":"5.3.1 Benefits of RStudio Projects","text":"section 4.3, already know source package lives directory computer.\nstrongly recommend source package also RStudio Project.\npayoffs:Projects “launch-able”.\n’s easy fire fresh instance RStudio Project, file browser working directory set exactly way need, ready work.Projects “launch-able”.\n’s easy fire fresh instance RStudio Project, file browser working directory set exactly way need, ready work.Project isolated; code run one Project affect Project.\ncan several RStudio Projects open code executed Project effect R session workspace Project B.\nProject isolated; code run one Project affect Project.can several RStudio Projects open code executed Project effect R session workspace Project B.get handy code navigation tools like F2 jump function definition Ctrl + . look functions files name.get handy code navigation tools like F2 jump function definition Ctrl + . look functions files name.get useful keyboard shortcuts clickable interface common package development tasks, like generating documentation, running tests, checking entire package.\nget useful keyboard shortcuts clickable interface common package development tasks, like generating documentation, running tests, checking entire package.see useful keyboard shortcuts, press Alt + Shift + K use Help > Keyboard Shortcuts Help.Follow @rstudiotips Twitter regular dose RStudio tips tricks.","code":""},{"path":"workflows101.html","id":"how-to-get-an-rstudio-project","chapter":"5 Fundamental development workflows","heading":"5.3.2 How to get an RStudio Project","text":"follow recommendation create new packages create_package(), takes care .\nnew package also RStudio Project, ’re working RStudio.various ways designate directory pre-existing source package RStudio Project:RStudio, File > New Project > Existing Directory.Call create_package() path pre-existing R source package.Call usethis::use_rstudio(), active usethis project set existing R package. practice, probably means just need make sure working directory inside pre-existing package.","code":""},{"path":"workflows101.html","id":"what-makes-an-rstudio-project","chapter":"5 Fundamental development workflows","heading":"5.3.3 What makes an RStudio Project?","text":"directory RStudio Project contain .Rproj file.\nTypically, directory named “foo”, Project file foo.Rproj.\ndirectory also R package, package name usually also “foo”.\npath least resistance make names coincide nest package inside subdirectory inside Project.\nsettle different workflow, just know may feel like fighting tools..Rproj file just text file.\n’s default project file used usethis:don’t need modify file hand.\nInstead, use interface available via Tools > Project Options Project Options Projects menu top-right corner.TODO: update deal layout.","code":"Version: 1.0\n\nRestoreWorkspace: No\nSaveWorkspace: No\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nEncoding: UTF-8\n\nAutoAppendNewline: Yes\nStripTrailingWhitespace: Yes\n\nBuildType: Package\nPackageUseDevtools: Yes\nPackageInstallArgs: --no-multiarch --with-keep.source\nPackageRoxygenize: rd,collate,namespace"},{"path":"workflows101.html","id":"how-to-launch-an-rstudio-project","chapter":"5 Fundamental development workflows","heading":"5.3.4 How to launch an RStudio Project","text":"Double-click foo.Rproj file macOS’s Finder Windows Explorer launch foo Project RStudio.can also launch Projects within RStudio via File > Open Project (New Session) Projects menu top-right corner.use productivity launcher app, can probably configure something delightful .Rproj files.\nuse Alfred 4, macOS , similar tools exist Windows.\nfact, good reason use productivity app first place.normal – productive!\n– multiple Projects open .","code":""},{"path":"workflows101.html","id":"rstudio-project-vs.-active-usethis-project","chapter":"5 Fundamental development workflows","heading":"5.3.5 RStudio Project vs. active usethis project","text":"notice usethis functions don’t take path: operate files “active usethis project”.\nusethis package assumes 95% time coincide:current RStudio Project, using RStudio.active usethis project.Current working directory R process.things seem funky, call proj_sitrep() get “situation report”.\nidentify peculiar situations propose ways get back happier state.","code":"\n# these should usually be the same (or unset)\nproj_sitrep()\n#> *   working_directory: '/Users/jenny/rrr/readxl'\n#> * active_usethis_proj: '/Users/jenny/rrr/readxl'\n#> * active_rstudio_proj: '/Users/jenny/rrr/readxl'"},{"path":"workflows101.html","id":"working-directory-and-filepath-discipline","chapter":"5 Fundamental development workflows","heading":"5.4 Working directory and filepath discipline","text":"develop package, executing R code.\nmix workflow calls (e.g., document() test()) ad hoc calls help write functions, examples, tests.\nstrongly recommend leave working directory R process set top-level source package.’re totally new package development, don’t much basis supporting resisting proposal.\nexperience may find somewhat upsetting.\nsupposed express paths working subdirectories, like tests/?\nbecomes relevant, ’ll show exploit path-building helpers, testthat::test_path(), determine paths execution time.basic idea leaving working directory alone, encouraged write paths convey intent explicitly (“read foo.csv test directory”) instead implicitly (“read foo.csv current working directory, think going test directory”).\nsure sign reliance implicit paths incessant fiddling working directory, ’re using setwd() manually fulfill assumptions implicit paths.mentality can design away whole class path headaches makes day--day development pleasant well.\ntwo reasons implicit paths hard get right:Recall different forms package can take development cycle (Chapter 4). states differ terms files folders exist relative positions within hierarchy. ’s tricky write relative paths work across package states.Eventually, package processed built-tools like R CMD build, R CMD check, R CMD INSTALL, potentially CRAN. ’s hard keep track working directory every stage processes.Path helpers like testthat::test_path(), fs::path_package(), rprojroot package extremely useful building resilient paths hold across whole range situations come development usage.\nAnother way eliminate brittle paths rigorous use proper methods storing data inside package (Chapter 8) target session temp directory appropriate, ephemeral testing artefacts (Chapter 13).","code":""},{"path":"workflows101.html","id":"load-all","chapter":"5 Fundamental development workflows","heading":"5.5 Test drive with load_all()","text":"load_all() function arguably important part devtools workflow.load_all() key step “lather, rinse, repeat” cycle package development:Tweak function definition.load_all()Try change running small example tests.’re new package development devtools, ’s easy overlook importance load_all() fall awkward habits data analysis workflow.","code":"\n# with devtools attached and\n# working directory set to top-level of your source package ...\n\nload_all()\n\n# ... now experiment with the functions in your package"},{"path":"workflows101.html","id":"benefits-of-load_all","chapter":"5 Fundamental development workflows","heading":"5.5.1 Benefits of load_all()","text":"first start use development environment, like RStudio Emacs + ESS, biggest win ability send lines code .R script execution R console.\nfluidity makes tolerable follow best practice regarding source code real 5 (opposed objects workspace) saving .R files (opposed saving reloading .Rdata).load_all() significance package development , ironically, requires test drive package code way script code.\nload_all() simulates fullblown process seeing effect source code change, clunky enough 6 won’t want often.\nmain benefits load_all():can iterate quickly, encourages exploration incremental progress.\niterative speedup especially noticeable packages compiled code.\niterative speedup especially noticeable packages compiled code.get develop interactively namespace regime accurately mimics things someone uses installed package:\ncan call internal functions directly, without using ::: without tempted temporarily define functions global workspace.\ncan also call functions packages ’ve imported NAMESPACE, without tempted attach dependencies via library().\ncan call internal functions directly, without using ::: without tempted temporarily define functions global workspace.can also call functions packages ’ve imported NAMESPACE, without tempted attach dependencies via library().load_all() removes friction development workflow eliminates temptation use workarounds often lead mistakes around namespace dependency management.","code":""},{"path":"workflows101.html","id":"other-ways-to-call-load_all","chapter":"5 Fundamental development workflows","heading":"5.5.2 Other ways to call load_all()","text":"working Project package, RStudio offers several ways call load_all():Keyboard shortcut: Cmd+Shift+L (macOS), Ctrl+Shift+L (Windows, Linux)Build pane’s … menuBuild > Load Alldevtools::load_all() thin wrapper around pkgload::load_all() adds bit user-friendliness.\nunlikely use load_all() programatically inside another package, , probably use pkgload::load_all() directly.TODO: Decide update diagram reposition re-integrate prose. example, figure frame w.r.t. RStudio Install Restart vs. Clean Rebuild.","code":""},{"path":"package-within.html","id":"package-within","chapter":"6 The package within","heading":"6 The package within","text":"","code":""},{"path":"package-within.html","id":"introduction-3","chapter":"6 The package within","heading":"6.1 Introduction","text":"part book ends way started, development small toy package.\nwhole game chapter established basic mechanics, workflow, tooling package development, said practically nothing R code inside package.\ntotally different emphasis.\nchapter, focus primarily package’s R code differs R code script.start data analysis script show find package lurks within.\nisolate extract reusable data logic script, put R package, use package much simplified script.\nmake rookie mistakes along way, order highlight special considerations R code inside package.section headers incorporate NATO phonetic alphabet specific meaning. just convenient way mark progress towards working package.","code":""},{"path":"package-within.html","id":"alfa-a-script-that-works","chapter":"6 The package within","heading":"6.2 Alfa: a script that works","text":"fictional data analysis script data-cleaning.R group collects reports people went swim:swim hot outside?data usually comes CSV file, read data frame.classify observation using American (“US”) British (“UK”) English, based word chosen describe sandy place ocean land meet.\ncolumn used build new english column.Sadly, temperatures often reported mix Fahrenheit Celsius.\nabsence better information, guess Americans report temperatures Fahrenheit therefore observations converted Celsius.Finally, cleaned (cleaner?) data written back CSV file.\nlike capture timestamp filename this7.Even typical analytical tasks quite different, hopefully see familiar patterns .\n’s easy imagine group similar pre-processing many similar data files time.\nanalyses can efficient consistent make standard data maneuvers available functions package, instead inlining data logic dozens hundreds data ingest scripts.","code":"\ninfile <- \"swim.csv\"\n(dat <- read.csv(infile))\n#>   name    where temp\n#> 1 Adam    beach   95\n#> 2 Bess    coast   91\n#> 3 Cora seashore   28\n#> 4 Dale    beach   85\n#> 5 Evan  seaside   31\ndat$english[dat$where == \"beach\"] <- \"US\"\ndat$english[dat$where == \"coast\"] <- \"US\"\ndat$english[dat$where == \"seashore\"] <- \"UK\"\ndat$english[dat$where == \"seaside\"] <- \"UK\"\ndat$temp[dat$english == \"US\"] <- (dat$temp[dat$english == \"US\"] - 32) * 5/9\ndat\n#>   name    where temp english\n#> 1 Adam    beach 35.0      US\n#> 2 Bess    coast 32.8      US\n#> 3 Cora seashore 28.0      UK\n#> 4 Dale    beach 29.4      US\n#> 5 Evan  seaside 31.0      UK\nnow <- Sys.time()\ntimestamp <- format(now, \"%Y-%B-%d_%H-%M-%S\")\n(outfile <- paste0(timestamp, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile)))\n#> [1] \"2022-July-04_04-53-09_swim_clean.csv\"\nwrite.csv(dat, file = outfile, quote = FALSE, row.names = FALSE)"},{"path":"package-within.html","id":"bravo-a-better-script-that-works","chapter":"6 The package within","heading":"6.3 Bravo: a better script that works","text":"package lurks within original script actually pretty hard see!\n’s obscured suboptimal coding practices, use repetitive copy/paste-style code mixing code data.\nTherefore good first step refactor code, isolating much data logic possible proper objects functions, respectively.time, introduce use add-packages, several reasons.\nFirst, actually use tidyverse sort data wrangling.\nSecond, many people use add-packages scripts, good see add-packages handled create package.’s next version script.key features note :using functions tidyverse packages (specifically readr dplyr).map different “beach” words whether considered US UK English now isolated lookup table, lets us create english column one go left_join(). also makes easier add new words futureThe f_to_c(), timestamp(), outfile_path() functions now hold logic converting temperatures forming timestamped output file name.’s getting easier recognize reusable bits script, .e. bits nothing specific input file, like swim.csv.\nsort refactoring often happens naturally way creating package, , ’s good idea intentionally.","code":"\nlibrary(tidyverse)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\nlookup_table <- tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\ndat <- dat %>% \n  left_join(lookup_table)\n#> Joining, by = \"where\"\n\nf_to_c <- function(x) (x - 32) * 5/9\n\ndat <- dat %>% \n  mutate(temp = if_else(english == \"US\", f_to_c(temp), temp))\ndat\n#> # A tibble: 5 × 4\n#>   name  where     temp english\n#>   <chr> <chr>    <dbl> <chr>  \n#> 1 Adam  beach     35   US     \n#> 2 Bess  coast     32.8 US     \n#> 3 Cora  seashore  28   UK     \n#> 4 Dale  beach     29.4 US     \n#> 5 Evan  seaside   31   UK\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\nwrite_csv(dat, outfile_path(infile))"},{"path":"package-within.html","id":"charlie-external-helpers","chapter":"6 The package within","heading":"6.4 Charlie: external helpers","text":"typical next step move reusable data logic analysis script one separate files.\nconventional opening move, want use helper files multiple analyses.content beach-lookup-table.csv:content cleaning-helpers.R:’ve added high-level helper functions, localize_beach() celsify_temp(), pre-existing helpers (f_to_c(), timestamp(), outfile_path()).next version data cleaning script, now ’ve pulled helper functions (lookup table).’ll notice script getting shorter , hopefully, easier read modify, repetitive fussy clutter moved sight.\nWhether code actually easier work subjective depends natural “interface” feels people actually preprocess swimming data.\nsorts design decisions subject separate project: principles.tidyverse.org.Let’s assume group agrees design decisions promising, .e. seem making things better, worse.\nSure, existing code perfect, typical developmental stage ’re trying figure helper functions work.","code":"where,english\nbeach,US\ncoast,US\nseashore,UK\nseaside,UK\nlibrary(tidyverse)\n\nlocalize_beach <- function(dat) {\n  lookup_table <- read_csv(\n    \"beach-lookup-table.csv\",\n    col_types = cols(where = \"c\", english = \"c\")\n  )\n  left_join(dat, lookup_table)\n}\n\nf_to_c <- function(x) (x - 32) * 5/9\n\ncelsify_temp <- function(dat) {\n  mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp))\n}\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\nlibrary(tidyverse)\nsource(\"cleaning-helpers.R\")\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\n(dat <- dat %>% \n    localize_beach() %>% \n    celsify_temp())\n#> Joining, by = \"where\"\n#> # A tibble: 5 × 4\n#>   name  where     temp english\n#>   <chr> <chr>    <dbl> <chr>  \n#> 1 Adam  beach     35   US     \n#> 2 Bess  coast     32.8 US     \n#> 3 Cora  seashore  28   UK     \n#> 4 Dale  beach     29.4 US     \n#> 5 Evan  seaside   31   UK\n\nwrite_csv(dat, outfile_path(infile))"},{"path":"package-within.html","id":"delta-an-attempt-at-a-package","chapter":"6 The package within","heading":"6.5 Delta: an attempt at a package","text":"Let’s make package!\n’s simplest thing might hope “just work”: make cleaning-helpers.R R package.\nSomehow.Concretely, :Use usethis::create_package() scaffold new R package.\ngood first step!\ngood first step!Copy cleaning-helpers.R new package, specifically, R/cleaning-helpers.R.\nmorally correct, mechanically wrong several ways, soon see.\nmorally correct, mechanically wrong several ways, soon see.Copy beach-lookup-table.csv new package. ? Let’s try top-level source package.\ngoing end well. Shipping data package special topic, covered chapter 8.\ngoing end well. Shipping data package special topic, covered chapter 8.Install package.\nDespite problems identified , actually works! interesting, can (try ) use see happens.\nDespite problems identified , actually works! interesting, can (try ) use see happens.’s version script hope run successfully installing package.change previous script thathas replaced byHere’s actually happens try run :None helper functions actually available use, even though call library(delta)!\ncontrast source()ing file helper functions, attaching package dump functions global workspace.\ndefault, functions package internal use.\nneed export localize_beach(), celsify_temp(), outfile_path() users can call .\nbook, achieve putting @export special roxygen comment function (namespace management covered chapter 11.5).Let’s say , run devtools::document() (re)generate NAMESPACE file, re-install package.\nNow execute script, works!Correction: works sometimes.\nSpecifically, works working directory set top-level source package.\nworking directory, still get error:lookup table consulted inside localize_beach() found.\nOne simply dump CSV files source R package expect things “just work”.\nfix next iteration package (chapter 8 full coverage include data package).abandon initial experiment, let’s also marvel fact able install, attach, , certain extent, use fundamentally broken package.\nload_all() works fine, !\nsobering reminder running R CMD check, probably via check(), often development.\nquickly alert many problems simple installation usage reveal.Indeed, R CMD check fails package see this8:mean “package called ‘tidyverse’”?!?\n’re using , problems, main script!\nAlso, ’ve already installed used package, can’t R CMD check install ?error happens strictness R CMD check meets first line R/cleaning-helpers.R:declare package depends another package (tidyverse, case).\nmake functions another package available use .\nDependencies must declared DESCRIPTION (’s ).\nSince declared dependencies, R CMD check takes us word tries install package base packages available, means library(tidyverse) call fails.\n“regular” installation succeeds, simply tidyverse available regular library, hides particular mistake.review, copying cleaning-helpers.R R/cleaning-helpers.R, without modification, problematic (least) ways:account exported vs. non-exported functions.CSV file holding lookup table found installed package.properly declare dependency add-packages.","code":"\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n\nwrite_csv(dat, outfile_path(infile))\nsource(\"cleaning-helpers.R\")\nlibrary(delta)\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n#> Error in localize_beach(.) : could not find function \"localize_beach\"\n\nwrite_csv(dat, outfile_path(infile))\n#> Error in outfile_path(infile) : could not find function \"outfile_path\"\n#' @export\ncelsify_temp <- function(dat) {\n  mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp))\n}\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n#> Error: 'beach-lookup-table.csv' does not exist in current working directory ('/Users/jenny/tmp').\n\nwrite_csv(dat, outfile_path(infile))\nlibrary(tidyverse)"},{"path":"package-within.html","id":"echo-a-working-package","chapter":"6 The package within","heading":"6.6 Echo: a working package","text":"’re ready make minimal version package actually works.new version R/cleaning-helpers.R9:’ve gone back defining lookup_table R code, since initial attempt read CSV created sort filepath snafu.\nOK small, internal, static data, remember see chapter 8 general techniques storing data package.calls tidyverse functions now qualified name specific package actually provides function, e.g. dplyr::mutate().\nways access functions another package, explained chapter 11.5, recommended default.\nalso strong recommendation one depend tidyverse meta-package package10.\nInstead, better identify specific package(s) actually use.\ncase, package uses dplyr.library(tidyverse) call gone instead declare use dplyr Imports field DESCRIPTION:, together use namespace-qualified calls, like dplyr::left_join(), constitutes valid way use another package within .\nmetadata conveyed via DESCRIPTION covered chapter 10.2.user-facing functions @export tag roxygen comment, means devtools::document() adds correctly NAMESPACE file.\nNote f_to_c() currently used internally, inside celsify_temp(), exported (likewise timestamp()).version package can installed, used, technically passes R CMD check, though 1 note 1 warning.“visible binding” note peculiarity using dplyr unquoted variable names inside package, use bare variable names (english temp) looks suspicious.\nadd either lines file R/ eliminate note11:warning missing documentation haven’t properly documented exported functions.\nvalid concern something absolutely address real package.\n’ve already seen create help files roxygen comments whole game chapter cover topic thoroughly chapter 16.\nTherefore, won’t discuss .","code":"\nlookup_table <- dplyr::tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\n#' @export\nlocalize_beach <- function(dat) {\n  dplyr::left_join(dat, lookup_table)\n}\n\nf_to_c <- function(x) (x - 32) * 5/9\n\n#' @export\ncelsify_temp <- function(dat) {\n  dplyr::mutate(dat, temp = dplyr::if_else(english == \"US\", f_to_c(temp), temp))\n}\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\n\n#' @export\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}Package: echo\n(... other lines omitted ...)\nImports: \n    dplyr* checking R code for possible problems ... NOTE\ncelsify_temp: no visible binding for global variable ‘english’\ncelsify_temp: no visible binding for global variable ‘temp’\nUndefined global functions or variables:\n  english temp\n\n* checking for missing documentation entries ... WARNING\nUndocumented code objects:\n  ‘celsify_temp’ ‘localize_beach’ ‘outfile_path’\nAll user-level objects in a package should have documentation entries.\nSee chapter ‘Writing R documentation files’ in the ‘Writing R\nExtensions’ manual.\n# option 1 (then you should also put utils in Imports)\nutils::globalVariables(c(\"english\", \"temp\"))\n\n# option 2\nenglish <- temp <- NULL"},{"path":"package-within.html","id":"package-within-build-time-run-time","chapter":"6 The package within","heading":"6.7 Foxtrot: build time vs. run time","text":"package works, great, group members notice something odd timestamps:datetime timestamped filename doesn’t reflect time reported system.\nfact, users claim timestamp never seems change !\n?Recall form filepath output files:fact capture now <- Sys.time() outside definition outfile_path() probably vexing readers .\nnow reflects instant time execute now <- Sys.time().\ninitial approach, happened source()d cleaning-helpers.R.\n’s ideal, probably pretty harmless mistake, helper file source()d shortly wrote outfile.approach quite devastating context package.\nnow <- Sys.time() executed package built.\nnever .\neasy subconsciously assume package code re-evaluated package installed, attached, used.\n.\nYes, code inside functions absolutely run whenever called.\nfunctions – objects created top-level code R/ – defined exactly , build time.defining now top-level code R/, ’ve doomed package timestamp output files (wrong) time.\nfix make sure Sys.time() call happens runtime.Let’s look parts R/cleaning-helpers.R:four top-level <- assignments excerpt.\ntop-level definitions data frame lookup_table functions timestamp() outfile_path() correct.\nappropriate defined exactly , build time.\ntop-level definition now, used inside outfile_path(), regrettable.better versions outfile_path():illustrates need different mindset defining objects inside package.\nvast majority objects functions functions generally use data create passed via argument.\ntypes sloppiness fairly harmless function defined immediately use, can costly functions distributed package.","code":"\nSys.time()\n#> [1] \"2022-02-24 20:49:59 PST\"\n\noutfile_path(\"INFILE.csv\")\n#> [1] \"2020-September-03_11-06-33_INFILE_clean.csv\"\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\nlookup_table <- dplyr::tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n# always timestamp as \"now\"\noutfile_path <- function(infile) {\n  ts <- timestamp(Sys.time())\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\n# allow user to provide a time, but default to \"now\"\noutfile_path <- function(infile, time = Sys.time()) {\n  ts <- timestamp(time)\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}"},{"path":"package-within.html","id":"package-within-side-effects","chapter":"6 The package within","heading":"6.8 Golf: side effects","text":"timestamps now reflect current time, group raises new concern.\nstands, timestamps reflect done data cleaning part world ’re .\nheart timestamp strategy format string12:formats Sys.time() way includes month name (number) local time13.’s timestamp produced hypothetical colleagues cleaning data exactly instant time.see month names vary, time, even date!\nsafest choice form timestamps respect fixed locale time zone (presumably non-geographic choices represented “Computer World!” ).research learn can force certain locale via Sys.setlocale() force certain time zone setting TZ environment variable.\nSpecifically, set LC_TIME component locale “C” time zone “UTC” (Coordinated Universal Time).\n’s first attempt improve timestamp():Brazilian colleague notices datetimes print differently, uses outfile_path() package:::Notice month name switched Portuguese English time clearly reported different time zone.\ncalls Sys.setlocale() Sys.setenv() inside timestamp() made persistent (surprising) changes R session.\nsort side effect undesirable extremely difficult track debug, especially complicated settings.better versions timestamp():show various methods limit scope changes LC_TIME timezone.\ngood rule thumb make scope changes narrow possible practical.\ntz argument format() surgical way deal timezone, nothing similar exists LC_TIME.\nmake temporary locale modification using withr package, provides flexible toolkit temporary state changes.\n(base::.exit()) discussed section 7.6.underscores point previous section: need adopt different mindset defining functions inside package.\nTry avoid making changes user’s overall state.\nchanges unavoidable, make sure reverse (possible) document explicitly (related function’s primary purpose).","code":"\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n#> [1] \"2022-July-04_04-53-10\"\ntimestamp <- function(time = Sys.time()) {\n  Sys.setlocale(\"LC_TIME\", \"C\")\n  Sys.setenv(TZ = \"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")#> [1] \"2022-julho-04_01-53-10\"\noutfile_path(\"INFILE.csv\")\n#> [1] \"2022-July-04_04-53-10_INFILE_clean.csv\"\n\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n#> [1] \"2022-July-04_04-53-10\"\n# use withr::local_*() functions to keep the changes local to timestamp()\ntimestamp <- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  withr::local_timezone(\"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\n\n# use the tz argument to format.POSIXct()\ntimestamp <- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n}\n\n# put the format() call inside withr::with_*()\ntimestamp <- function(time = Sys.time()) {\n  withr::with_locale(\n    c(\"LC_TIME\" = \"C\"),\n    format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n  )\n}"},{"path":"r.html","id":"r","chapter":"7 R code","heading":"7 R code","text":"","code":""},{"path":"r.html","id":"introduction-4","chapter":"7 R code","heading":"7.1 Introduction","text":"first principle making package R code goes R/ directory.\nchapter, ’ll learn organising functions files, maintaining consistent style, recognizing stricter requirements functions package (versus script).\n’ll also remind fundamental workflows test-driving formally checking -development package: load_all(), test(), check().","code":""},{"path":"r.html","id":"code-organising","chapter":"7 R code","heading":"7.2 Organise functions into files","text":"hard rule package store function definitions R scripts, .e. files extension .R, live R/ directory14.\nHowever, conventions can make source code package easier navigate relieve re-answering “name ?” time create new file.\nTidyverse Style Guide offers general advice file names also advice specifically applies files package.\nexpand .file name meaningful convey functions defined within.\n’re free arrange functions files wish, two extremes bad: don’t put functions one file don’t put function separate file.\nadvice inform general policy, exceptions every rule.\nspecific function large lots documentation, can make sense give file, named function.\noften, single .R file contain multiple function definitions: main function supporting helpers, family related functions, combination two.examples actual source tidyr package version 1.1.2.\ndepartures hard--fast rules given , illustrates ’s lot room judgment .Another file often see wild R/utils.R.\ncommon place define small utilities used inside multiple package functions.\nSince serve helpers multiple functions, placing R/utils.R makes easier re-discover return package long break.Bob Rudis assembled collection files analysis post Dissecting R Package “Utility Belts”.’s hard predict file function lives , suggests ’s time separate functions files reconsider naming functions /files.organisation functions within files less important RStudio, offers two ways jump definition function:Press Ctrl + .\n(period) start typing name.\nKeep typing narrow list eventually pick function (file) visit.\nworks functions files project.\nPress Ctrl + .\n(period) start typing name.\nKeep typing narrow list eventually pick function (file) visit.\nworks functions files project.cursor function name function name selected, press F2.\nworks functions defined package another package.cursor function name function name selected, press F2.\nworks functions defined package another package.","code":""},{"path":"r.html","id":"code-load-all","chapter":"7 R code","heading":"7.3 Fast feedback via load_all()","text":"add modify functions defined files R/, naturally want try .\nwant reiterate strong recommendation use devtools::load_all() make available interactive exploration instead , example, source()ing files R/.\nmain coverage load_all() workflows chapter load_all() also shows one natural development tasks whole game.\nCompared alternatives, load_all() helps iterate quickly provides excellent approximation namespace regime installed package.","code":""},{"path":"r.html","id":"code-style","chapter":"7 R code","heading":"7.4 Code style","text":"recommend following tidyverse style guide (https://style.tidyverse.org), goes much detail can .\nformat also allows dynamic document book.Although style guide explains “” “”, another important decision enforce specific code style.\nrecommend styler package (https://styler.r-lib.org); default behaviour enforces tidyverse style guide.\nmany ways apply styler code, depending context:styler::style_pkg() restyles entire R package.styler::style_dir() restyles files directory.usethis::use_tidy_style() wrapper applies one functions depending whether current project R package .styler::style_file() restyles single file.styler::style_text() restyles character vector.styler installed, RStudio Addins menu offer several additional ways style code:active selectionthe active filethe active packageIf don’t use Git another version control system, applying function like styler::style_pkg() nerve-wracking somewhat dangerous, lack way see exactly changed accept/reject changes granular way.styler package can also integrated various platforms hosting source code continuous integration.\nexample, tidyverse packages use GitHub Action restyles package triggered special comment (/style) pull request.\nallows maintainers focus reviewing substance pull request, without nitpick small issues whitespace indentation1516\n.","code":""},{"path":"r.html","id":"understand-when-code-is-executed","chapter":"7 R code","heading":"7.5 Understand when code is executed","text":"now, ’ve probably writing scripts, R code saved file execute interactively, perhaps using IDE /source(), noninteractively via Rscript.\ntwo main differences code scripts packages:script, code run … run !\nawkwardness statement reflects ’s hard even think issue script.\nHowever, must, order appreciate code package run package built.\nbig implications write code R/: package code create objects, vast majority functions.script, code run … run !\nawkwardness statement reflects ’s hard even think issue script.\nHowever, must, order appreciate code package run package built.\nbig implications write code R/: package code create objects, vast majority functions.Functions package used situations didn’t imagine.\nmeans functions need thoughtful way interact outside world.Functions package used situations didn’t imagine.\nmeans functions need thoughtful way interact outside world.expand first point second next section.source() script, every line code executed results immediately made available.\nThings different package code, loaded two steps.\nbinary package built (often, CRAN) code R/ executed results saved.\nattach package library(), cached results re-loaded certain objects (mostly functions) made available use.\nfull details means package binary form given 4.5.\nrefer creation binary package (binary) “build time” , specifically, mean R CMD INSTALL --build run.\n(might think R CMD build , actually makes bundled package, .k.. “source tarball”.) macOS Windows users CRAN packages, build time whenever CRAN built binary package OS.\ninstall packages source, build time essentially (built ) installed package.Consider assignment x <- Sys.time().\nput script, x tells script source()d.\nput code package, x tells package binary built.\nsection 6.7, show complete example context forming timestamps inside package.main takeaway :R code outside function suspicious carefully reviewed.explore real-world examples show easy get burned “build time vs. load time” issue.\nLuckily, diagnose problem, generally difficult fix.","code":""},{"path":"r.html","id":"a-path-returned-by-system.file","chapter":"7 R code","heading":"7.5.1 A path returned by system.file()","text":"shinybootstrap2 package code R/:dataTableDependency object defined top-level package code depends paths obtained via system.file().\ndescribed GitHub issue,works fine package built tested machine.\nHowever, package built one machine used another (case CRAN binary packages), fail – dependency point wrong directory host.heart solution make sure system.file() called function, run time.\nIndeed, fix made (commit 138db47) packages similar code related check added htmlDependency() .\nparticular problem now caught R CMD check, due changes came staged installation R 3.6.0.","code":"\ndataTableDependency <- list(\n  htmlDependency(\n    \"datatables\", \"1.10.2\",\n    c(file = system.file(\"www/datatables\", package = \"shinybootstrap2\")),\n    script = \"js/jquery.dataTables.min.js\"\n  ),\n  htmlDependency(\n    \"datatables-bootstrap\", \"1.10.2\",\n    c(file = system.file(\"www/datatables\", package = \"shinybootstrap2\")),\n    stylesheet = c(\"css/dataTables.bootstrap.css\", \"css/dataTables.extra.css\"),\n    script = \"js/dataTables.bootstrap.js\"\n  )\n)"},{"path":"r.html","id":"available-colours","chapter":"7 R code","heading":"7.5.2 Available colours","text":"crayon package function, crayon::show_ansi_colors(), displays ANSI colour table screen, basically show sort styling possible.\nearly version, function looked something like :ansi_colors_8 ansi_colors_256 character vectors exploring certain set colours, presumably styled via ANSI escapes.problem objects formed cached binary package built.\nSince often happens headless server, likely happens conditions terminal colours might enabled even available.\nUsers installed package still call show_ansi_colors() num_colors() detect number colours supported system (256 modern computers).\nun-coloured object print screen (original GitHub issue r-lib/crayon#37).solution compute display objects function run time (commit e2b368a:Literally, code used, simply pushed body function taking arguments (similar shinybootstrap2 example).\nreference , e.g., ansi_colors_8 object replaced call ansi_colors_8() function.main takeaway functions assess expose capabilities package user’s system must fully execute user’s system.\n’s fairly easy accidentally rely results cached build time, quite possibly different machine.","code":"show_ansi_colors <- function(colors = num_colors()) {\n  if (colors < 8) {\n    cat(\"Colors are not supported\")\n  } else if (colors < 256) {\n    cat(ansi_colors_8, sep = \"\")\n    invisible(ansi_colors_8)\n  } else {\n    cat(ansi_colors_256, sep = \"\")\n    invisible(ansi_colors_256)\n  }\n}\n\nansi_colors_8 <- # code to generate a vector covering basic terminal colors\n  \nansi_colors_256 <- # code to generate a vector covering 256 colors\nshow_ansi_colors <- function(colors = num_colors()) {\n  if (colors < 8) {\n    cat(\"Colors are not supported\")\n  } else if (colors < 256) {\n    cat(ansi_colors_8(), sep = \"\")\n    invisible(ansi_colors_8())\n  } else {\n    cat(ansi_colors_256(), sep = \"\")\n    invisible(ansi_colors_256())\n  }\n}\n\nansi_colors_8 <- function() {\n  # code to generate a vector covering basic terminal colors\n}\n  \nansi_colors_256 <- function() {\n  # code to generate a vector covering 256 colors\n}"},{"path":"r.html","id":"aliasing-a-function","chapter":"7 R code","heading":"7.5.3 Aliasing a function","text":"One last example shows , even careful define functions R/, still subtleties consider.\nImagine want function foo() package basically alias function blah() package, e.g. pkgB.\nmight tempted :However, cause foo() package reflect definition pkgB::blah() version present machine binary package built (often CRAN), moment time.\nbug discovered pkgB::blah() subsequently fixed, package still use older, buggy version, package rebuilt (often CRAN) users upgrade, completely control.\nalternative approach protects :Now, user calls foo(), effectively calling pkgB::blah(), version installed machine moment.real example affected older version knitr, related default “evaluate” hook set evaluate::evaluate() (original issue yihui/knitr#1441, resolved commit d6b53e0).","code":"\nfoo <- pkgB::blah\nfoo <- function(...) pkgB::blah(...)"},{"path":"r.html","id":"code-r-landscape","chapter":"7 R code","heading":"7.6 Respect the R landscape","text":"Another big difference script package people going use package, ’re going use situations never imagined.\nmeans need pay attention R landscape, includes just available functions objects, global settings.changed R landscape ’ve loaded package library(), changed global option options(), modified working directory setwd().\nbehaviour functions differs running function, ’ve modified landscape.\nside effects section “package within” chapter concrete example involving time zones locale-specific printing datetimes.\nChanging landscape bad makes code much harder understand.functions modify global settings never use better alternatives:Don’t use library() require().\nmodify search path, affecting functions available global environment.\nInstead, use DESCRIPTION specify package’s requirements, described chapter 10.2.\nalso makes sure packages installed package installed.Don’t use library() require().\nmodify search path, affecting functions available global environment.\nInstead, use DESCRIPTION specify package’s requirements, described chapter 10.2.\nalso makes sure packages installed package installed.Never use source() load code file.\nsource() modifies current environment, inserting results executing code.\nreason use source() inside package, .e. file R/.\nSometimes people source() files R/ package development, ’ve explained 5.5 7.3, load_all() much better way load current code exploration.\n’re using source() create dataset, better use methods 8 including data package.Never use source() load code file.\nsource() modifies current environment, inserting results executing code.\nreason use source() inside package, .e. file R/.\nSometimes people source() files R/ package development, ’ve explained 5.5 7.3, load_all() much better way load current code exploration.\n’re using source() create dataset, better use methods 8 including data package.non-exhaustive list functions used caution:options()par()setwd()Sys.setenv()Sys.setlocale()set.seed() (anything changes state random number generator) TODO: maybe tell one scary stories https://github.com/hadley/r-pkgs/issues/447If must use , make sure clean .\nshow using functions withr package base R.flip side coin avoid relying user’s landscape, might different .\nexample, functions like read.csv() dangerous value stringsAsFactors argument comes global option stringsAsFactors.\nexpect TRUE (default), user set FALSE, code might fail.TODO: update replace example light stringsAsFactors changes.","code":""},{"path":"r.html","id":"manage-state-with-withr","chapter":"7 R code","heading":"7.6.1 Manage state with withr","text":"withr package inspired base::.exit() provides flexible .exit()-like toolkit (.exit() covered next section).\nwithr::defer() can used drop-replacement .exit(), real reason use get default “stack-like” behaviour use envir argument (advanced usage).general pattern capture original state, schedule eventual restoration “exit”, make state change.\nsetters, options() par(), return old value provide new value, leading usage looks like :Certain state changes, modifying session options, come often withr offers pre-made helpers.\nstate change helpers withr likely find useful:’ll notice helper comes two forms useful different situations:with_*() functions best executing small snippets code temporarily modified state.\n(functions inspired base::() works.)\n\nf <- function(x, sig_digits) {\n  # imagine lots code \n  withr::with_options(\n    list(digits = sig_digits),\n    print(x)\n  )\n  # ... lot code \n}with_*() functions best executing small snippets code temporarily modified state.\n(functions inspired base::() works.)local_*() functions best modifying state “now function exits”.\n\ng <- function(x, sig_digits) {\n  withr::local_options(list(digits = sig_digits))\n  print(x)\n  # imagine lots code \n}local_*() functions best modifying state “now function exits”.Developing code interactively withr pleasant, deferred actions can scheduled even global environment.\ncleanup actions can executed withr::deferred_run() cleared without execution withr::deferred_clear().\nWithout feature, can tricky experiment code needs cleanup “exit”, behaves differently executed console versus arm’s length inside function.-depth coverage given withr vignette Changing restoring state withr also prove useful talk testing chapter 13.","code":"\nf <- function(x, y, z) {\n  ...\n  old <- options(mfrow = c(2, 2), pty = \"s\")\n  defer(options(old))\n  ...\n}\nf <- function(x, sig_digits) {\n  # imagine lots of code here\n  withr::with_options(\n    list(digits = sig_digits),\n    print(x)\n  )\n  # ... and a lot more code here\n}\ng <- function(x, sig_digits) {\n  withr::local_options(list(digits = sig_digits))\n  print(x)\n  # imagine lots of code here\n}"},{"path":"r.html","id":"restore-state-with-baseon.exit","chapter":"7 R code","heading":"7.6.2 Restore state with base::on.exit()","text":"general “save, schedule restoration, change” pattern looks using base::.exit().state changes aren’t available sort setter must implement .Note specify .exit(..., add = TRUE), almost always want behaviour, .e. add list deferred cleanup tasks rather replace entirely.\n(default value ) related preference withr::defer(), ’re willing take dependency withr.\nissues explored withr vignette.","code":"\nf <- function(x, y, z) {\n  ...\n  old <- options(mfrow = c(2, 2), pty = \"s\")\n  on.exit(options(old), add = TRUE)\n  ...\n}\ng <- function(a, b, c) {\n  ...\n  scratch_file <- tempfile()\n  on.exit(unlink(scratch_file), add = TRUE)\n  file.create(scratch_file)\n  ...\n}"},{"path":"r.html","id":"isolate-side-effects","chapter":"7 R code","heading":"7.6.3 Isolate side effects","text":"Creating plots printing output console two ways affecting global R environment.\nOften can’t avoid (’re important!) ’s good practice isolate functions produce output.\nalso makes easier people repurpose work new uses.\nexample, separate data preparation plotting two functions, others can use data prep work (often hardest part!) create new visualisations.","code":""},{"path":"r.html","id":"when-you-do-need-side-effects","chapter":"7 R code","heading":"7.6.4 When you do need side-effects","text":"Occasionally, packages need side-effects.\ncommon package talks external system — might need initial setup package loads.\n, can use two special functions: .onLoad() .onAttach().\ncalled package loaded attached.\n’ll learn distinction two Namespaces.\nnow, always use .onLoad() unless explicitly directed otherwise.common uses .onLoad() .onAttach() :display informative message package loads.\nmight make usage conditions clear display package capabilities based current system conditions.\nStartup messages one place use .onAttach() instead .onLoad().\ndisplay startup messages, always use packageStartupMessage(), message().\n(allows suppressPackageStartupMessages() selectively suppress package startup messages).\n\n.onAttach <- function(libname, pkgname) {\n  packageStartupMessage(\"Welcome package\")\n}display informative message package loads.\nmight make usage conditions clear display package capabilities based current system conditions.\nStartup messages one place use .onAttach() instead .onLoad().\ndisplay startup messages, always use packageStartupMessage(), message().\n(allows suppressPackageStartupMessages() selectively suppress package startup messages).set custom options package options().\navoid conflicts packages, ensure prefix option names name package.\nAlso careful override options user already set.\nTODO: update reflect current usethis options. use following code devtools set useful options:\n\n.onLoad <- function(libname, pkgname) {\n  op <- options()\n  op.devtools <- list(\n    devtools.path = \"~/R-dev\",\n    devtools.install.args = \"\",\n    devtools.name = \"name goes \",\n    devtools.desc.author = \"First Last <first.last@example.com> [aut, cre]\",\n    devtools.desc.license = \"license ?\",\n    devtools.desc.suggests = NULL,\n    devtools.desc = list()\n  )\n  toset <- !(names(op.devtools) %% names(op))\n  ((toset)) options(op.devtools[toset])\n\n  invisible()\n}\ndevtools functions can use e.g. getOption(\"devtools.name\") get name package author, know sensible default value already set.set custom options package options().\navoid conflicts packages, ensure prefix option names name package.\nAlso careful override options user already set.TODO: update reflect current usethis options. use following code devtools set useful options:devtools functions can use e.g. getOption(\"devtools.name\") get name package author, know sensible default value already set.register vignette engines tools::vignetteEngine().\nTODO: update / remove ?register vignette engines tools::vignetteEngine().\nTODO: update / remove ?can see examples, .onLoad() .onAttach() called two arguments: libname pkgname.\n’re rarely used (’re holdover days needed use library.dynam() load compiled code).\ngive path package installed (“library”), name package.use .onLoad(), consider using .onUnload() clean side effects.\nconvention, .onLoad() friends usually saved file called R/zzz.R.\n(Note .First.lib() .Last.lib() old versions .onLoad() .onUnload() longer used.)","code":"\n.onAttach <- function(libname, pkgname) {\n  packageStartupMessage(\"Welcome to my package\")\n}\n.onLoad <- function(libname, pkgname) {\n  op <- options()\n  op.devtools <- list(\n    devtools.path = \"~/R-dev\",\n    devtools.install.args = \"\",\n    devtools.name = \"Your name goes here\",\n    devtools.desc.author = \"First Last <first.last@example.com> [aut, cre]\",\n    devtools.desc.license = \"What license is it under?\",\n    devtools.desc.suggests = NULL,\n    devtools.desc = list()\n  )\n  toset <- !(names(op.devtools) %in% names(op))\n  if(any(toset)) options(op.devtools[toset])\n\n  invisible()\n}"},{"path":"r.html","id":"constant-health-checks","chapter":"7 R code","heading":"7.7 Constant health checks","text":"typical sequence calls using devtools package development:Edit one files R/.document() (’ve made changes impact help files NAMESPACE)load_all()Run examples interactively.test() (test_active_file())check()interesting question frequently rapidly move development cycle.\noften find running sequence several times hour day adding modifying single function.newer package development might comfortable slinging R code much less comfortable writing compiling documentation, simulating package build & installation, testing, running R CMD check.\nhuman nature embrace familiar postpone unfamiliar.\noften leads dysfunctional workflow full sequence unfolds infrequently, maybe per month every couple months, slowly often great pain:Edit one files R/.Build, install, use package. Iterate occasionally previous step.Write documentation (code “done”).Write tests (code “done”).Run R CMD check right submitting CRAN releasing way.’ve already talked value fast feedback, context load_all().\nalso applies running document(), test(), check().\ndefects just can’t detect using load_all() running interactive examples immediately revealed formal checks.\nFinding fixing 5 bugs, one time, right created one much easier troubleshooting 5 (possibly interacting ), weeks months last touched code.","code":""},{"path":"r.html","id":"code-cran","chapter":"7 R code","heading":"7.8 CRAN notes","text":"(chapter finish hints submitting package CRAN. don’t plan submitting package CRAN, feel free ignore !)’re planning submitting package CRAN, must use ASCII characters .R files.\npractice, means limited digits 0 9, lowercase letters ‘’ ‘z’, uppercase letters ‘’ ‘Z’, common punctuation.sometimes need inline small bit character data includes, e.g., Greek letter (µ), accented character (ü), symbol (30°).\ncan use Unicode character long specify special Unicode escape \"\\u1234\" format.\neasiest way find correct code point use stringi::stri_escape_unicode():Sometimes opposite problem.\ndon’t intentionally non-ASCII characters R code, automated checks reveal .common offenders “curly” “smart” single double quotes sneak copy/paste.\nfunctions tools::showNonASCII() tools::showNonASCIIfile(file) help find offending file(s) line(s).","code":"\nx <- \"This is a bullet •\"\ny <- \"This is a bullet \\u2022\"\nidentical(x, y)\n#> [1] TRUE\ncat(stringi::stri_escape_unicode(x))\n#> This is a bullet \\u2022W  checking R files for non-ASCII characters ...\n   Found the following file with non-ASCII characters:\n     foo.R\n   Portable packages must use only ASCII characters in their R code,\n   except perhaps in comments.\n   Use \\uxxxx escapes for other characters.\ntools::showNonASCIIfile(\"R/foo.R\")\n#> 666: #' If you<e2><80><99>ve copy/pasted quotes, watch out!"},{"path":"data.html","id":"data","chapter":"8 Data","heading":"8 Data","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"data.html","id":"introduction-5","chapter":"8 Data","heading":"8.1 Introduction","text":"’s often useful include data package.\n’re releasing package broad audience, ’s way provide compelling use cases package’s functions.\n’re releasing package specific audience, interested either data (e.g., NZ census data) subject (e.g., demography), ’s way distribute data along documentation (long audience R users).three main ways include data package, depending want able use :want store binary data make available user, put data/.\nbest place put example datasets.want store binary data make available user, put data/.\nbest place put example datasets.want store parsed data, make available user, put R/sysdata.rda.\nbest place put data functions need.want store parsed data, make available user, put R/sysdata.rda.\nbest place put data functions need.want store raw data, put inst/extdata.want store raw data, put inst/extdata.simple alternative three options include source package, either creating hand, using dput() serialise existing data set R code.possible location described detail .","code":""},{"path":"data.html","id":"data-data","chapter":"8 Data","heading":"8.2 Exported data","text":"common location package data (surprise!) data/.\nfile directory .rda (.RData) file created save() containing single object (name file).\neasiest way adhere rules use usethis::use_data():’s possible use types files, don’t recommend .rda files already fast, small explicit.\noptions described data().\nlarger datasets, may want experiment compression setting.\ndefault bzip2, sometimes gzip xz can create smaller files.DESCRIPTION contains LazyData: true, datasets lazily loaded.\nmeans won’t occupy memory use .\nfollowing example shows memory usage loading nycflights13 package.\ncan see memory usage doesn’t change inspect flights dataset stored inside package.recommend always include LazyData: true DESCRIPTION. usethis::create_package() . text slated revision 2nd edition. TL;DR include LazyData: true DESCRIPTION unless actually ship data package. usethis v2.1.0 changes behaviour create_package() use_data() accordingly.Often, data include data/ cleaned version raw data ’ve gathered elsewhere.\nhighly recommend taking time include code used source version package.\nmake easy update reproduce version data.\nsuggest put code data-raw/.\ndon’t need bundled version package, also add .Rbuildignore.\none step :can see approach practice recent data packages.\n’ve creating packages data rarely change, multiple packages can use examples:babynamesfueleconomynasaweathernycflights13usdanutrients","code":"\nx <- sample(1000)\nusethis::use_data(x, mtcars)\npryr::mem_used()\n#> 52.1 MB\nlibrary(nycflights13)\npryr::mem_used()\n#> 58.6 MB\n\ninvisible(flights)\npryr::mem_used()\n#> 99.3 MB\nusethis::use_data_raw()"},{"path":"data.html","id":"documenting-data","chapter":"8 Data","heading":"8.2.1 Documenting datasets","text":"Objects data/ always effectively exported (use slightly different mechanism NAMESPACE details important).\nmeans must documented.\nDocumenting data like documenting function minor differences.\nInstead documenting data directly, document name dataset save R/.\nexample, roxygen2 block used document diamonds data ggplot2 saved R/data.R looks something like :two additional tags important documenting datasets:@format gives overview dataset.\ndata frames, include definition list describes variable.\n’s usually good idea describe variables’ units .@format gives overview dataset.\ndata frames, include definition list describes variable.\n’s usually good idea describe variables’ units .@source provides details got data, often \\url{}.@source provides details got data, often \\url{}.Never @export data set.","code":"\n#' Prices of 50,000 round cut diamonds.\n#'\n#' A dataset containing the prices and other attributes of almost 54,000\n#' diamonds.\n#'\n#' @format A data frame with 53940 rows and 10 variables:\n#' \\describe{\n#'   \\item{price}{price, in US dollars}\n#'   \\item{carat}{weight of the diamond, in carats}\n#'   ...\n#' }\n#' @source \\url{http://www.diamondse.info/}\n\"diamonds\""},{"path":"data.html","id":"data-sysdata","chapter":"8 Data","heading":"8.3 Internal data","text":"Sometimes functions need pre-computed data tables.\nput data/ ’ll also available package users, appropriate.\nInstead, can save R/sysdata.rda.\nexample, two colour-related packages, munsell dichromat, use R/sysdata.rda store large tables colour data.can use usethis::use_data() create file argument internal = TRUE:, make data reproducible ’s good idea include code used generate .\nPut data-raw/.Objects R/sysdata.rda exported (shouldn’t ), don’t need documented.\n’re available inside package.","code":"\nx <- sample(1000)\nusethis::use_data(x, mtcars, internal = TRUE)"},{"path":"data.html","id":"data-extdata","chapter":"8 Data","heading":"8.4 Raw data","text":"want show examples loading/parsing raw data, put original files inst/extdata.\npackage installed, files (folders) inst/ moved one level top-level directory (can’t names like R/ DESCRIPTION).\nrefer files inst/extdata (whether installed ), use system.file().\nexample, readr package uses inst/extdata store delimited files use examples:Beware: default, file exist, system.file() return error - just returns empty string:want error message file exist, add argument mustWork = TRUE:","code":"\nsystem.file(\"extdata\", \"mtcars.csv\", package = \"readr\")\n#> [1] \"/home/runner/work/_temp/Library/readr/extdata/mtcars.csv\"\nsystem.file(\"extdata\", \"iris.csv\", package = \"readr\")\n#> [1] \"\"\nsystem.file(\"extdata\", \"iris.csv\", package = \"readr\", mustWork = TRUE)\n#> Error in system.file(\"extdata\", \"iris.csv\", package = \"readr\", mustWork = TRUE): no file found"},{"path":"data.html","id":"other-data","chapter":"8 Data","heading":"8.5 Other data","text":"Data tests: ’s ok put small files directly test directory.\nremember unit tests testing correctness, performance, keep size small.Data tests: ’s ok put small files directly test directory.\nremember unit tests testing correctness, performance, keep size small.Data vignettes.\nwant show work already loaded dataset, put data data/.\nwant show load raw data, put data inst/extdata.Data vignettes.\nwant show work already loaded dataset, put data data/.\nwant show load raw data, put data inst/extdata.","code":""},{"path":"data.html","id":"data-cran","chapter":"8 Data","heading":"8.6 CRAN notes","text":"Generally, package data smaller megabyte - ’s larger ’ll need argue exemption.\nusually easier data package won’t updated frequently.\nalso make sure data optimally compressed:Run tools::checkRdaFiles() determine best compression file.Run tools::checkRdaFiles() determine best compression file.Re-run usethis::use_data() compress set optimal value.\n’ve lost code recreating files, can use tools::resaveRdaFiles() re-save place.Re-run usethis::use_data() compress set optimal value.\n’ve lost code recreating files, can use tools::resaveRdaFiles() re-save place.","code":""},{"path":"misc.html","id":"misc","chapter":"9 Other components","heading":"9 Other components","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"misc.html","id":"introduction-6","chapter":"9 Other components","heading":"9.1 Introduction","text":"five directories valid top-level directories.\nrarely used:inst/: arbitrary additional files want include package.\nincludes special files, like CITATION, described .inst/: arbitrary additional files want include package.\nincludes special files, like CITATION, described .demo/: package demos.\nuseful prior introduction vignettes, longer recommended.\nSee .demo/: package demos.\nuseful prior introduction vignettes, longer recommended.\nSee .exec/: executable scripts.\nUnlike files placed directories, files exec/ automatically flagged executable.exec/: executable scripts.\nUnlike files placed directories, files exec/ automatically flagged executable.po/: translations messages.\nuseful beyond scope book.\nSee Internationalization chapter “R extensions” details.po/: translations messages.\nuseful beyond scope book.\nSee Internationalization chapter “R extensions” details.tools/: auxiliary files needed configuration, sources need generate scripts.tools/: auxiliary files needed configuration, sources need generate scripts.","code":""},{"path":"misc.html","id":"inst","chapter":"9 Other components","heading":"9.2 Installed files","text":"package installed, everything inst/ copied top-level package directory.\nsense inst/ opposite .Rbuildignore - .Rbuildignore lets remove arbitrary files directories top level, inst/ lets add .\nfree put anything like inst/ one caution: inst/ copied top-level directory, never use subdirectory name existing directory.\nmeans avoid inst/build, inst/data, inst/demo, inst/exec, inst/help, inst/html, inst/inst, inst/libs, inst/Meta, inst/man, inst/po, inst/R, inst/src, inst/tests, inst/tools inst/vignettes.chapter discusses common files found inst/:inst/AUTHOR inst/COPYRIGHT.\ncopyright authorship package particularly complex, can use plain text files, inst/COPYRIGHTS inst/AUTHORS, provide information.inst/AUTHOR inst/COPYRIGHT.\ncopyright authorship package particularly complex, can use plain text files, inst/COPYRIGHTS inst/AUTHORS, provide information.inst/CITATION: cite package, see package citation details.inst/CITATION: cite package, see package citation details.inst/docs: older convention vignettes, avoided modern packages.inst/docs: older convention vignettes, avoided modern packages.inst/extdata: additional external data examples vignettes.\nSee external data detail.inst/extdata: additional external data examples vignettes.\nSee external data detail.inst/java, inst/python etc.\nSee languages.inst/java, inst/python etc.\nSee languages.find file inst/ code use system.file().\nexample, find inst/extdata/mydata.csv, ’d call system.file(\"extdata\", \"mydata.csv\", package = \"mypackage\").\nNote omit inst/ directory path.\nwork package installed, ’s loaded devtools::load_all().","code":""},{"path":"misc.html","id":"inst-citation","chapter":"9 Other components","heading":"9.2.1 Package citation","text":"CITATION file lives inst directory intimately connected citation() function tells cite R R packages.\nCalling citation() without arguments tells cite base R:Calling package name tells cite package:customise citation package, add inst/CITATION looks like :need create inst/CITATION.\ncan see, ’s pretty simple: need learn one new function, citEntry().\nimportant arguments :entry: type citation, “Article”, “Book”, “PhDThesis” etc.entry: type citation, “Article”, “Book”, “PhDThesis” etc.standard bibliographic information like title, author (personList()), year, journal, volume, issue, pages, …standard bibliographic information like title, author (personList()), year, journal, volume, issue, pages, …complete list arguments can found ?bibentry.Use citHeader() citFooter() add additional exhortations.","code":"\ncitation()\n#> \n#> To cite R in publications use:\n#> \n#>   R Core Team (2022). R: A language and environment for\n#>   statistical computing. R Foundation for Statistical\n#>   Computing, Vienna, Austria. URL\n#>   https://www.R-project.org/.\n#> \n#> A BibTeX entry for LaTeX users is\n#> \n#>   @Manual{,\n#>     title = {R: A Language and Environment for Statistical Computing},\n#>     author = {{R Core Team}},\n#>     organization = {R Foundation for Statistical Computing},\n#>     address = {Vienna, Austria},\n#>     year = {2022},\n#>     url = {https://www.R-project.org/},\n#>   }\n#> \n#> We have invested a lot of time and effort in creating R,\n#> please cite it when using it for data analysis. See also\n#> 'citation(\"pkgname\")' for citing R packages.\ncitation(\"lubridate\")\n#> \n#> To cite lubridate in publications use:\n#> \n#>   Garrett Grolemund, Hadley Wickham (2011). Dates and Times\n#>   Made Easy with lubridate. Journal of Statistical Software,\n#>   40(3), 1-25. URL https://www.jstatsoft.org/v40/i03/.\n#> \n#> A BibTeX entry for LaTeX users is\n#> \n#>   @Article{,\n#>     title = {Dates and Times Made Easy with {lubridate}},\n#>     author = {Garrett Grolemund and Hadley Wickham},\n#>     journal = {Journal of Statistical Software},\n#>     year = {2011},\n#>     volume = {40},\n#>     number = {3},\n#>     pages = {1--25},\n#>     url = {https://www.jstatsoft.org/v40/i03/},\n#>   }citHeader(\"To cite lubridate in publications use:\")\n\ncitEntry(entry = \"Article\",\n  title        = \"Dates and Times Made Easy with {lubridate}\",\n  author       = personList(as.person(\"Garrett Grolemund\"),\n                   as.person(\"Hadley Wickham\")),\n  journal      = \"Journal of Statistical Software\",\n  year         = \"2011\",\n  volume       = \"40\",\n  number       = \"3\",\n  pages        = \"1--25\",\n  url          = \"https://www.jstatsoft.org/v40/i03/\",\n\n  textVersion  =\n  paste(\"Garrett Grolemund, Hadley Wickham (2011).\",\n        \"Dates and Times Made Easy with lubridate.\",\n        \"Journal of Statistical Software, 40(3), 1-25.\",\n        \"URL https://www.jstatsoft.org/v40/i03/.\")\n)"},{"path":"misc.html","id":"inst-other-langs","chapter":"9 Other components","heading":"9.2.2 Other languages","text":"Sometimes package contains useful supplementary scripts programming languages.\nGenerally, avoid , adds additional extra dependency, may useful wrapping substantial amounts code another language.\nexample, gdata wraps Perl module Spreadsheet::ParseExcel read excel files R.convention put scripts nature subdirectory inst/, inst/python, inst/perl, inst/ruby etc.\nscripts essential package, make sure also add appropriate programming language SystemRequirements field DESCRIPTION.\n(field human reading don’t worry exactly specify .)Java special case best place learn documentation rJava package (http://www.rforge.net/rJava/).","code":""},{"path":"misc.html","id":"demo","chapter":"9 Other components","heading":"9.3 Demos","text":"demo .R file lives demo/.\nDemos like examples tend longer.\nInstead focussing single function, show weave together multiple functions solve problem.list access demos demo():Show available demos: demo().Show demos package: demo(package = \"httr\").Run specific demo: demo(\"oauth1-twitter\", package = \"httr\").Find demo: system.file(\"demo\", \"oauth1-twitter.R\", package = \"httr\").demo must listed demo/00Index following form: demo-name   Demo description.\ndemo name name file without extension, e.g. demo/-demo.R becomes -demo.default demo asks human input plot: “Hit  see next plot:”.\nbehaviour can overridden adding devAskNewPage(ask = FALSE) demo file.\ncan add pauses adding: readline(\"press key continue\").Generally, recommend using demos.\nInstead, consider writing vignette:Demos automatically tested R CMD check.\nmeans can easily break without knowledge.Demos automatically tested R CMD check.\nmeans can easily break without knowledge.Vignettes input output, readers can see results without run code .Vignettes input output, readers can see results without run code .Longer demos need mingle code explanation, RMarkdown better suited task R comments.Longer demos need mingle code explanation, RMarkdown better suited task R comments.Vignettes listed CRAN package page.\nmakes easier new users discover .Vignettes listed CRAN package page.\nmakes easier new users discover .","code":""},{"path":"description-and-namespace.html","id":"description-and-namespace","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10 DESCRIPTION and NAMESPACE","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"description-and-namespace.html","id":"introduction-7","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.1 Introduction","text":"two important files provide metadata package DESCRIPTION NAMESPACE.\nDESCRIPTION provides overall metadata package, NAMESPACE describes functions use packages expose world.\nchapter, ’ll learn basic structure files simple applications: like name title package wrote .’ll continue next chapters explain:Licensing big enough topic dedicated chapter (Chapter 12).\nplans share package, may able ignore licensing.\nplan share, even putting code others can see , really specify license.Licensing big enough topic dedicated chapter (Chapter 12).\nplans share package, may able ignore licensing.\nplan share, even putting code others can see , really specify license.License field defines can use package.License field defines can use package.dependencies package, whichThe dependencies package, ","code":""},{"path":"description-and-namespace.html","id":"description","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.2 DESCRIPTION","text":"job DESCRIPTION file store important metadata package.\nfirst start writing packages, ’ll mostly use metadata record packages needed run package.\nHowever, time goes , aspects metadata file become useful , revealing package (via Title Description) contact (!) problems.Every package must DESCRIPTION.\nfact, ’s defining feature package (RStudio devtools consider directory containing DESCRIPTION package)17.\nget started, usethis::create_package(\"mypackage\") automatically adds bare-bones DESCRIPTION file.\nallow start writing package without worry metadata need .\nminimal DESCRIPTION vary bit depending settings, look something like :create lot packages, can customize default content new DESCRIPTION files setting global option usethis.description named list.\ncan pre-configure preferred name, email, license, etc.\nSee article usethis setup details.DESCRIPTION uses simple file format called DCF, Debian control format.\ncan see structure examples chapter.\nline consists field name value, separated colon.\nvalues span multiple lines, need indented:ever need work DESCRIPTION file programmatically, take look desc package, usethis uses heavily --hood.chapter show use straightforeward DESCRIPTION fields.","code":"Package: mypackage\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.0Description: The description of a package is usually long,\n    spanning multiple lines. The second and subsequent lines\n    should be indented, usually with four spaces."},{"path":"description-and-namespace.html","id":"description-title-description","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.3 Title and description: What does your package do?","text":"title description fields describe package .\ndiffer length:Title one line description package, often shown package listing. plain text (markup), capitalised like title, end period. Keep short: listings often truncate title 65 characters.Description detailed title. can use multiple sentences, limited one paragraph. description spans multiple lines (!), line must 80 characters wide. Indent subsequent lines 4 spaces.Title Description ggplot2 :good title description important, especially plan release package CRAN, appear CRAN download page follows:\nFIGURE 10.1: CRAN page ggplot2, highlighting Title Description.\nplan submit package CRAN, Title Description frequent source rejections reasons covered automated R CMD check.\naddition basics , tips:Put names R packages, software, APIs inside single quotes. goes Title Description. See ggplot2 example .need use acronym, try Description, Title. either case, explain acronym Description, .e. fully expand .Don’t include package name, especially Title, often prefixed package name.start “package …” “package …”. rule makes sense look list CRAN packages name. information density listing much higher without universal prefix like “package …”.constraints give writer’s block, often helps spend minutes reading Title Description packages already CRAN.\nread couple dozen, can usually find way say want say package also likely pass CRAN’s human-enforced checks.’ll notice Description gives small amount space describe package .\n’s important also include README.md file goes much depth shows examples.\n’ll learn section 18.2.","code":"Title: Create Elegant Data Visualisations Using the Grammar of Graphics\nDescription: A system for 'declaratively' creating graphics,\n    based on \"The Grammar of Graphics\". You provide the data, tell 'ggplot2'\n    how to map variables to aesthetics, what graphical primitives to use,\n    and it takes care of the details."},{"path":"description-and-namespace.html","id":"description-authors","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.3.1 Author: who are you?","text":"identify package’s author, contact something goes wrong, use Authors@R field.\nfield unusual contains executable R code rather plain text.\n’s example:command says Hadley Wickham maintainer (cre) author (aut) email address hadley@rstudio.com.\nperson() function four main inputs:name, specified first two arguments, given family (normally supplied position, name).\nEnglish cultures, given (first name) comes family (last name).\nmany cultures, convention hold.\nnon-person entity, “R Core Team” “RStudio”, use given argument (omit family).name, specified first two arguments, given family (normally supplied position, name).\nEnglish cultures, given (first name) comes family (last name).\nmany cultures, convention hold.\nnon-person entity, “R Core Team” “RStudio”, use given argument (omit family).email address.\n’s important note address CRAN uses let know package needs fixed order stay CRAN.\nMake sure use email address ’s likely around .\nCRAN policy requires person, opposed , e.g., mailing list.email address.\n’s important note address CRAN uses let know package needs fixed order stay CRAN.\nMake sure use email address ’s likely around .\nCRAN policy requires person, opposed , e.g., mailing list.One three letter codes specifying role.\nimportant roles know :\ncre: creator maintainer, person bother problems.\nDespite short “creator”, correct role use current maintainer, even initial creator package.\naut: authors, made significant contributions package.\nctb: contributors, made smaller contributions, like patches.\ncph: copyright holder.\nused copyright held someone author, typically company (.e. author’s employer).\nfnd: funder, people organizations provided financial support development package.\n(full list roles extremely comprehensive. package woodcutter (wdc), lyricist (lyr) costume designer (cst), rest comfortably can correctly describe role creating package.\nHowever, note packages destined CRAN must limit subset MARC roles listed documentation person().)One three letter codes specifying role.\nimportant roles know :cre: creator maintainer, person bother problems.\nDespite short “creator”, correct role use current maintainer, even initial creator package.cre: creator maintainer, person bother problems.\nDespite short “creator”, correct role use current maintainer, even initial creator package.aut: authors, made significant contributions package.aut: authors, made significant contributions package.ctb: contributors, made smaller contributions, like patches.ctb: contributors, made smaller contributions, like patches.cph: copyright holder.\nused copyright held someone author, typically company (.e. author’s employer).cph: copyright holder.\nused copyright held someone author, typically company (.e. author’s employer).fnd: funder, people organizations provided financial support development package.fnd: funder, people organizations provided financial support development package.(full list roles extremely comprehensive. package woodcutter (wdc), lyricist (lyr) costume designer (cst), rest comfortably can correctly describe role creating package.\nHowever, note packages destined CRAN must limit subset MARC roles listed documentation person().)optional comment argument become relevant, since person() CRAN landing pages gained nice features around ORCID identifiers.\n’s example usage (note auto-generated URI):\n\nperson(\n  \"Jennifer\", \"Bryan\",\n  email = \"jenny@rstudio.com\",\n  role = c(\"aut\", \"cre\"),\n  comment = c(ORCID = \"0000-0002-6983-2759\")\n)\n#> [1] \"Jennifer Bryan <jenny@rstudio.com> [aut, cre] (<https://orcid.org/0000-0002-6983-2759>)\"optional comment argument become relevant, since person() CRAN landing pages gained nice features around ORCID identifiers.\n’s example usage (note auto-generated URI):can list multiple authors c():Every package must least one author (aut) one maintainer (cre) (might person).\nmaintainer (cre) must email address.\nfields used generate basic citation package (e.g. citation(\"pkgname\")).\npeople listed authors included auto-generated citation.\nextra details ’re including code people written, can learn Section ??.older, still valid approach separate Maintainer Author fields DESCRIPTION.\nHowever, strongly recommend modern approach Authors@R person() function, offers richer metadata various downstream uses.","code":"Authors@R: person(\"Hadley\", \"Wickham\", email = \"hadley@rstudio.com\",\n  role = c(\"aut\", \"cre\"))\nperson(\"Hadley\", \"Wickham\", email = \"hadley@rstudio.com\", \n  role = c(\"aut\", \"cre\"))\n#> [1] \"Hadley Wickham <hadley@rstudio.com> [aut, cre]\"\nperson(\n  \"Jennifer\", \"Bryan\",\n  email = \"jenny@rstudio.com\",\n  role = c(\"aut\", \"cre\"),\n  comment = c(ORCID = \"0000-0002-6983-2759\")\n)\n#> [1] \"Jennifer Bryan <jenny@rstudio.com> [aut, cre] (<https://orcid.org/0000-0002-6983-2759>)\"Authors@R: c(\n    person(\"Hadley\", \"Wickham\", email = \"hadley@rstudio.com\", role = \"cre\"),\n    person(\"Winston\", \"Chang\", email = \"winston@rstudio.com\", role = \"aut\"),\n    person(\"RStudio\", role = c(\"cph\", \"fnd\")))"},{"path":"description-and-namespace.html","id":"url-and-bugreports","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.3.2 Url and BugReports","text":"well maintainer’s email address, ’s good idea list places people can learn package.\nURL field commonly used advertise package’s website link public source repository, development happens.\nMultiple URLs separated comma.\nBugReports URL bug reports submitted, e.g., GitHub issues.\nexample, devtools :use usethis::use_github() connect local package remote GitHub repository, automatically populate URL BugReports .\npackage already connected remote GitHub repository, usethis::use_github_links() can called just add relevant links DESCRIPTION.","code":"URL: https://devtools.r-lib.org/, https://github.com/r-lib/devtools\nBugReports: https://github.com/r-lib/devtools/issues"},{"path":"description-and-namespace.html","id":"description-other-fields","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.3.3 Other fields","text":"DESCRIPTION fields heavily used worth knowing :Encoding describes character encoding files throughout package.\npackage development workflow always assumes set Encoding: UTF-8 now commonly used text encoding, aware reasons use different value.Encoding describes character encoding files throughout package.\npackage development workflow always assumes set Encoding: UTF-8 now commonly used text encoding, aware reasons use different value.Collate controls order R files sourced.\nmatters code side-effects; commonly ’re using S4.Collate controls order R files sourced.\nmatters code side-effects; commonly ’re using S4.Version really important way communicating package lifecycle evolving time.\nLearn Chapter 23.Version really important way communicating package lifecycle evolving time.\nLearn Chapter 23.LazyData relevant package makes data available user.\nspecify LazyData: true, datasets lazy-loaded, makes immediately available, .e. users don’t use data().\naddition LazyData: true handled automatically usethis::use_data().\ndetail given talk external data Chapter 8.LazyData relevant package makes data available user.\nspecify LazyData: true, datasets lazy-loaded, makes immediately available, .e. users don’t use data().\naddition LazyData: true handled automatically usethis::use_data().\ndetail given talk external data Chapter 8.actually many rarely, ever, used fields.\ncomplete list can found “DESCRIPTION file” section R extensions manual.","code":""},{"path":"description-and-namespace.html","id":"custom-fields","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.3.4 Custom fields","text":"also flexibility create fields add additional metadata.\nnarrowest sense, restriction shouldn’t re-purpose official field names used R.\npractice, plan submit CRAN, constraints.\nFirst, use valid English words, field names aren’t flagged spell-check.\nBeyond , custom fields follow one two patterns:Config/ prefix: featured example earlier, Config/Needs/website used record additional packages needed build package’s website.Note suffix: can add Note standard field name, e.g., SuggestsNote. also permitted use Note, alone, field name.default, create_package() writes two fields haven’t discussed yet, relating use roxygen2 package documentation:learn Chapter 16.","code":"Roxygen: list(markdown = TRUE)\nRoxygenNote: 7.1.2"},{"path":"description-and-namespace.html","id":"namespace-NAMESPACE","chapter":"10 DESCRIPTION and NAMESPACE","heading":"10.4 The NAMESPACE file","text":"following code excerpt NAMESPACE file testthat package.can see NAMESPACE file looks bit like R code.\nline contains directive: S3method(), export(), exportClasses(), .\ndirective describes R object, says whether ’s exported package used others, ’s imported another package used locally.total, eight namespace directives.\nFour describe exports:export(): export functions (including S3 S4 generics).exportPattern(): export functions match pattern.exportClasses(), exportMethods(): export S4 classes methods.S3method(): export S3 methods.four describe imports:import(): import functions package.importFrom(): import selected functions (including S4 generics).importClassesFrom(), importMethodsFrom(): import S4 classes methods.don’t recommend writing directives hand.\nInstead, chapter ’ll learn generate NAMESPACE file roxygen2.\nthree main advantages using roxygen2:Namespace definitions live next associated function, read code ’s easier see ’s imported exported.Namespace definitions live next associated function, read code ’s easier see ’s imported exported.Roxygen2 abstracts away details NAMESPACE.\nneed learn one tag, @export, automatically generate right directive functions, S3 methods, S4 methods S4 classes.Roxygen2 abstracts away details NAMESPACE.\nneed learn one tag, @export, automatically generate right directive functions, S3 methods, S4 methods S4 classes.Roxygen2 makes NAMESPACE tidy.\nmatter many times use @importFrom foo bar ’ll get one importFrom(foo, bar) NAMESPACE.\nmakes easy attach import directives every function need , rather trying manage one central place.Roxygen2 makes NAMESPACE tidy.\nmatter many times use @importFrom foo bar ’ll get one importFrom(foo, bar) NAMESPACE.\nmakes easy attach import directives every function need , rather trying manage one central place.Note can choose use roxygen2 generate just NAMESPACE, just man/*.Rd, .\ndon’t use namespace related tags, roxygen2 won’t touch NAMESPACE.\ndon’t use documentation related tags, roxygen2 won’t touch man/.","code":"# Generated by roxygen2 (4.0.2): do not edit by hand\nS3method(as.character,expectation)\nS3method(compare,character)\nexport(auto_test)\nexport(auto_test_package)\nexport(colourise)\nexport(context)\nexportClasses(ListReporter)\nexportClasses(MinimalReporter)\nimportFrom(methods,setRefClass)\nuseDynLib(testthat,duplicate_)\nuseDynLib(testthat,reassign_function)"},{"path":"description-dependencies.html","id":"description-dependencies","chapter":"11 Dependencies: What does your package need?","heading":"11 Dependencies: What does your package need?","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"description-dependencies.html","id":"introduction-8","chapter":"11 Dependencies: What does your package need?","heading":"11.1 Introduction","text":"dependency code package needs run.\nDependencies managed two files.\nDESCRIPTION manages dependencies package level; .e. packages needs installed package work.\nR rich set ways describe different types dependencies.\nkey point whether dependency needed regular users needed development tasks optional functionality.flip-side package also dependency people’s scripts packages.\njob NAMESPACE define functions make available others use.\npackage namespace (recorded NAMESPACE file) one confusing parts building package.\n’s fairly advanced topic, --large, important ’re developing packages .\nHowever, understanding namespaces vital plan submit package CRAN.\nCRAN requires package plays nicely packages.\nfirst start using namespaces, ’ll seem like lot work little gain.\nHowever, high quality namespace helps encapsulate package makes self-contained.\nensures packages won’t interfere code, code won’t interfere packages, package works regardless environment ’s run.","code":""},{"path":"description-dependencies.html","id":"run-time-vs-develop-time-dependencies","chapter":"11 Dependencies: What does your package need?","heading":"11.2 Run-time vs develop-time dependencies","text":"Packages listed Imports needed users runtime.\nfollowing lines indicate package absolutely needs dplyr tidyr work.Packages listed Suggests either needed development tasks might unlock optional functionality users.\nlines indicate , package can take advantage ggplot2 testthat, ’re absolutely required:example, withr package useful writing tests clean .\nusage compatible listing withr Suggests, since regular users don’t need run tests.\nsometimes package might also use withr functions, perhaps offer with_*() local_*() functions.\ncase, withr listed Imports.Imports Suggests take comma-separated list package names.\nrecommend putting one package line, keeping alphabetical order.\nnon-haphazard order makes easier humans parse field appreciate changes.\neasiest way add package Imports Suggests usethis::use_package().\ndependencies already alphabetical order, use_package() keep way.\ngeneral, can nice run usethis::use_tidy_description() regularly, orders formats DESCRIPTION fields according fixed standard.Imports Suggests differ strength nature dependency:Imports: packages listed must present package work.\ntime package installed, packages also installed, already present.\ndevtools::load_all() also checks packages Imports installed.\nAdding package Imports ensures installed, mean attached along package, .e. equivalent library(otherpkg)18.\nInside package, best practice explicitly refer external functions using syntax package::function(). makes easy identify functions live outside package.\nespecially useful read code future.\nuse lot functions another package, rather verbose.\n’s also minor performance penalty associated :: (order 5µs, matter call function millions times).\n’ll learn alternative ways make functions packages available inside package section 11.5.4.Imports: packages listed must present package work.\ntime package installed, packages also installed, already present.\ndevtools::load_all() also checks packages Imports installed.Adding package Imports ensures installed, mean attached along package, .e. equivalent library(otherpkg)18.\nInside package, best practice explicitly refer external functions using syntax package::function(). makes easy identify functions live outside package.\nespecially useful read code future.use lot functions another package, rather verbose.\n’s also minor performance penalty associated :: (order 5µs, matter call function millions times).\n’ll learn alternative ways make functions packages available inside package section 11.5.4.Suggests: package can use packages, doesn’t require .\nmight use suggested packages example datasets, run tests, build vignettes, maybe ’s one function needs package.\nPackages listed Suggests automatically installed along package.\nmeans can’t assume package available unconditionally.\nshow various ways handle checks.Suggests: package can use packages, doesn’t require .\nmight use suggested packages example datasets, run tests, build vignettes, maybe ’s one function needs package.Packages listed Suggests automatically installed along package.\nmeans can’t assume package available unconditionally.\nshow various ways handle checks.add packages DESCRIPTION usethis::use_package(), also remind recommended way call .","code":"Imports:\n    dplyr,\n    tidyrSuggests:\n    ggplot2,\n    testthat\nusethis::use_package(\"dplyr\") # Default is \"Imports\"\n#> ✔ Adding 'dplyr' to Imports field in DESCRIPTION\n#> • Refer to functions with `dplyr::fun()`\n\nusethis::use_package(\"ggplot2\", \"Suggests\")\n#> ✔ Adding 'ggplot2' to Suggests field in DESCRIPTION\n#> • Use `requireNamespace(\"ggplot2\", quietly = TRUE)` to test if package is installed\n#> • Then directly refer to functions with `ggplot2::fun()`"},{"path":"description-dependencies.html","id":"guarding-the-use-of-a-suggested-package","chapter":"11 Dependencies: What does your package need?","heading":"11.2.1 Guarding the use of a suggested package","text":"Inside function package, check availability suggested package requireNamespace(\"pkg\", quietly = TRUE).\ntwo basic scenarios:rlang package useful functions checking package availability.\n’s checks around suggested package look use rlang:rlang functions handy features programming, vectorization pkg, classed errors data payload, , check_installed(), offer install needed package interactive session.Suggests isn’t terribly relevant packages user base approximately equal development team packages used predictable context.\ncase, ’s reasonable just use Imports everything.\nUsing Suggests mostly courtesy external users accommodate lean installations.\ncan free users downloading rarely needed packages (especially tricky install) lets get started package quickly possible.Another common place use suggested package example often guard require() (’ll also see requireNamespace() used ).\nexample ggplot2::coord_map().example basically place use require() inside package.Another place might use suggested package vignette.\ntidyverse team generally writes vignettes suggested packages available.\nchoose use suggested packages conditionally vignettes, knitr chunk options purl eval may useful achieving .\nSee Chapter 17 discussion vignettes.","code":"\n# the suggested package is required \nmy_fun <- function(a, b) {\n  if (!requireNamespace(\"pkg\", quietly = TRUE)) {\n    stop(\n      \"Package \\\"pkg\\\" must be installed to use this function.\",\n      call. = FALSE\n    )\n  }\n  # code that includes calls such as pkg::f()\n}\n\n# the suggested package is optional; a fallback method is available\nmy_fun <- function(a, b) {\n  if (requireNamespace(\"pkg\", quietly = TRUE)) {\n    pkg::f()\n  } else {\n    g()\n  }\n}\n# the suggested package is required \nmy_fun <- function(a, b) {\n  rlang::check_installed(\"pkg\", reason = \"to use `my_fun()`\")\n  # code that includes calls such as pkg::f()\n}\n\n# the suggested package is optional; a fallback method is available\nmy_fun <- function(a, b) {\n  if (rlang::is_installed(\"pkg\")) {\n    pkg::f()\n  } else {\n    g()\n  }\n}\n#' @examples\n#' if (require(\"maps\")) {\n#'   nz <- map_data(\"nz\")\n#'   # Prepare a map of NZ\n#'   nzmap <- ggplot(nz, aes(x = long, y = lat, group = group)) +\n#'     geom_polygon(fill = \"white\", colour = \"black\")\n#'  \n#'   # Plot it in cartesian coordinates\n#'   nzmap\n#' }"},{"path":"description-dependencies.html","id":"suggested-packages-and-tests","chapter":"11 Dependencies: What does your package need?","heading":"11.2.1.1 Whether and how to guard in a test","text":"vignettes, tidyverse team usually guard use suggested package test.\ngeneral, vignettes tests, assume suggested packages available.\nmotivation posture self-consistency pragmatism.\nkey packages needed run tests build vignettes (e.g. testthat knitr) appear Suggests, Imports Depends.\nTherefore, tests actually executing vignettes built, implies expansive notion package dependencies applied.\nAlso, empirically, every important scenario running R CMD check, suggested packages installed.\ngenerally true CRAN ensure ’s true automated checks.\nHowever, ’s important note package maintainers take different stance choose protect usage suggested packages tests vignettes.Sometimes even tidyverse team makes exception guards use suggested package test.\n’s test ggplot2, uses testthat::skip_if_not_installed() skip execution suggested sf package available.might justify use skip_if_not_installed()?\ncase, sf package can nontrivial install conceivable contributor want run remaining tests, even sf available.Finally, note testthat::skip_if_not_installed(pkg, minimum_version = \"x.y.z\") can used conditionally skip test based version package.","code":"\ntest_that(\"basic plot builds without error\", {\n  skip_if_not_installed(\"sf\")\n\n  nc_tiny_coords <- matrix(\n    c(-81.473, -81.741, -81.67, -81.345, -81.266, -81.24, -81.473,\n      36.234, 36.392, 36.59, 36.573, 36.437, 36.365, 36.234),\n    ncol = 2\n  )\n\n  nc <- sf::st_as_sf(\n    data_frame(\n      NAME = \"ashe\",\n      geometry = sf::st_sfc(sf::st_polygon(list(nc_tiny_coords)), crs = 4326)\n    )\n  )\n\n  expect_doppelganger(\"sf-polygons\", ggplot(nc) + geom_sf() + coord_sf())\n})"},{"path":"description-dependencies.html","id":"minimum-versions","chapter":"11 Dependencies: What does your package need?","heading":"11.2.2 Minimum versions","text":"need specific version package, specify parentheses package name:always want specify minimum version (dplyr (>= 1.0.0)) rather exact version (dplyr (== 1.0.0)).\nSince R can’t multiple versions package loaded time, specifying exact dependency dramatically increases chance conflicting versions19.Versioning important release package use others.\nUsually people don’t exactly versions packages installed .\nsomeone older package doesn’t function package needs, ’ll get unhelpful error message package advertise minimum version needs.\nHowever, state minimum version, ’ll learn problem clearly, probably time installing package.Think carefully declare minimum version dependency.\nsense, safest thing require version greater equal package’s current version.\npublic work, naturally defined current CRAN version package; private personal projects may adopt convention.\n’s important appreciate implications people try install package: local installation doesn’t fulfill requirements around versions, installation either fail force upgrades dependencies.\ndesirable minimum version requirements genuine, .e. package broken otherwise.\nstated requirements less solid rationale, may unnecessarily conservative inconvenient.absence clear, hard requirements, set minimum versions () based expected user base, package versions likely , cost-benefit analysis lax versus conservative.\nde facto policy tidyverse team specify minimum version using known new feature someone encounters version problem authentic use.\nisn’t perfect, don’t currently tooling better, seems work fairly well practice.","code":"Imports:\n    dplyr (>= 1.0.0),\n    tidyr (>= 1.1.0)"},{"path":"description-dependencies.html","id":"other-dependencies","chapter":"11 Dependencies: What does your package need?","heading":"11.2.3 Other dependencies","text":"three fields allow express specialised dependencies:Depends: Prior roll-namespaces R 2.14.0 2011, Depends way “depend” another package.\nNow, despite name, almost always use Imports, Depends.\n’ll learn , still use Depends, namespaces.\ncan also use Depends state minimum version R , e.g.\nDepends: R (>= 4.0.0).\n, think carefully .\nraises issues setting minimum version package depend , except stakes much higher comes R .\nUsers can’t simply consent necessary upgrade, , packages depend , minimum version requirement R can cause cascade package installation failures.\nbackports package useful want use function like tools::R_user_dir(), introduced 4.0.0 2020, still supporting older R versions.\ntidyverse packages officially support current R version, devel version, four previous versions. proactively test support standard build matrix use continuous integration.\nPackages lower level use may need level rigour. main takeaway : state minimum R, reason take reasonable measures test claim regularly.\nDepends: Prior roll-namespaces R 2.14.0 2011, Depends way “depend” another package.\nNow, despite name, almost always use Imports, Depends.\n’ll learn , still use Depends, namespaces.can also use Depends state minimum version R , e.g.\nDepends: R (>= 4.0.0).\n, think carefully .\nraises issues setting minimum version package depend , except stakes much higher comes R .\nUsers can’t simply consent necessary upgrade, , packages depend , minimum version requirement R can cause cascade package installation failures.backports package useful want use function like tools::R_user_dir(), introduced 4.0.0 2020, still supporting older R versions.tidyverse packages officially support current R version, devel version, four previous versions. proactively test support standard build matrix use continuous integration.Packages lower level use may need level rigour. main takeaway : state minimum R, reason take reasonable measures test claim regularly.LinkingTo: package uses C C++ code another package, need list .LinkingTo: package uses C C++ code another package, need list .Enhances: packages listed “enhanced” package.\nTypically, means provide methods classes defined another package (sort reverse Suggests).\n’s hard define means, don’t recommend using Enhances.Enhances: packages listed “enhanced” package.\nTypically, means provide methods classes defined another package (sort reverse Suggests).\n’s hard define means, don’t recommend using Enhances.can also list things package needs outside R SystemRequirements field.\njust plain text field automatically checked.\nThink quick reference; ’ll also need include detailed system requirements (install ) README.","code":""},{"path":"description-dependencies.html","id":"an-r-version-gotcha","chapter":"11 Dependencies: What does your package need?","heading":"11.2.3.1 An R version gotcha","text":"leave topic, give concrete example easily R version dependency can creep broader impact might expect.\nsaveRDS() function writes single R object .rds file, R-specific format.\nalmost 20 years, .rds files used “version 2” serialization format.\n“Version 3” became new default R 3.6.0 (released April 2019) read R versions prior 3.5.0 (released April 2018).Many R packages least one .rds file lurking within , gets re-generated modern R version, default, new .rds file “version 3” format.\nR package next built, CRAN submission, required R version automatically bumped 3.5.0, signaled message:Literally, DESCRIPTION file bundled package says Depends: R (>= 3.5.0), even DESCRIPTION source package says differently20.package released CRAN, new minimum R version viral, sense packages listing original package Imports even Suggests , varying degrees, inherited new dependency R >= 3.5.0.immediate take-away deliberate version .rds files R versions prior 3.5.0 fallen edge intend support.\nparticular .rds issue won’t us forever, similar issues crop elsewhere, standards implicit compiled C C++ source code.\nbroader message reverse dependencies package , thought need give package’s stated minimum versions, especially R .","code":"NB: this package now depends on R (>= 3.5.0)\n  WARNING: Added dependency on R >= 3.5.0 because serialized objects in\n  serialize/load version 3 cannot be read in older versions of R.\n  File(s) containing such objects:\n    'path/to/some_file.rds'"},{"path":"description-dependencies.html","id":"nonstandard-dependencies","chapter":"11 Dependencies: What does your package need?","heading":"11.2.4 Nonstandard dependencies","text":"packages developed devtools, may see DESCRIPTION files use couple nonstandard fields package dependencies specific development tasks.Remotes field can used need install dependency nonstandard place, .e. somewhere besides CRAN Bioconductor.\nOne common example ’re developing development version one dependencies.\ntime, ’ll want install dependency development repository, often GitHub.\nway specify various remote sources described devtools vignette.dependency minimum version requirement still need declared normal way , e.g., Imports.\nusethis::use_dev_package() helps make necessary changes DESCRIPTION.\npackage temporarily relies development version usethis, affected DESCRIPTION fields might evolve like :’s important note submit package CRAN intermediate state, meaning Remotes field dependency required version ’s available CRAN Bioconductor.\nCRAN packages, can temporary development state, eventually resolved dependency updates CRAN can bump minimum version accordingly.may also see devtools-developed packages packages listed DESCRIPTION fields form Config/Needs/*.\npattern takes advantage fact fields prefixed Config/ ignored CRAN also trigger NOTE “Unknown, possibly mis-spelled, fields DESCRIPTION”.use Config/Needs/* directly related devtools.\n’s accurate say ’s associated continuous integration workflows made available community https://github.com/r-lib/actions/ exposed via functions usethis::use_github_actions().\nConfig/Needs/* field tells setup-r-dependencies GitHub Action extra packages need installed.Config/Needs/website common provides place specify packages aren’t formal dependency, must present order build package’s website.\nleft example might appear DESCRIPTION package uses various tidyverse packages non-vignette articles website, also formatted styling lives tidyverse/template GitHub repo.\nright corresponding excerpt configuration workflow builds deploys website.Continuous integration package websites discussed ??\n??,\nrespectively.\nchapters yet---(re)written task 2nd edition.Config/Needs/* convention handy allows developer use DESCRIPTION definitive record package dependencies, maintaining clean distinction true runtime dependencies versus needed specialized development tasks.","code":"Stable -->               Dev -->                       Stable again\n----------------------   ---------------------------   ----------------------\nPackage: yourpkg         Package: yourpkg              Package: yourpkg\nVersion: 1.0.0           Version: 1.0.0.9000           Version: 1.1.0\nImports:                 Imports:                      Imports: \n    usethis (>= 2.1.3)       usethis (>= 2.1.3.9000)       usethis (>= 2.2.0)\n                         Remotes:   \n                             r-lib/usethis in DESCRIPTION                  in .github/workflows/pkgdown.yaml\n--------------------------      ---------------------------------\nConfig/Needs/website:           - uses: r-lib/actions/setup-r-dependencies@v1\n    tidyverse,                    with:\n    tidyverse/tidytemplate          extra-packages: pkgdown\n                                    needs: website"},{"path":"description-dependencies.html","id":"exports","chapter":"11 Dependencies: What does your package need?","heading":"11.3 Exports","text":"function usable outside package, must export .\ncreate new package usethis::create_package(), starts exporting nothing.\ncan still experiment interactively load_all() (since loads functions, just exported), install package reload RStudio ’ll notice functions available.export object, put @export roxygen block.\nexample:generate export(), exportMethods(), exportClass() S3method() depending type object.export functions want people use.\nExported functions must documented, must cautious changing interface — people using !\nGenerally, ’s better export little much.\n’s easy export things didn’t ; ’s hard stop exporting function might break existing code.\nAlways err side caution, simplicity.\n’s easier give people functionality take away stuff ’re used .believe packages wide audience strive one thing well.\nfunctions package related single problem (set closely related problems).\nfunctions related purpose exported.\nexample, packages utils.R file contains many small functions useful , aren’t part core purpose packages.\nnever export functions.said, ’re creating package , ’s far less important disciplined.\nknow ’s package, ’s fine local “misc” package contains passel functions find useful.\ndon’t think release package.following sections describe export ’re using S3, S4 RC.","code":"\n#' @export\nfoo <- function(x, y, z) {\n  ...\n}\n# Defaults for NULL values\n`%||%` <- function(a, b) if (is.null(a)) b else a\n\n# Remove NULLs from a list\ncompact <- function(x) {\n  x[!vapply(x, is.null, logical(1))]\n}"},{"path":"description-dependencies.html","id":"when-should-you-take-a-dependency","chapter":"11 Dependencies: What does your package need?","heading":"11.4 When should you take a dependency?","text":"https://www.tidyverse.org/blog/2019/05/itdepends/","code":""},{"path":"description-dependencies.html","id":"tidyverse-dependencies","chapter":"11 Dependencies: What does your package need?","heading":"11.4.1 Tidyverse dependencies","text":"’s policies role different packages.\nuse_tidy_dependencies().\n“Free” dependencies.","code":""},{"path":"description-dependencies.html","id":"namespace","chapter":"11 Dependencies: What does your package need?","heading":"11.5 Namespace","text":"","code":""},{"path":"description-dependencies.html","id":"namespace-motivation","chapter":"11 Dependencies: What does your package need?","heading":"11.5.1 Motivation","text":"name suggests, namespaces provide “spaces” “names”.\nprovide context looking value object associated name.Without knowing , ’ve probably already used namespaces.\nexample, ever used :: operator?\ndisambiguates functions name.\nexample, plyr Hmisc provide summarize() function.\nload plyr, Hmisc, summarize() refer Hmisc version.\nload packages opposite order, summarize() refer plyr version.\ncan confusing.\nInstead, can explicitly refer specific functions: Hmisc::summarize() plyr::summarize().\norder packages loaded won’t matter.Namespaces make packages self-contained two ways: imports exports.\nimports defines function one package finds function another.\nillustrate, consider happens someone changes definition function rely : example, simple nrow() function base R:’s defined terms dim().\nhappen override dim() definition?\nnrow() break?Surprisingly, !\n’s nrow() looks object called dim(), uses package namespace, finds dim() base environment, dim() created global environment.exports helps avoid conflicts packages specifying functions available outside package (internal functions available within package can’t easily used another package).\nGenerally, want export minimal set functions; fewer export, smaller chance conflict.\nconflicts aren’t end world can always use :: disambiguate, ’re best avoided possible makes lives users easier.","code":"\nnrow\n#> function (x) \n#> dim(x)[1L]\n#> <bytecode: 0x5650ad87fd10>\n#> <environment: namespace:base>\ndim <- function(x) c(1, 1)\ndim(mtcars)\n#> [1] 1 1\nnrow(mtcars)\n#> [1] 32"},{"path":"description-dependencies.html","id":"search-path","chapter":"11 Dependencies: What does your package need?","heading":"11.5.2 Search path","text":"understand namespaces important, need solid understanding search paths.\ncall function, R first find .\nR first looking global environment.\nR doesn’t find , looks search path, list packages attached.\ncan see list running search().\nexample, ’s search path code book:’s important difference loading attaching package.\nNormally talk loading package think library(), actually attaches package.package installed,Loading load code, data DLLs; register S3 S4 methods; run .onLoad() function.\nloading, package available memory, ’s search path, won’t able access components without using ::.\nConfusingly, :: also load package automatically isn’t already loaded.\n’s rare load package explicitly, can requireNamespace() loadNamespace().Loading load code, data DLLs; register S3 S4 methods; run .onLoad() function.\nloading, package available memory, ’s search path, won’t able access components without using ::.\nConfusingly, :: also load package automatically isn’t already loaded.\n’s rare load package explicitly, can requireNamespace() loadNamespace().Attaching puts package search path.\ncan’t attach package without first loading , library() require() load attach package.\ncan see currently attached packages search().Attaching puts package search path.\ncan’t attach package without first loading , library() require() load attach package.\ncan see currently attached packages search().package isn’t installed, loading (hence attaching) fail error.see differences clearly, consider two ways running expect_that() testthat package.\nuse library(), testthat attached search path.\nuse ::, ’s .four functions make package available.\ndiffer based whether load attach, happens package found (.e., throws error returns FALSE).four, ever use two:Use library(x) data analysis scripts.\nthrow error package installed, terminate script.\nwant attach package save typing.\nNever use library() package.Use library(x) data analysis scripts.\nthrow error package installed, terminate script.\nwant attach package save typing.\nNever use library() package.Use requireNamespace(\"x\", quietly = TRUE) inside package want specific action (e.g. throw error) depending whether suggested package installed.Use requireNamespace(\"x\", quietly = TRUE) inside package want specific action (e.g. throw error) depending whether suggested package installed.never need use require() (requireNamespace() almost always better), loadNamespace() (needed internal R code).\nnever use require() library() package: instead, use Depends Imports fields DESCRIPTION.Now’s good time come back important issue glossed earlier.\n’s difference Depends Imports DESCRIPTION?\nuse one ?Listing package either Depends Imports ensures ’s installed needed.\nmain difference Imports just loads package, Depends attaches .\ndifferences.\nrest advice chapter applies whether package Depends Imports.Unless good reason otherwise, always list packages Imports Depends.\n’s good package self-contained, minimises changes global environment (including search path).\nexception package designed used conjunction another package.\nexample, analogue package builds top vegan.\n’s useful without vegan, vegan Depends instead Imports.\nSimilarly, ggplot2 really Depend scales, rather Importing .Now understand importance namespace, let’s dive nitty gritty details.\ntwo sides package namespace, imports exports, described NAMESPACE.\n’ll learn file looks like next section.\nsection , ’ll learn details exporting importing functions objects.","code":"\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n#> [4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"         \"package:base\"\nold <- search()\ntestthat::expect_equal(1, 1)\nsetdiff(search(), old)\n#> character(0)\nexpect_true(TRUE)\n#> Error in expect_true(TRUE): could not find function \"expect_true\"\n    \nlibrary(testthat)\nexpect_equal(1, 1)\nsetdiff(search(), old)\n#> [1] \"package:testthat\"\nexpect_true(TRUE)"},{"path":"description-dependencies.html","id":"namespace-workflow","chapter":"11 Dependencies: What does your package need?","heading":"11.5.3 Workflow","text":"Generating namespace roxygen2 just like generating function documentation roxygen2.\nuse roxygen2 blocks (starting #') tags (starting @).\nworkflow :Add roxygen comments .R files.Add roxygen comments .R files.Run devtools::document() (press Ctrl/Cmd + Shift + D RStudio) convert roxygen comments .Rd files.Run devtools::document() (press Ctrl/Cmd + Shift + D RStudio) convert roxygen comments .Rd files.Look NAMESPACE run tests check specification correct.Look NAMESPACE run tests check specification correct.Rinse repeat correct functions exported.Rinse repeat correct functions exported.","code":""},{"path":"description-dependencies.html","id":"imports","chapter":"11 Dependencies: What does your package need?","heading":"11.5.4 Imports","text":"NAMESPACE also controls external functions can used package without use ::.’s confusing DESCRIPTION (Imports field) NAMESPACE (import directives) seem involved imports.\njust unfortunate choice names.\nImports field really nothing functions imported namespace: just makes sure package installed package .\ndoesn’t make functions available.\nneed import functions exactly way regardless whether package attached.Depends just convenience user: package attached, also attaches packages listed Depends.\npackage loaded, packages Depends loaded, attached, need qualify function names :: specifically import .’s common packages listed Imports DESCRIPTION, NAMESPACE.\nconverse true.\nEvery package mentioned NAMESPACE must also present Imports Depends fields.","code":""},{"path":"description-dependencies.html","id":"import-r","chapter":"11 Dependencies: What does your package need?","heading":"11.5.5 R functions","text":"using just functions another package, recommendation note package name Imports: field DESCRIPTION file call function(s) explicitly using ::, e.g., pkg::fun().using functions repeatedly, can avoid :: importing function @importFrom pkg fun.\nOperators can also imported similar manner, e.g., @importFrom magrittr %>%.Alternatively, repeatedly using many functions another package, can import using @import package.\nleast recommended solution makes code harder read (can’t tell function coming ), @import many packages, increases chance conflicting function names.","code":""},{"path":"license.html","id":"license","chapter":"12 Licensing","heading":"12 Licensing","text":"","code":""},{"path":"license.html","id":"introduction-9","chapter":"12 Licensing","heading":"12.1 Introduction","text":"goal chapter give basic tools manage licensing R package.\nSoftware licensing large complicated field, made particularly complex lies intersection programming law.\nFortunately, don’t need expert right thing: respecting author wants code treated indicated license ’ve picked.understand author’s wishes, ’s useful understand two major camps open source licenses:Permissive licenses easy going.\nCode permissive license can freely copied, modified, published, restriction license must preserved.\nMIT Apache licenses common modern permissive licenses; older permissive licenses include various forms BSD license.Permissive licenses easy going.\nCode permissive license can freely copied, modified, published, restriction license must preserved.\nMIT Apache licenses common modern permissive licenses; older permissive licenses include various forms BSD license.Copyleft licenses stricter.\ncommon copyleft license GPL allows freely copy modify code personal use, publish modified versions bundle code, modified version complete bundle must also licensed GPL.Copyleft licenses stricter.\ncommon copyleft license GPL allows freely copy modify code personal use, publish modified versions bundle code, modified version complete bundle must also licensed GPL.get high-level view open source licensing space, details individual licenses, highly recommend https://choosealicense.com, ’ve used links .look across programming languages, permissive licenses common.\nexample, 2015 survey GitHub repositories found ~55% used permissive license ~20% used copyleft license.\nR community little different: 2020, analysis (following Sean Kross’s blog post) found ~70% CRAN packages use copyleft license ~15% use permissive license.chapter start licensing code, cover important details receiving code people (e.g. PR) bundling people’s code package.\nNote simply using package R doesn’t require comply license; can write proprietary R code R packages can license choose.details licensing R packages, recommend Licensing R Colin Fay.(run code chapter, please make sure ’re using usethis 2.0.0 greater; writing chapter prompted number changes package.)","code":""},{"path":"license.html","id":"code-you-write","chapter":"12 Licensing","heading":"12.2 Code you write","text":"’ll start talking code write, license make clear want people treat .\nbrief:want permissive license people can use code minimal restrictions, choose MIT license use_mit_license().want permissive license people can use code minimal restrictions, choose MIT license use_mit_license().want copyleft license derivatives bundles code also open source, choose GPLv3 license use_gpl_license().want copyleft license derivatives bundles code also open source, choose GPLv3 license use_gpl_license().package primarily contains data, code, want minimal restrictions, choose CC0 license use_cc0_license().\nwant require attribution data used, choose CC license calling use_ccby_license().package primarily contains data, code, want minimal restrictions, choose CC0 license use_cc0_license().\nwant require attribution data used, choose CC license calling use_ccby_license().don’t want make code open source call use_proprietary_license().\npackages can distributed CRAN.don’t want make code open source call use_proprietary_license().\npackages can distributed CRAN.’ll come back details present licenses Section 12.3.2It’s important use license don’t default copyright laws apply mean one allowed make copy code without express permission.(possible license CRAN package non-open source license like ACM license don’t recommend .)","code":""},{"path":"license.html","id":"copyright-holder","chapter":"12 Licensing","heading":"12.3 Copyright holder","text":"go , ’s important introduce important term: copyright holder.\ncopyright holder (holders) people underlying copyright code, hence people allowed choose (later change) license.\nthree main cases21:wrote code time, ’re copyright holder.wrote code time, ’re copyright holder.wrote code employer, employer copyright holder.wrote code employer, employer copyright holder.wrote code contract work, ’re copyright holder unless contract specifically describes otherwise.wrote code contract work, ’re copyright holder unless contract specifically describes otherwise.means ’re writing package job, ’ll need get employer approve open source license use.\nemployers (particularly universities) standard policies don’t need ask permission every time; ’ll need investigate company’s policy .Note multiple people contributed package, multiple copyright holders: person company hold copyright specific contribution.\n’ll come back topic Section ??.","code":""},{"path":"license.html","id":"key-files","chapter":"12 Licensing","heading":"12.3.1 Key files","text":"three key files used record licensing decision:Every license sets License field DESCRIPTION.\ncontains name license standard form R CMD check CRAN can automatically verify .\ncomes four main forms:\nname version specification, e.g.\nGPL (>= 2), Apache License (= 2.0).\nstandard abbreviation, e.g.\nGPL-2, LGPL-2.1, Artistic-2.0.\nname license “template” file containing specific variables.\ncommon case MIT + file LICENSE, LICENSE file needs contain two fields: year copyright holder.\nPointer full text non-standard license, file LICENSE.\ncomplicated licensing structures possible outside scope text.\nSee Licensing section R-exts details.Every license sets License field DESCRIPTION.\ncontains name license standard form R CMD check CRAN can automatically verify .\ncomes four main forms:name version specification, e.g.\nGPL (>= 2), Apache License (= 2.0).name version specification, e.g.\nGPL (>= 2), Apache License (= 2.0).standard abbreviation, e.g.\nGPL-2, LGPL-2.1, Artistic-2.0.standard abbreviation, e.g.\nGPL-2, LGPL-2.1, Artistic-2.0.name license “template” file containing specific variables.\ncommon case MIT + file LICENSE, LICENSE file needs contain two fields: year copyright holder.name license “template” file containing specific variables.\ncommon case MIT + file LICENSE, LICENSE file needs contain two fields: year copyright holder.Pointer full text non-standard license, file LICENSE.Pointer full text non-standard license, file LICENSE.complicated licensing structures possible outside scope text.\nSee Licensing section R-exts details.described , LICENSE file used one two ways.\nlicenses templates require additional details complete LICENSE file.\nLICENSE file can also contain full text non-standard non-open source licenses.\npermitted include full text standard licenses.described , LICENSE file used one two ways.\nlicenses templates require additional details complete LICENSE file.\nLICENSE file can also contain full text non-standard non-open source licenses.\npermitted include full text standard licenses.LICENSE.md includes copy full text license.\nopen source licenses require copy license included, CRAN permit include copy standard licenses package, also use .Rbuildignore make sure file sent CRAN.LICENSE.md includes copy full text license.\nopen source licenses require copy license included, CRAN permit include copy standard licenses package, also use .Rbuildignore make sure file sent CRAN.one file ’ll come back Section 12.5.2: LICENSE.note.\nused bundled code written people, parts package permissive licenses whole.","code":""},{"path":"license.html","id":"more-licenses","chapter":"12 Licensing","heading":"12.3.2 More licenses","text":"gave absolute minimum need know .\n’s worth mentioning important licenses roughly ordered permissive least permissive:use_mit_license(): MIT license permissive license requiring keep copyright license notice.use_mit_license(): MIT license permissive license requiring keep copyright license notice.use_apache_license(): Apache License similar MIT license also includes explicit patent grant.\nPatents another component intellectual property distinct copyrights, organisations also care protection patent claims.use_apache_license(): Apache License similar MIT license also includes explicit patent grant.\nPatents another component intellectual property distinct copyrights, organisations also care protection patent claims.use_lgpl_license(): LGPL little weaker GPL, allowing bundle LPGL code using license larger work.use_lgpl_license(): LGPL little weaker GPL, allowing bundle LPGL code using license larger work.use_gpl_license(): ’ve discussed GPL already, ’s one important wrinkle note — GPL two major versions, GPLv2 GPLv3, ’re compatible (.e. can’t bundle GPLv2 GPLv3 code project).\navoid problem ’s generally recommended license package GPL >=2 GPL >= 3 future versions GPL license also apply code.\nuse_gpl_license() default.use_gpl_license(): ’ve discussed GPL already, ’s one important wrinkle note — GPL two major versions, GPLv2 GPLv3, ’re compatible (.e. can’t bundle GPLv2 GPLv3 code project).\navoid problem ’s generally recommended license package GPL >=2 GPL >= 3 future versions GPL license also apply code.\nuse_gpl_license() default.use_agpl_license(): AGPL defines distribution include providing service network, use AGPL code provide web service, bundled code must also open-sourced.\nconsiderably broader claim GPL, many companies expressly forbid use AGPL software.use_agpl_license(): AGPL defines distribution include providing service network, use AGPL code provide web service, bundled code must also open-sourced.\nconsiderably broader claim GPL, many companies expressly forbid use AGPL software.many licenses available.\ncan see list popular https://choosealicense.com/licenses/ full list https://opensource.org/licenses/alphabetical.\nprimary downside choosing license bullet list fewer R users understand means.","code":""},{"path":"license.html","id":"relicensing","chapter":"12 Licensing","heading":"12.3.3 Relicensing","text":"’s important spend little time thinking initial license can hard change later requires permission copyright holders.\nUnless ’ve done something special (’ll discuss Section 12.4), copyright holders include everyone contributed non-trivial amount code.need re-license package, recommend following steps:Check Authors@R field DESCRIPTION confirm package doesn’t contain bundled code (’ll talk Section 12.5).Check Authors@R field DESCRIPTION confirm package doesn’t contain bundled code (’ll talk Section 12.5).Find contributors looking Git history contributors display GitHub.Find contributors looking Git history contributors display GitHub.Optionally, inspect specific contributions remove people contributed typo fixes similar22.Optionally, inspect specific contributions remove people contributed typo fixes similar22.Ask every contributor ’re OK changing license.\nevery contributor GitHub, easiest way create issue list contributors ask confirm ’re OK change.\nTwo examples tidyverse team relicensed code include generics covr.Ask every contributor ’re OK changing license.\nevery contributor GitHub, easiest way create issue list contributors ask confirm ’re OK change.\nTwo examples tidyverse team relicensed code include generics covr.copyright holders approved, make change calling appropriate license function.copyright holders approved, make change calling appropriate license function.can read tidyverse followed process unify MIT license https://www.tidyverse.org/blog/2021/12/relicensing-packages/.","code":""},{"path":"license.html","id":"license-data","chapter":"12 Licensing","heading":"12.3.4 Data","text":"Open source licenses designed specifically apply source code, ’re releasing package primarily contains data, use different type license.\nrecommend one two Creative Commons licenses:want make data freely available possible, use CC0 license use_cc0_license().\npermissive license ’s equivalent MIT license (applies data, code).want make data freely available possible, use CC0 license use_cc0_license().\npermissive license ’s equivalent MIT license (applies data, code).want require attribution someone else uses data, can use CC-license, use_ccby_license().want require attribution someone else uses data, can use CC-license, use_ccby_license().","code":""},{"path":"license.html","id":"code-given-to-you","chapter":"12 Licensing","heading":"12.4 Code given to you","text":"Many packages include code written author.\ntwo main ways happens: people might choose contribute package using pull request similar, might find code choose bundle .\nsection discuss code others give , next section discuss code bundle.someone contributes code package using pull request similar, can assume author happy code use license.\nexplicit GitHub terms service, generally considered true regardless code contributed23.Note, however, author retains copyright code, unless use “contributor license agreement” CLA short.\nprimary advantage CLA makes copyright code simple, hence makes easy relicense code needed.\nimportant dual open-source/commercial projects easily allows dual licensing code made available world copyleft license, made available paying customers different, permissive, license.’s also important acknowledge contribution, ’s good practice generous thanks attribution.\ntidyverse, ask code contributors include bullet NEWS.md GitHub username, thank contributors release announcements.\nadd core developers24 DESCRIPTION file; projects choose add contributors matter small.","code":""},{"path":"license.html","id":"sec-code-you-bundle","chapter":"12 Licensing","heading":"12.5 Code you bundle","text":"three common reasons might choose bundle code written someone else:’re including someone else’s CSS JS library order create useful attractive web page HTML widgets.’re including someone else’s CSS JS library order create useful attractive web page HTML widgets.’re providing R wrapper simple C C++ library.\n(complex C/C++ libraries, don’t usually bundle code package, instead link copy installed elsewhere system).’re providing R wrapper simple C C++ library.\n(complex C/C++ libraries, don’t usually bundle code package, instead link copy installed elsewhere system).’ve copied small amount R code another package avoid taking dependency.\nGenerally, taking dependency another package right thing don’t need worry licensing, ’ll automatically get bug fixes.\nsometimes need small amount code big package, copying pasting package right thing .’ve copied small amount R code another package avoid taking dependency.\nGenerally, taking dependency another package right thing don’t need worry licensing, ’ll automatically get bug fixes.\nsometimes need small amount code big package, copying pasting package right thing .Note R rather different languages like C common way code bundled together compiling single executable.","code":""},{"path":"license.html","id":"license-compatibility","chapter":"12 Licensing","heading":"12.5.1 License compatibility","text":"bundle someone else’s code package, need first check bundled license compatible license.\ndistributing code, can add additional restrictions, can remove restrictions, means license compatibility symmetric.\nexample, can bundle MIT licensed code GPL licensed package, can bundle GPL licensed code MIT licensed package.five main cases consider:license license : ’s OK bundle.license license : ’s OK bundle.license MIT BSD, ’s OK bundle.license MIT BSD, ’s OK bundle.code copyleft license code permissive license, can’t bundle code.\n’ll need consider alternative approach, either looking code permissive license, putting external code separate package.code copyleft license code permissive license, can’t bundle code.\n’ll need consider alternative approach, either looking code permissive license, putting external code separate package.code comes Stack Overflow, ’s licensed25 Creative Common CC -SA license, compatible GPLv326\n. means need take extra care using Stack Overflow code open source packages\n. Learn https://empirical-software.engineering/blog/-snippets--gh-projects.code comes Stack Overflow, ’s licensed25 Creative Common CC -SA license, compatible GPLv326\n. means need take extra care using Stack Overflow code open source packages\n. Learn https://empirical-software.engineering/blog/-snippets--gh-projects.Otherwise, ’ll need little research.\nWikipedia useful diagram Google friend.\n’s important note different versions license necessarily compatible, e.g.\nGPLv2 GPLv3 compatible.Otherwise, ’ll need little research.\nWikipedia useful diagram Google friend.\n’s important note different versions license necessarily compatible, e.g.\nGPLv2 GPLv3 compatible.package isn’t open source, things complicated.\nPermissive licenses still easy, copyleft licenses generally don’t restrict use long don’t distribute package outside company.\ncomplex issue opinions differ, check legal department first.","code":""},{"path":"license.html","id":"how-to-include","chapter":"12 Licensing","heading":"12.5.2 How to include","text":"’ve determined licenses compatible, can bring code package.\n, need preserve existing license copyright statements, make easy possible future readers understanding licensing situation:’re including fragment another project, generally best put file ensure file copyright statements license description top.’re including fragment another project, generally best put file ensure file copyright statements license description top.’re including multiple files, put directory, put LICENSE file directory.’re including multiple files, put directory, put LICENSE file directory.also need include standard metadata Authors@R.\nuse role = \"cph\" declare author copyright holder, comment describing ’re author .’re submitting CRAN bundled code different (compatible) license, also need include LICENSE.note file describes overall license package, specific licenses individual component.\nexample, diffviewer package bundles six javascript libraries use permissive license.\nDESCRIPTION lists copyright holders, LICENSE.note describes licenses.\n(packages use techniques, think simplest approach fly CRAN.)","code":""},{"path":"tests.html","id":"tests","chapter":"13 Testing basics","heading":"13 Testing basics","text":"","code":""},{"path":"tests.html","id":"introduction-10","chapter":"13 Testing basics","heading":"13.1 Introduction","text":"Testing vital part package development.\nensures code want .\nTesting, however, adds additional step development workflow.\ngoal chapter show make task easier effective formal automated testing using testthat package.first stage testing journey become convinced testing enough benefits justify work.\nus, easy accept.\nOthers must learn hard way.’ve decided embrace automated testing, ’s time learn mechanics figure testing fits development workflow.R packages evolve, ’ll start encounter testing situations ’s fruitful use techniques somewhat specific testing differ R/.","code":""},{"path":"tests.html","id":"why-is-formal-testing-worth-the-trouble","chapter":"13 Testing basics","heading":"13.2 Why is formal testing worth the trouble?","text":"now, workflow probably looks like :Write function.Load devtools::load_all(), maybe via Ctrl/Cmd + Shift + L.Experiment console see works.Rinse repeat.testing code workflow, ’re informally.\nproblem approach come back code 3 months time add new feature, ’ve probably forgotten informal tests ran first time around.\nmakes easy break code used work.Many us embrace automated testing realize ’re re-fixing bug second fifth time.\nwriting code fixing bugs, might perform interactive tests make sure code ’re working want.\n’s easy forget different use cases need check, don’t system storing re-running tests.\ncommon practice among R programmers.\nproblem don’t test code, ’s don’t automate tests.chapter ’ll learn transition informal ad hoc testing, done interactively console, automated testing (also known unit testing).\nturning casual interactive tests formal tests requires little work front, pays four ways:Fewer bugs.\n’re explicit code behave, fewer bugs.\nreason bit like reason double entry book-keeping works: describe behaviour code two places, code tests, able check one .\ninformal testing, ’s tempting just explore typical authentic usage, similar writing examples.\nHowever, writing formal tests, ’s natural adopt adversarial mindset anticipate unexpected inputs break code.\nalways introduce new tests add new feature function, ’ll prevent many bugs created first place, proactively address pesky edge cases.\nTests also keep (re-)breaking one feature, ’re tinkering another.Fewer bugs.\n’re explicit code behave, fewer bugs.\nreason bit like reason double entry book-keeping works: describe behaviour code two places, code tests, able check one .informal testing, ’s tempting just explore typical authentic usage, similar writing examples.\nHowever, writing formal tests, ’s natural adopt adversarial mindset anticipate unexpected inputs break code.always introduce new tests add new feature function, ’ll prevent many bugs created first place, proactively address pesky edge cases.\nTests also keep (re-)breaking one feature, ’re tinkering another.Better code structure.\nCode well designed tends easy test can turn advantage.\nstruggling write tests, consider problem actually design function(s).\nprocess writing tests great way get free, private, personalized feedback well-factored code .\nintegrate testing development workflow (versus planning slap tests “later”), ’ll subject constant pressure break complicated operations separate functions work isolation.\nFunctions easier test usually easier understand re-combine new ways.Better code structure.\nCode well designed tends easy test can turn advantage.\nstruggling write tests, consider problem actually design function(s).\nprocess writing tests great way get free, private, personalized feedback well-factored code .\nintegrate testing development workflow (versus planning slap tests “later”), ’ll subject constant pressure break complicated operations separate functions work isolation.\nFunctions easier test usually easier understand re-combine new ways.Call action.\nstart fix bug, first like convert (failing) test.\nwonderfully effective making goal concrete: make test pass.\nbasically special case general methodology known test driven development.Call action.\nstart fix bug, first like convert (failing) test.\nwonderfully effective making goal concrete: make test pass.\nbasically special case general methodology known test driven development.Robust code.\nknow major functionality package well covered tests, can confidently make big changes without worrying accidentally breaking something.\nprovides great reality check think ’ve discovered brilliant new way simplify package.\nSometimes “simplifications” fail account important use case tests save .Robust code.\nknow major functionality package well covered tests, can confidently make big changes without worrying accidentally breaking something.\nprovides great reality check think ’ve discovered brilliant new way simplify package.\nSometimes “simplifications” fail account important use case tests save .","code":""},{"path":"tests.html","id":"introducing-testthat","chapter":"13 Testing basics","heading":"13.3 Introducing testthat","text":"chapter describes test R package using testthat package: https://testthat.r-lib.orgIf ’re familiar frameworks unit testing languages, note fundamental differences testthat.\nR , heart, functional programming language object-oriented programming language.\ninstance, R’s main object-oriented systems (S3 S4) based generic functions (.e., methods belong functions classes), testing approaches built around objects methods don’t make much sense.testthat 3.0.0 (released 2020-10-31) introduced idea edition testthat, specifically third edition testthat, refer testthat 3e.\nedition bundle behaviors explicitly choose use, allowing us make otherwise backward incompatible changes.\nparticularly important testthat since large number packages use (almost 5,000 last count).\nuse testthat 3e, must version testthat >= 3.0.0 explicitly opt-third edition behaviors.\nallows testthat continue evolve improve without breaking historical packages rather passive maintenance phase.\ncan learn testthat 3e article blog post Upgrading testthat edition 3.recommend testthat 3e new packages recommend updating existing, actively maintained packages use testthat 3e.\nUnless say otherwise, chapter describes testthat 3e.","code":""},{"path":"tests.html","id":"tests-mechanics-workflow","chapter":"13 Testing basics","heading":"13.4 Test mechanics and workflow","text":"","code":""},{"path":"tests.html","id":"initial-setup","chapter":"13 Testing basics","heading":"13.4.1 Initial setup","text":"setup package use testthat, run::Create tests/testthat/ directory.Create tests/testthat/ directory.Add testthat Suggests field DESCRIPTION.\nSpecify testthat 3e Config/testthat/edition field.\naffected DESCRIPTION fields might look like:\nSuggests: testthat (>= 3.0.0)\nConfig/testthat/edition: 3Add testthat Suggests field DESCRIPTION.\nSpecify testthat 3e Config/testthat/edition field.\naffected DESCRIPTION fields might look like:Create file tests/testthat.R runs tests R CMD check runs.\n(’ll learn automated checking.) contents file something like:\n\nlibrary(testthat)\nlibrary(abcde)\n\ntest_check(\"abcde\")Create file tests/testthat.R runs tests R CMD check runs.\n(’ll learn automated checking.) contents file something like:initial setup usually something per package.\nHowever, even package already uses testthat, safe run use_testthat(3), ’re ready opt-testthat 3e.edit tests/testthat.R!\nrun R CMD check (, therefore, devtools::check()), used test-running scenarios (devtools::test() devtools::test_active_file()).\nwant something affects tests, almost always better way modifying boilerplate tests/testthat.R script.\nchapter details many different ways make objects logic available testing.","code":"\nusethis::use_testthat(3)Suggests: testthat (>= 3.0.0)\nConfig/testthat/edition: 3\nlibrary(testthat)\nlibrary(abcde)\n\ntest_check(\"abcde\")"},{"path":"tests.html","id":"create-a-test","chapter":"13 Testing basics","heading":"13.4.2 Create a test","text":"define functions package, files R/, add corresponding tests .R files tests/testthat/.\nstrongly recommend organisation test files match organisation R/ files, discussed section 7.2: foofy() function (friends helpers) defined R/foofy.R tests live tests/testthat/test-foofy.R.Even different conventions file organisation naming, note testthat tests must live files tests/testthat/ file names must begin test.\ntest file name displayed testthat output, provides helpful context27.usethis offers helpful pair functions creating toggling files:usethis::use_r()usethis::use_test()Either one can called file (base) name, order create file de novo open editing:use_r() / use_test() duo convenience features make “just work” many common situations:determining target file, can deal presence absence .R extension test- prefix.\nEquivalent: use_r(\"foofy.R\"), use_r(\"foofy\")\nEquivalent: use_test(\"test-blarg.R\"), use_test(\"blarg.R\"), use_test(\"blarg\")\nEquivalent: use_r(\"foofy.R\"), use_r(\"foofy\")Equivalent: use_test(\"test-blarg.R\"), use_test(\"blarg.R\"), use_test(\"blarg\")target file already exists, opened editing. Otherwise, target created opened editing.R/foofy.R active file source editor, can even call use_test() arguments!\ntarget test file can inferred: ’re editing R/foofy.R, probably want work companion test file, tests/testthat/test-foofy.R.\ndoesn’t exist yet, created , either way, test file opened editing.\nworks way around also.\n’re editing tests/testthat/test-foofy.R, call use_r() (optionally, creates ) opens R/foofy.R.Bottom line: use_r() / use_test() handy initially creating file pairs , later, shifting attention one .use_test() creates new test file, inserts example test:replace logic, ’s nice reminder basic form:test file holds one test_that() tests.test describes ’s testing: e.g. “multiplication works”.test one expectations: e.g. expect_equal(2 * 2, 4).go much detail test functions.","code":"R                                     tests/testthat\n└── foofy.R                           └── test-foofy.R\n    foofy <- function(...) {...}          test_that(\"foofy does this\", {...})\n                                          test_that(\"foofy does that\", {...})\nuse_r(\"foofy\")    # creates and opens R/foofy.R\nuse_test(\"blarg\") # creates and opens tests/testthat/test-blarg.R\ntest_that(\"multiplication works\", {\n  expect_equal(2 * 2, 4)\n})"},{"path":"tests.html","id":"run-tests","chapter":"13 Testing basics","heading":"13.4.3 Run tests","text":"Depending development cycle, ’ll run tests various scales.\nrapidly iterating function, might work level individual tests.\ncode settles , ’ll run entire test files eventually entire test suite.Micro-iteration: interactive phase initiate refine function tests tandem.\nrun devtools::load_all() often, execute individual expectations whole tests interactively console.\nNote load_all() attaches testthat, puts perfect position test drive functions execute individual tests expectations.Mezzo-iteration: one file’s-worth functions associated tests start shape , want execute entire file associated tests, perhaps testthat::test_file():RStudio, couple shortcuts running single test file.target test file active file, can use “Run Tests” button upper right corner source editor.also useful function, devtools::test_active_file().\ninfers target test file active file , similar use_r() use_test() work, works regardless whether active file test file companion R/*.R file.\ncan invoke via “Run test file” Addins menu.\nHowever, heavy users (like us!), recommend binding keyboard shortcut; use Ctrl/Cmd + T.Macro-iteration: near completion new feature bug fix, want run entire test suite.frequently, ’ll devtools::test():eventually, part R CMD check devtools::check():devtools::test() mapped Ctrl/Cmd + Shift + T.\ndevtools::check() mapped Ctrl/Cmd + Shift + E.output devtools::test() looks like :Test failure reported like :failure gives description test (e.g., “get_release_data() works file found”), location (e.g., “test-release.R:108:3”), reason failure (e.g., “res$Version (actual) equal ”0.0.0.9000” (expected)“).idea ’ll modify code (either functions defined R/ tests tests/testthat/) tests passing.","code":"\n# tweak the foofy() function and re-load it\ndevtools::load_all()\n\n# interactively explore and refine expectations and tests\nexpect_equal(foofy(...), EXPECTED_FOOFY_OUTPUT)\n\ntestthat(\"foofy does good things\", {...})\ntestthat::test_file(\"tests/testthat/test-foofy.R\")\ndevtools::test()\ndevtools::check()devtools::test()\nℹ Loading usethis\nℹ Testing usethis\n✓ | F W S  OK | Context\n✓ |         1 | addin [0.1s]\n✓ |         6 | badge [0.5s]\n   ...\n✓ |        27 | github-actions [4.9s]\n   ...\n✓ |        44 | write [0.6s]\n\n══ Results ═════════════════════════════════════════════════════════════════\nDuration: 31.3 s\n\n── Skipped tests  ──────────────────────────────────────────────────────────\n• Not on GitHub Actions, Travis, or Appveyor (3)\n\n[ FAIL 1 | WARN 0 | SKIP 3 | PASS 728 ]Failure (test-release.R:108:3): get_release_data() works if no file found\nres$Version (`actual`) not equal to \"0.0.0.9000\" (`expected`).\n\n`actual`:   \"0.0.0.1234\"\n`expected`: \"0.0.0.9000\""},{"path":"tests.html","id":"test-organisation","chapter":"13 Testing basics","heading":"13.5 Test organisation","text":"test file lives tests/testthat/.\nname must start test.\ninspect execute test file stringr package.first, purposes rendering book, must attach stringr testthat.\nNote real-life test-running situations, taken care package development tooling:interactive development, devtools::load_all() makes testthat package--development available (exported unexported functions).arms-length test execution, taken care devtools::test_active_file(), devtools::test(), tests/testthat.R.test files include library() calls. also explicitly request testthat edition 3, real package declared DESCRIPTION.contents tests/testthat/test-dup.r stringr28:file shows typical mix tests:“basic duplication works” tests typical usage str_dup().“0 duplicates equals empty string” probes specific edge case.“uses tidyverse recycling rules” checks malformed input results specific kind error.Tests organised hierarchically: expectations grouped tests organised files:file holds multiple related tests.\nexample, file tests/testthat/test-dup.r tests code R/dup.r.file holds multiple related tests.\nexample, file tests/testthat/test-dup.r tests code R/dup.r.test groups together multiple expectations test output simple function, range possibilities single parameter complicated function, tightly related functionality across multiple functions.\nsometimes called unit tests.\ntest cover single unit functionality.\ntest created test_that(desc, code).\n’s common write description (desc) create something reads naturally, e.g. test_that(\"basic duplication works\", { ... }).\ntest failure report includes description, want concise statement test’s purpose, e.g. specific behaviour.test groups together multiple expectations test output simple function, range possibilities single parameter complicated function, tightly related functionality across multiple functions.\nsometimes called unit tests.\ntest cover single unit functionality.\ntest created test_that(desc, code).’s common write description (desc) create something reads naturally, e.g. test_that(\"basic duplication works\", { ... }).\ntest failure report includes description, want concise statement test’s purpose, e.g. specific behaviour.expectation atom testing.\ndescribes expected result computation: right value right class?\nproduce error ?\nexpectation automates visual checking results console.\nExpectations functions start expect_.expectation atom testing.\ndescribes expected result computation: right value right class?\nproduce error ?\nexpectation automates visual checking results console.\nExpectations functions start expect_.want arrange things , test fails, ’ll know ’s wrong code look problem.\nmotivates recommendations regarding file organisation, file naming, test description.\nFinally, try avoid putting many expectations one test - ’s better smaller tests fewer larger tests.","code":"\nlibrary(testthat)\nlibrary(stringr)\nlocal_edition(3)\ntest_that(\"basic duplication works\", {\n  expect_equal(str_dup(\"a\", 3), \"aaa\")\n  expect_equal(str_dup(\"abc\", 2), \"abcabc\")\n  expect_equal(str_dup(c(\"a\", \"b\"), 2), c(\"aa\", \"bb\"))\n  expect_equal(str_dup(c(\"a\", \"b\"), c(2, 3)), c(\"aa\", \"bbb\"))\n})\n#> Test passed 🥳\n\ntest_that(\"0 duplicates equals empty string\", {\n  expect_equal(str_dup(\"a\", 0), \"\")\n  expect_equal(str_dup(c(\"a\", \"b\"), 0), rep(\"\", 2))\n})\n#> Test passed 🥳\n\ntest_that(\"uses tidyverse recycling rules\", {\n  expect_error(str_dup(1:2, 1:3), class = \"vctrs_error_incompatible_size\")\n})\n#> Test passed 🎊"},{"path":"tests.html","id":"expectations","chapter":"13 Testing basics","heading":"13.6 Expectations","text":"expectation finest level testing.\nmakes binary assertion whether object properties expect.\nobject usually return value function package.expectations similar structure:start expect_.start expect_.two main arguments: first actual result, second expect.two main arguments: first actual result, second expect.actual expected results don’t agree, testthat throws error.actual expected results don’t agree, testthat throws error.expectations additional arguments control finer points comparing actual expected result.expectations additional arguments control finer points comparing actual expected result.’ll normally put expectations inside tests inside files, can also run directly.\nmakes easy explore expectations interactively.\n40 expectations testthat package, can explored testthat’s reference index.\n’re going cover important expectations .","code":""},{"path":"tests.html","id":"testing-for-equality","chapter":"13 Testing basics","heading":"13.6.1 Testing for equality","text":"expect_equal() checks equality, reasonable amount numeric tolerance:want test exact equivalence, use expect_identical().","code":"\nexpect_equal(10, 10)\nexpect_equal(10, 10L)\nexpect_equal(10, 10 + 1e-7)\nexpect_equal(10, 11)\n#> Error: 10 (`actual`) not equal to 11 (`expected`).\n#> \n#>   `actual`: 10\n#> `expected`: 11\nexpect_equal(10, 10 + 1e-7)\nexpect_identical(10, 10 + 1e-7)\n#> Error: 10 (`actual`) not identical to 10 + 1e-07 (`expected`).\n#> \n#>   `actual`: 10.0000000\n#> `expected`: 10.0000001\n\nexpect_equal(2, 2L)\nexpect_identical(2, 2L)\n#> Error: 2 (`actual`) not identical to 2L (`expected`).\n#> \n#> `actual` is a double vector (2)\n#> `expected` is an integer vector (2)"},{"path":"tests.html","id":"testing-errors","chapter":"13 Testing basics","heading":"13.6.2 Testing errors","text":"Use expect_error() check whether expression throws error.\n’s important expectation trio also includes expect_warning() expect_message().\n’re going emphasize errors , also applies warnings messages.Usually care two things testing error:code fail? Specifically, fail right reason?accompanying message make sense human needs deal error?entry-level solution expect specific type condition:bit dangerous, though, especially testing error.\nlots ways code fail!\nConsider following test:expectation intended test recycling behaviour str_dup().\n, due typo, tests behaviour non-existent function, str_duq().\ncode throws error , therefore, test passes, wrong reason.\nDue typo, actual error thrown able find str_duq() function:Historically, best defense assert condition message matches certain regular expression, via second argument, regexp., fact, force typo problem surface:Recent developments base R rlang make increasingly likely conditions signaled class, provides better basis creating precise expectations.\nexactly ’ve already seen stringr example.\nclass argument :choice, express expectation terms condition’s class, instead message.\nOften control, .e. package signals condition.\ncondition originates base R another package, proceed caution.\noften good reminder re-consider wisdom testing condition fully control first place.check absence error, warning, message, pass NA regexp argument:course, functionally equivalent simply executing 1 / 2 inside test, developers find explicit expectation expressive.genuinely care condition’s message, testthat 3e’s snapshot tests best approach, describe next.","code":"\n1 / \"a\"\n#> Error in 1/\"a\": non-numeric argument to binary operator\nexpect_error(1 / \"a\") \n\nlog(-1)\n#> Warning in log(-1): NaNs produced\n#> [1] NaN\nexpect_warning(log(-1))\nexpect_error(str_duq(1:2, 1:3))\nstr_duq(1:2, 1:3)\n#> Error in str_duq(1:2, 1:3): could not find function \"str_duq\"\nexpect_error(1 / \"a\", \"non-numeric argument\")\nexpect_warning(log(-1), \"NaNs produced\")\nexpect_error(str_duq(1:2, 1:3), \"recycle\")\n#> Error in str_duq(1:2, 1:3): could not find function \"str_duq\"\n# fails, error has wrong class\nexpect_error(str_duq(1:2, 1:3), class = \"vctrs_error_incompatible_size\")\n#> Error in str_duq(1:2, 1:3): could not find function \"str_duq\"\n\n# passes, error has expected class\nexpect_error(str_dup(1:2, 1:3), class = \"vctrs_error_incompatible_size\")\nexpect_error(1 / 2, NA)"},{"path":"tests.html","id":"snapshot-tests","chapter":"13 Testing basics","heading":"13.6.3 Snapshot tests","text":"Sometimes ’s difficult awkward describe expected result code.\nSnapshot tests great solution problem one main innovations testthat 3e.\nbasic idea record expected result separate, human-readable file.\nGoing forward, testthat alerts newly computed result differs previously recorded snapshot.\nSnapshot tests particularly suited monitoring package’s user interface, informational messages errors.\nuse cases include testing images complicated objects.’ll illustrate snapshot tests using waldo package.\nhood, testthat 3e uses waldo heavy lifting “actual vs. expected” comparisons, ’s good know bit waldo anyway.\nOne waldo’s main design goals present differences clear actionable manner, opposed frustrating declaration “differs know exactly , won’t tell ”.\nTherefore, formatting output waldo::compare() intentional well-suited snapshot test.\nbinary outcome TRUE (actual == expected) vs. FALSE (actual != expected) fairly easy check get test.\n’re concerned writing test ensure differences reported user intended way.waldo uses different layouts showing diffs, depending various conditions.\ndeliberately constrain width, order trigger side--side layout.29.\n(’ll talk withr package .)two primary inputs differ two locations: start end.\nlayout presents , surrounding context, helps reader orient .’s look snapshot test:execute expect_snapshot() test containing expect_snapshot() interactively, ’ll see :followed preview snapshot output.reminds snapshot tests function executed non-interactively, .e. running entire test file entire test suite.\napplies recording snapshots checking .first time test executed via devtools::test() similar, ’ll see something like (assume test tests/testthat/test-diff.R):always warning upon initial snapshot creation.\nsnapshot added tests/testthat/_snaps/diff.md, heading “side--side diffs work”, comes test’s description.\nsnapshot looks exactly like user sees interactively console, experience want check .\nsnapshot file also readable, pleasant package developer.\nreadability extends snapshot changes, .e. examining Git diffs reviewing pull requests GitHub, helps keep tabs user interface.\nGoing forward, long package continues re-capitulate expected snapshot, test pass.’ve written lot conventional unit tests, can appreciate well-suited snapshot tests use case.\nforced inline expected output test file, great deal quoting, escaping, newline management.\nIronically, conventional expectations, output expect user see tends get obscured heavy layer syntactical noise.snapshot test fails?\nLet’s imagine hypothetical internal change default labels switch “old” “new” “OLD” “NEW”.\n’s snapshot test react:diff presented effectively real-world usage, e.g. console, Git client, via Shiny app (see ).\neven plain text version highlights changes quite clearly.\ntwo loci change indicated pair lines marked - +, showing snapshot changed.can call testthat::snapshot_review('diff') review changes locally Shiny app, lets skip accept individual snapshots.\n, changes intentional expected, can go straight testthat::snapshot_accept('diff').\n’ve re-synchronized actual output snapshots file, tests pass .\nreal life, snapshot tests great way stay informed changes package’s user interface, due internal changes due changes dependencies even R .expect_snapshot() arguments worth knowing :cran = FALSE: default, snapshot tests skipped looks like tests running CRAN’s servers.\nreflects typical intent snapshot tests, proactively monitor user interface, check correctness, presumably job unit tests skipped.\ntypical usage, snapshot change something developer want know , signal actual defect.cran = FALSE: default, snapshot tests skipped looks like tests running CRAN’s servers.\nreflects typical intent snapshot tests, proactively monitor user interface, check correctness, presumably job unit tests skipped.\ntypical usage, snapshot change something developer want know , signal actual defect.error = FALSE: default, snapshot code allowed throw error.\nSee expect_error(), described , one approach testing errors.\nsometimes want assess “error message make sense human?” laid context snapshot great way see fresh eyes.\nSpecify error = TRUE case:\n\nexpect_snapshot(error = TRUE,\n  str_dup(1:2, 1:3)\n)error = FALSE: default, snapshot code allowed throw error.\nSee expect_error(), described , one approach testing errors.\nsometimes want assess “error message make sense human?” laid context snapshot great way see fresh eyes.\nSpecify error = TRUE case:transform: Sometimes snapshot contains volatile, insignificant elements, temporary filepath timestamp.\ntransform argument accepts function, presumably written , remove replace changeable text.\nAnother use transform scrub sensitive information snapshot.transform: Sometimes snapshot contains volatile, insignificant elements, temporary filepath timestamp.\ntransform argument accepts function, presumably written , remove replace changeable text.\nAnother use transform scrub sensitive information snapshot.variant: Sometimes snapshots reflect ambient conditions, operating system version R one dependencies, need different snapshot variant.\nexperimental somewhat advanced feature, can arrange things use single snapshot, probably .variant: Sometimes snapshots reflect ambient conditions, operating system version R one dependencies, need different snapshot variant.\nexperimental somewhat advanced feature, can arrange things use single snapshot, probably .typical usage, testthat take care managing snapshot files tests/testthat/_snaps/.\nhappens normal course running tests , perhaps, calling testthat::snapshot_accept().","code":"\nwithr::with_options(\n  list(width = 20),\n  waldo::compare(c(\"X\", letters), c(letters, \"X\"))\n)\n#>     old | new    \n#> [1] \"X\" -        \n#> [2] \"a\" | \"a\" [1]\n#> [3] \"b\" | \"b\" [2]\n#> [4] \"c\" | \"c\" [3]\n#> \n#>      old | new     \n#> [25] \"x\" | \"x\" [24]\n#> [26] \"y\" | \"y\" [25]\n#> [27] \"z\" | \"z\" [26]\n#>          - \"X\" [27]\ntest_that(\"side-by-side diffs work\", {\n  withr::local_options(width = 20)\n  expect_snapshot(\n    waldo::compare(c(\"X\", letters), c(letters, \"X\"))\n  )\n})Can't compare snapshot to reference when testing interactively\nℹ Run `devtools::test()` or `testthat::test_file()` to see changes── Warning (test-diff.R:63:3): side-by-side diffs work ─────────────────────\nAdding new snapshot:\nCode\n  waldo::compare(c(\n    \"X\", letters), c(\n    letters, \"X\"))\nOutput\n      old | new    \n  [1] \"X\" -        \n  [2] \"a\" | \"a\" [1]\n  [3] \"b\" | \"b\" [2]\n  [4] \"c\" | \"c\" [3]\n  \n       old | new     \n  [25] \"x\" | \"x\" [24]\n  [26] \"y\" | \"y\" [25]\n  [27] \"z\" | \"z\" [26]\n           - \"X\" [27]── Failure (test-diff.R:63:3): side-by-side diffs work──────────────────────────\nSnapshot of code has changed:\nold[3:15] vs new[3:15]\n  \"    \\\"X\\\", letters), c(\"\n  \"    letters, \\\"X\\\"))\"\n  \"Output\"\n- \"      old | new    \"\n+ \"      OLD | NEW    \"\n  \"  [1] \\\"X\\\" -        \"\n  \"  [2] \\\"a\\\" | \\\"a\\\" [1]\"\n  \"  [3] \\\"b\\\" | \\\"b\\\" [2]\"\n  \"  [4] \\\"c\\\" | \\\"c\\\" [3]\"\n  \"  \"\n- \"       old | new     \"\n+ \"       OLD | NEW     \"\nand 3 more ...\n\n* Run `snapshot_accept('diff')` to accept the change\n* Run `snapshot_review('diff')` to interactively review the change\nexpect_snapshot(error = TRUE,\n  str_dup(1:2, 1:3)\n)"},{"path":"tests.html","id":"shortcuts-for-other-common-patterns","chapter":"13 Testing basics","heading":"13.6.4 Shortcuts for other common patterns","text":"conclude section expectations come frequently.\nremember testthat many pre-built expectations can demonstrate .Several expectations can described “shortcuts”, .e. streamline pattern comes often enough deserve wrapper.expect_match(object, regexp, ...) shortcut wraps grepl(pattern = regexp, x = object, ...).\nmatches character vector input regular expression regexp.\noptional argument controls whether elements just one element needs match.\nRead expect_match() documentation see additional arguments, like ignore.case = FALSE fixed = TRUE, can passed grepl().\n\nstring <- \"Testing fun!\"\n\nexpect_match(string, \"Testing\") \n\n# Fails, match case-sensitive\nexpect_match(string, \"testing\")\n#> Error: `string` match \"testing\".\n#> Actual value: \"Testing fun!\"\n\n# Passes additional arguments passed grepl():\nexpect_match(string, \"testing\", ignore.case = TRUE)expect_match(object, regexp, ...) shortcut wraps grepl(pattern = regexp, x = object, ...).\nmatches character vector input regular expression regexp.\noptional argument controls whether elements just one element needs match.\nRead expect_match() documentation see additional arguments, like ignore.case = FALSE fixed = TRUE, can passed grepl().expect_length(object, n) shortcut expect_equal(length(object), n).expect_length(object, n) shortcut expect_equal(length(object), n).expect_setequal(x, y) tests every element x occurs y, every element y occurs x.\nwon’t fail x y happen elements different order.expect_setequal(x, y) tests every element x occurs y, every element y occurs x.\nwon’t fail x y happen elements different order.expect_s3_class() expect_s4_class() check object inherit()s specified class.\nexpect_type()checks typeof() object.\n\nmodel <- lm(mpg ~ wt, data = mtcars)\nexpect_s3_class(model, \"lm\")\nexpect_s3_class(model, \"glm\")\n#> Error: `model` inherits 'lm' 'glm'.expect_s3_class() expect_s4_class() check object inherit()s specified class.\nexpect_type()checks typeof() object.expect_true() expect_false() useful catchalls none expectations need.","code":"\nstring <- \"Testing is fun!\"\n\nexpect_match(string, \"Testing\") \n\n# Fails, match is case-sensitive\nexpect_match(string, \"testing\")\n#> Error: `string` does not match \"testing\".\n#> Actual value: \"Testing is fun!\"\n\n# Passes because additional arguments are passed to grepl():\nexpect_match(string, \"testing\", ignore.case = TRUE)\nmodel <- lm(mpg ~ wt, data = mtcars)\nexpect_s3_class(model, \"lm\")\nexpect_s3_class(model, \"glm\")\n#> Error: `model` inherits from 'lm' not 'glm'."},{"path":"tests.html","id":"section","chapter":"13 Testing basics","heading":"13.7 ","text":"","code":""},{"path":"test-design.html","id":"test-design","chapter":"14 Designing your test suite","heading":"14 Designing your test suite","text":"test files include library() calls.\nalso explicitly request testthat edition 3, real package declared DESCRIPTION.","code":"\nlibrary(testthat)\nlocal_edition(3)"},{"path":"test-design.html","id":"what-to-test","chapter":"14 Designing your test suite","heading":"14.1 What to test","text":"Whenever tempted type something print statement debugger expression, write test instead.\n— Martin FowlerThere fine balance writing tests.\ntest write makes code less likely change inadvertently; also can make harder change code purpose.\n’s hard give good general advice writing tests, might find points helpful:Focus testing external interface functions - test internal interface, ’s harder change implementation future well modifying code, ’ll also need update tests.Focus testing external interface functions - test internal interface, ’s harder change implementation future well modifying code, ’ll also need update tests.Strive test behaviour one one test.\nbehaviour later changes need update single test.Strive test behaviour one one test.\nbehaviour later changes need update single test.Avoid testing simple code ’re confident work.\nInstead focus time code ’re sure , fragile, complicated interdependencies.\nsaid, often find make mistakes falsely assume problem simple doesn’t need tests.Avoid testing simple code ’re confident work.\nInstead focus time code ’re sure , fragile, complicated interdependencies.\nsaid, often find make mistakes falsely assume problem simple doesn’t need tests.Always write test discover bug.\nmay find helpful adopt test-first philosophy.\nalways start writing tests, write code makes pass.\nreflects important problem solving strategy: start establishing success criteria, know ’ve solved problem.Always write test discover bug.\nmay find helpful adopt test-first philosophy.\nalways start writing tests, write code makes pass.\nreflects important problem solving strategy: start establishing success criteria, know ’ve solved problem.","code":""},{"path":"test-design.html","id":"test-coverage","chapter":"14 Designing your test suite","heading":"14.1.1 Test coverage","text":"Another concrete way direct test writing efforts examine test coverage.\ncovr package (<https://covr.r-lib.org) can used determine lines package’s source code (!) executed test suite run.\noften presented percentage.\nGenerally speaking, higher better.technical sense, 100% test coverage goal, however, rarely achieved practice ’s often OK.\nGoing 90% 99% coverage 100% always best use development time energy.\nmany cases, last 10% 1% often requires awkward gymnastics cover.\nSometimes forces introduce mocking new complexity.\nDon’t sacrifice maintainability test suite name covering weird edge case hasn’t yet proven problem.\nAlso remember every line code every function equally likely harbor bugs.\nFocus testing energy code tricky, based expert opinion empirical evidence ’ve accumulated bug hot spots.use covr regularly, two different ways:Local, interactive use. mostly use devtools::test_coverage_active_file() devtools::test_coverage(), exploring coverage individual file whole package, respectively.Automatic, remote use via GitHub Actions (GHA). cover continuous integration GHA thoroughly elsewhere, least mention usethis::use_github_action(\"test-coverage\") configures GHA workflow constantly monitors test coverage. Test coverage can especially helpful metric evaluating pull request (either external contributor). proposed change well-covered tests less risky merge.","code":""},{"path":"test-design.html","id":"high-level-principles-for-testing","chapter":"14 Designing your test suite","heading":"14.2 High-level principles for testing","text":"later sections, offer concrete strategies handle common testing dilemmas R.\nlay high-level principles underpin recommendations:test ideally self-sufficient self-contained.interactive workflow important, mostly interact tests failing.’s important test code obvious , e.g., DRY possible.However, interactive workflow shouldn’t “leak” undermine test suite.Writing good tests code base often feels challenging writing code first place.\ncan come bit shock ’re new package development might concerned ’re wrong.\nDon’t worry, ’re !\nTesting presents many unique challenges maneuvers, tend get much less air time programming communities strategies writing “main code”, .e. stuff R/.\nresult, requires deliberate effort develop skills taste around testing.Many packages maintained team violate advice ’ll find .\n(least) two reasons :testthat evolving twelve years chapter reflects cumulative lessons learned experience. tests many packages place long time reflect typical practices different eras different maintainers.aren’t hard fast rules, , rather, guidelines. always specific situations makes sense bend rule.chapter can’t address possible testing situations, hopefully guidelines help future decision-making.","code":""},{"path":"test-design.html","id":"self-sufficient-tests","chapter":"14 Designing your test suite","heading":"14.2.1 Self-sufficient tests","text":"tests strive hermetic: test contain information necessary set , execute, tear environment.\nTests assume little possible outside environment ….book Software Engineering Google, Chapter 11Recall advice found section 7.6, covers package’s “main code”, .e. everything R/:.R files R/ consist almost entirely function definitions.\ntop-level code suspicious carefully reviewed possible conversion function.analogous advice test files:test-*.R files tests/testthat/ consist almost entirely calls test_that().\ntop-level code suspicious carefully considered relocation calls test_that() files get special treatment inside R package testthat.Eliminating (least minimizing) top-level code outside test_that() beneficial effect making tests hermetic.\nbasically testing analogue general programming advice ’s wise avoid unstructured sharing state.Logic top-level test file awkward scope: Objects functions defined might call “test file scope”, definitions appear first call test_that().\ntop-level code interleaved test_that() calls, can even create “partial test file scope”.writing tests, can feel convenient rely file-scoped objects, especially early life test suite, e.g. test file fits one screen.\nfind implicitly relying objects test’s parent environment tends make test suite harder understand maintain time.Consider test file top-level code sprinkled around , outside test_that():recommend relocating file-scoped logic either narrower scope broader scope.\n’s look like use narrow scope, .e. inline everything inside test_that() calls:discuss techniques moving file-scoped logic broader scope.","code":"dat <- data.frame(x = c(\"a\", \"b\", \"c\"), y = c(1, 2, 3))\n\nskip_if(today_is_a_monday())\n\ntest_that(\"foofy() does this\", {\n  expect_equal(foofy(dat), ...)\n})\n\ndat2 <- data.frame(x = c(\"x\", \"y\", \"z\"), y = c(4, 5, 6))\n\nskip_on_os(\"windows\")\n\ntest_that(\"foofy2() does that\", {\n  expect_snapshot(foofy2(dat, dat2)\n})test_that(\"foofy() does this\", {\n  skip_if(today_is_a_monday())\n  \n  dat <- data.frame(x = c(\"a\", \"b\", \"c\"), y = c(1, 2, 3))\n  \n  expect_equal(foofy(dat), ...)\n})\n\ntest_that(\"foofy() does that\", {\n  skip_if(today_is_a_monday())\n  skip_on_os(\"windows\")\n  \n  dat <- data.frame(x = c(\"a\", \"b\", \"c\"), y = c(1, 2, 3))\n  dat2 <- data.frame(x = c(\"x\", \"y\", \"z\"), y = c(4, 5, 6))\n  \n  expect_snapshot(foofy(dat, dat2)\n})"},{"path":"test-design.html","id":"self-contained-tests","chapter":"14 Designing your test suite","heading":"14.2.2 Self-contained tests","text":"test_that() test execution environment, makes somewhat self-contained.\nexample, R object create inside test exist test exits:thingy object lives dies entirely within confines test_that().\nHowever, testthat doesn’t know cleanup actions affect aspects R landscape:filesystem: creating deleting files, changing working directory, etc.search path: library(), attach().Global options, like options() par(), environment variables.Watch calls like library(), options(), Sys.setenv() persistent effect test, even executed inside test_that():changes landscape even persist beyond current test file, .e. carry subsequent test files.’s easy avoid making changes test code, best strategy!\n’s unavoidable, make sure clean .\nmindset similar one advocated section 7.6, discussing design well-mannered functions.like use withr package (https://withr.r-lib.org) make temporary changes global state, automatically captures initial state arranges eventual restoration.\n’ve already seen example usage, explored snapshot tests:test requires display width set 20 columns, considerably less default width.\nwithr::local_options(width = 20) sets width option 20 , end test, restores option original value.\nwithr also pleasant use interactive development: deferred actions still captured global environment can executed explicitly via withr::deferred_run() implicitly restarting R.recommend including withr Suggests, ’re going use tests, Imports, also use R/.\nCall withr functions , e.g. like withr::local_whatever(), either case.\nSee section 11.2.1.1 full discussion.easiest way add package DESCRIPTION , e.g., usethis::use_package(\"withr\", type = \"Suggests\").\ntidyverse packages, withr considered “free dependency”, .e. tidyverse uses withr extensively don’t hesitate use whenever useful.withr large set pre-implemented local_*() / with_*() functions handle testing needs, check write .\nnothing exists meets need, withr::defer() general way schedule action end test.30Here’s fix problems previous example using withr: Behind scenes, reversed landscape changes, can try .testthat leans heavily withr make test execution environments reproducible self-contained possible.\ntestthat 3e, testthat::local_reproducible_output() implicitly part test_that() test.local_reproducible_output() temporarily sets various options environment variables values favorable testing, e.g. suppresses colored output, turns fancy quotes, sets console width, sets LC_COLLATE = \"C\".\nUsually, can just passively enjoy benefits local_reproducible_output().\nmay want call explicitly replicating test results interactively want override default settings specific test.","code":"\nexists(\"thingy\")\n#> [1] FALSE\n\ntest_that(\"thingy exists\", {\n  thingy <- \"thingy\"\n  expect_true(exists(thingy))\n})\n#> Test passed 🥳\n\nexists(\"thingy\")\n#> [1] FALSE\ngrep(\"jsonlite\", search(), value = TRUE)\n#> character(0)\ngetOption(\"opt_whatever\")\n#> NULL\nSys.getenv(\"envvar_whatever\")\n#> [1] \"\"\n\ntest_that(\"landscape changes leak outside the test\", {\n  library(jsonlite)\n  options(opt_whatever = \"whatever\")\n  Sys.setenv(envvar_whatever = \"whatever\")\n  \n  expect_match(search(), \"jsonlite\", all = FALSE)\n  expect_equal(getOption(\"opt_whatever\"), \"whatever\")\n  expect_equal(Sys.getenv(\"envvar_whatever\"), \"whatever\")\n})\n#> Test passed 🎊\n\ngrep(\"jsonlite\", search(), value = TRUE)\n#> [1] \"package:jsonlite\"\ngetOption(\"opt_whatever\")\n#> [1] \"whatever\"\nSys.getenv(\"envvar_whatever\")\n#> [1] \"whatever\"\ntest_that(\"side-by-side diffs work\", {\n  withr::local_options(width = 20)             # <-- (°_°) look here!\n  expect_snapshot(\n    waldo::compare(c(\"X\", letters), c(letters, \"X\"))\n  )\n})\ngrep(\"jsonlite\", search(), value = TRUE)\n#> character(0)\ngetOption(\"opt_whatever\")\n#> NULL\nSys.getenv(\"envvar_whatever\")\n#> [1] \"\"\n\ntest_that(\"withr makes landscape changes local to a test\", {\n  withr::local_package(\"jsonlite\")\n  withr::local_options(opt_whatever = \"whatever\")\n  withr::local_envvar(envvar_whatever = \"whatever\")\n  \n  expect_match(search(), \"jsonlite\", all = FALSE)\n  expect_equal(getOption(\"opt_whatever\"), \"whatever\")\n  expect_equal(Sys.getenv(\"envvar_whatever\"), \"whatever\")\n})\n#> Test passed 😀\n\ngrep(\"jsonlite\", search(), value = TRUE)\n#> character(0)\ngetOption(\"opt_whatever\")\n#> NULL\nSys.getenv(\"envvar_whatever\")\n#> [1] \"\"\ntest_that(\"something specific happens\", {\n  local_reproducible_output()     # <-- this happens implicitly\n  \n  # your test code, which might be sensitive to ambient conditions, such as\n  # display width or the number of supported colors\n})"},{"path":"test-design.html","id":"plan-for-test-failure","chapter":"14 Designing your test suite","heading":"14.2.3 Plan for test failure","text":"regret inform quality time spend tests inexplicably failing.purest form, automating testing consists three activities: writing tests, running tests, reacting test failures….Remember tests often revisited something breaks.\ncalled fix broken test never seen , thankful someone took time make easy understand.\nCode read far written, make sure write test ’d like read!book Software Engineering Google, Chapter 11Most us don’t work code base size Google.\neven team one, tests wrote six months ago might well written someone else.\nEspecially failing.reverse dependency checks, often involving hundreds thousands CRAN packages, inspect test failures determine changes packages blame.\nresult, regularly engage failing tests people’s packages, leaves us lots opinions practices create unnecessary testing pain.Test troubleshooting nirvana looks like : fresh R session, can devtools::load_all() immediately run individual test walk line--line.\nneed hunt around setup code run manually first, found elsewhere test file perhaps different file altogether.\nTest-related code lives unconventional location causes extra self-inflicted pain least need .Consider extreme abstract example test difficult troubleshoot due implicit dependencies free-range code:test much easier drop dependencies invoked normal way, .e. via ::, test objects created inline:test self-sufficient.\ncode inside { ... } explicitly creates necessary objects conditions makes explicit calls helper functions.\ntest doesn’t rely objects dependencies happen ambiently available.Self-sufficient, self-contained tests win-win: literally safer design tests way also makes tests much easier humans troubleshoot later.","code":"\n# dozens or hundreds of lines of top-level code, interspersed with other tests,\n# which you must read and selectively execute\n\ntest_that(\"f() works\", {\n  x <- function_from_some_dependency(object_with_unknown_origin)\n  expect_equal(f(x), 2.5)\n})\n# dozens or hundreds of lines of self-sufficient, self-contained tests,\n# all of which you can safely ignore!\n\ntest_that(\"f() works\", {\n  useful_thing <- ...\n  x <- somePkg::someFunction(useful_thing)\n  expect_equal(f(x), 2.5)\n})"},{"path":"test-design.html","id":"repetition-is-ok","chapter":"14 Designing your test suite","heading":"14.2.4 Repetition is OK","text":"One obvious consequence suggestion minimize code “file scope” tests probably repetition.\n’s OK!\n’re going make controversial recommendation tolerate fair amount duplication test code, .e. can relax DRY (“don’t repeat ”) tendencies.Keep reader test function.\nGood production code well-factored; good test code obvious.\n… think make problem obvious test fails.blog post Good Developers Write Bad Unit TestsHere’s toy example make things concrete.real life, useful_thing usually complicated object somehow feels burdensome instantiate.\nNotice useful_thing <- 3 appears place.\nConventional wisdom says DRY code .\n’s tempting just move useful_thing’s definition outside tests:really think first form, repetition, often better choice.point, many readers might thinking “code might repeat much longer 1 line!”.\ndescribe use test fixtures.\ncan often reduce complicated situations back something resembles simple example.","code":"\ntest_that(\"multiplication works\", {\n  useful_thing <- 3\n  expect_equal(2 * useful_thing, 6)\n})\n#> Test passed 🥇\n\ntest_that(\"subtraction works\", {\n  useful_thing <- 3\n  expect_equal(5 - useful_thing, 2)\n})\n#> Test passed 🎉\nuseful_thing <- 3\n\ntest_that(\"multiplication works\", {\n  expect_equal(2 * useful_thing, 6)\n})\n#> Test passed 🎉\n\ntest_that(\"subtraction works\", {\n  expect_equal(5 - useful_thing, 2)\n})\n#> Test passed 🎊"},{"path":"test-design.html","id":"remove-tension-between-interactive-and-automated-testing","chapter":"14 Designing your test suite","heading":"14.2.5 Remove tension between interactive and automated testing","text":"test code executed two different settings:Interactive test development maintenance, includes tasks like:\nInitial test creation\nModifying tests adapt change\nDebugging test failure\nInitial test creationModifying tests adapt changeDebugging test failureAutomated test runs, accomplished functions :\nSingle file: devtools::test_active_file(), testthat::test_file()\nWhole package: devtools::test(), devtools::check()\nSingle file: devtools::test_active_file(), testthat::test_file()Whole package: devtools::test(), devtools::check()Automated testing whole package takes priority.\nultimately whole point tests.\nHowever, interactive experience clearly important humans work.\nTherefore ’s important find pleasant workflow, also ensure don’t rig anything interactive convenience actually compromises health test suite.two modes test-running conflict .\nperceive tension two modes, can indicate ’re taking full advantage testthat’s features way ’s designed work devtools::load_all().working tests, use load_all(), just like working R/.\ndefault, load_all() things:Simulates re-building, re-installing, re-loading package.Makes everything package’s namespace available, including unexported functions objects anything ’ve imported another package.Attaches testthat, .e. library(testthat).Runs test helper files, .e. executes test/testthat/helper.R ().eliminates need library() calls tests/testthat/, vast majority R packages.\ninstance library(testthat) clearly longer necessary.\nLikewise, instance attaching one dependencies via library(somePkg) unnecessary.\ntests, need call functions somePkg, just R/.\nimported function namespace, use fun().\n, use somePkg::fun().\n’s fair say library(somePkg) tests rare taking dependency via Depends, .e. almost always better alternative.Unnecessary calls library(somePkg) test files real downside, actually change R landscape.\nlibrary() alters search path.\nmeans circumstances testing may necessarily reflect circumstances package used.\nmakes easier create subtle test bugs, unravel future.One function almost never appear tests/testhat/ source().\nseveral special files official role testthat workflows (see ), mention entire R package machinery, provide better ways make functions, objects, logic available tests.","code":""},{"path":"test-design.html","id":"tests-files-overview","chapter":"14 Designing your test suite","heading":"14.3 Files relevant to testing","text":"review package files especially relevant testing , generally, best practices interacting file system tests.","code":""},{"path":"test-design.html","id":"hiding-in-plain-sight-files-below-r","chapter":"14 Designing your test suite","heading":"14.3.1 Hiding in plain sight: files below R/","text":"important functions ’ll need access tests clearly package!\n’re talking everything ’s defined R/.\nfunctions objects defined package always available testing, regardless whether exported .\ninteractive work, devtools::load_all() takes care .\nautomated testing, taken care internally testthat.implies test helpers can absolutely defined R/ used freely tests.\nmight make sense gather helpers clearly marked file, one :","code":".                              \n├── ...\n└── R\n    ├── ...\n    ├── test-helpers.R\n    ├── test-utils.R\n    ├── utils-testing.R\n    └── ..."},{"path":"test-design.html","id":"teststesthat.r","chapter":"14 Designing your test suite","heading":"14.3.2 tests/testhat.R","text":"Recall initial testthat setup described section 13.4: standard tests/testhat.R file looks like :repeat advice edit tests/testthat.R.\nrun R CMD check (, therefore, devtools::check()), used test-running scenarios (devtools::test() devtools::test_active_file() interactive development).\nattach dependencies library().\nCall tests manner R/.","code":"\nlibrary(testthat)\nlibrary(abcde)\n\ntest_check(\"abcde\")"},{"path":"test-design.html","id":"testthat-helper-files","chapter":"14 Designing your test suite","heading":"14.3.3 Testthat helper files","text":"Another type file always executed load_all() beginning automated testing helper file, defined file tests/testthat/ begins helper.\nHelper files mighty weapon battle eliminate code floating around top-level test files.\nHelper files prime example mean recommend moving code broader scope.\nObjects functions defined helper file available tests.just one file, probably name helper.R.\norganize helpers multiple files, include suffix additional info.\nexamples files might look:Many developers use helper files define custom test helper functions, describe detail .\nCompared defining helpers R/, people find tests/testthat/helper.R makes clear utilities specifically testing package.\nlocation also feels natural helpers rely testthat functions.helper file also good location setup code needed side effects.\ncase tests/testthat/helper.R clearly appropriate file R/.\nexample, API-wrapping package, helper.R good place (attempt ) authenticate testing credentials.","code":".                              \n├── ...\n└── tests\n    ├── testthat\n    │   ├── helper.R\n    │   ├── helper-blah.R\n    │   ├── helper-foo.R    \n    │   ├── test-foofy.R\n    │   └── (more test files)\n    └── testthat.R"},{"path":"test-design.html","id":"testthat-setup-files","chapter":"14 Designing your test suite","heading":"14.3.4 Testthat setup files","text":"Testthat one special file type: setup files, defined file test/testthat/ begins setup.\n’s example might look:setup file handled almost exactly like helper file, two big differences:Setup files executed devtools::load_all().Setup files often contain corresponding teardown code.Setup files good global test setup tailored test execution non-interactive remote environments.\nexample, might turn behaviour ’s aimed interactive user, messaging writing clipboard.setup reversed test execution, also include necessary teardown code setup.R31.\nrecommend maintaining teardown code alongside setup code, setup.R, makes easier ensure stay sync.\nartificial environment teardown_env() exists magical handle use withr::defer() withr::local_*() / withr::with_*().’s setup.R example reprex package, turn clipboard HTML preview functionality testing:Since just modifying options , can even concise use pre-built function withr::local_options() pass teardown_env() .local_envir:","code":".                              \n├── ...\n└── tests\n    ├── testthat\n    │   ├── helper.R\n    │   ├── setup.R\n    │   ├── test-foofy.R\n    │   └── (more test files)\n    └── testthat.R\nop <- options(reprex.clipboard = FALSE, reprex.html_preview = FALSE)\n\nwithr::defer(options(op), teardown_env())\nwithr::local_options(\n  list(reprex.clipboard = FALSE, reprex.html_preview = FALSE),\n  .local_envir = teardown_env()\n)"},{"path":"test-design.html","id":"files-ignored-by-testthat","chapter":"14 Designing your test suite","heading":"14.3.5 Files ignored by testthat","text":"testthat automatically executes files true:File direct child tests/testthat/File name starts one specific strings:\nhelper\nsetup\ntest\nhelpersetuptestIt fine files directories tests/testthat/, testthat won’t automatically anything (_snaps directory, holds snapshots).","code":""},{"path":"test-design.html","id":"storing-test-data","chapter":"14 Designing your test suite","heading":"14.3.6 Storing test data","text":"Many packages contain files hold test data.\nstored?\nbest location somewhere tests/testthat/, often subdirectory, keep things neat.\nexample, useful_thing1.rds useful_thing2.rds hold objects used test files., tests, use testthat::test_path() build robust filepath files.testthat::test_path() extremely handy, produces correct path two important modes test execution:Interactive test development maintenance, working directory presumably set top-level package.Automated testing, working directory usually set something tests/.","code":".\n├── ...\n└── tests\n    ├── testthat\n    │   ├── fixtures\n    │   │   ├── make-useful-things.R\n    │   │   ├── useful_thing1.rds\n    │   │   └── useful_thing2.rds\n    │   ├── helper.R\n    │   ├── setup.R\n    │   └── (all the test files)\n    └── testthat.R\ntest_that(\"foofy() does this\", {\n  useful_thing <- readRDS(test_path(\"fixtures\", \"useful_thing1.rds\"))\n  # ...\n})"},{"path":"test-design.html","id":"tests-files-where-write","chapter":"14 Designing your test suite","heading":"14.3.7 Where to write files during testing","text":"’s easy avoid writing files tests, definitely best plan.\nmany times really must write files.write files inside session temp directory. write package’s tests/ directory.\nwrite current working directory.\nwrite user’s home directory.\nEven though writing session temp directory, still clean , .e. delete files ’ve written.package developers don’t want hear , sounds like hassle.\n’s burdensome get familiar techniques build new habits.\nhigh level file system discipline also eliminates various testing bugs absolutely make CRAN life run smoothly.test roxygen2 demonstrates everything recommend:withr::local_tempfile() creates file within session temp directory whose lifetime tied “local” environment – case, execution environment individual test.\nwrapper around base::tempfile() passes, e.g., pattern argument , control file name.\ncan optionally provide lines populate file creation time can write file usual ways subsequent steps.\nFinally, special effort part, temporary file automatically deleted end test.Sometimes need even control file name.\ncase, can use withr::local_tempdir() create self-deleting temporary directory write intentionally-named files inside directory.","code":"\ntest_that(\"can read from file name with utf-8 path\", {\n  path <- withr::local_tempfile(\n    pattern = \"Universit\\u00e0-\",\n    lines = c(\"#' @include foo.R\", NULL)\n  )\n  expect_equal(find_includes(path), \"foo.R\")\n})"},{"path":"testing-advanced.html","id":"testing-advanced","chapter":"15 Advanced testing techniques","heading":"15 Advanced testing techniques","text":"test files include library() calls.\nalso explicitly request testthat edition 3, real package declared DESCRIPTION.","code":"\nlibrary(testthat)\nlocal_edition(3)"},{"path":"testing-advanced.html","id":"test-fixtures","chapter":"15 Advanced testing techniques","heading":"15.1 Test fixtures","text":"’s practical make test entirely self-sufficient, prefer making necessary object, logic, conditions available structured, explicit way.\n’s pre-existing term software engineering: test fixture.test fixture something used consistently test item, device, piece software.\n— WikipediaThe main idea need make easy obvious possible arrange world state conducive testing.\ndescribe several specific solutions problem:Put repeated code constructor-type helper function. Memoise , construction demonstrably slow.repeated code side effects, write custom local_*() function ’s needed clean afterwards.approaches slow awkward thing need fairly stable, save static file load .","code":""},{"path":"testing-advanced.html","id":"create-useful_things-with-a-helper-function","chapter":"15 Advanced testing techniques","heading":"15.1.1 Create useful_things with a helper function","text":"fiddly create useful_thing?\ntake several lines code, much time memory?\ncase, write helper function create useful_thing -demand:call helper affected tests:new_useful_thing() helper defined?\ncomes back outlined section 14.3.\nTest helpers can defined R/, just like internal utility package.\nAnother popular location test helper file, e.g. tests/testthat/helper.R.\nkey feature options helpers made available interactive maintenance via devtools::load_all().’s fiddly costly create useful_thing, helper function even use memoisation avoid unnecessary re-computation.\nhelper like new_useful_thing(), often discover uses beyond testing, e.g. behind--scenes vignette.\nSometimes even realize just define R/ export document , can use freely documentation tests.","code":"\nnew_useful_thing <- function() {\n  # your fiddly code to create a useful_thing goes here\n}\ntest_that(\"foofy() does this\", {\n  useful_thing1 <- new_useful_thing()\n  expect_equal(foofy(useful_thing1, x = \"this\"), EXPECTED_FOOFY_OUTPUT)\n})\n\ntest_that(\"foofy() does that\", {\n  useful_thing2 <- new_useful_thing()\n  expect_equal(foofy(useful_thing2, x = \"that\"), EXPECTED_FOOFY_OUTPUT)\n})"},{"path":"testing-advanced.html","id":"create-and-destroy-a-local-useful_thing","chapter":"15 Advanced testing techniques","heading":"15.1.2 Create (and destroy) a “local” useful_thing","text":"far, example useful_thing regular R object, cleaned-automatically end test.\ncreation useful_thing side effect local file system, remote resource, R session options, environment variables, like?\nhelper function create useful_thing clean afterwards.\nInstead simple new_useful_thing() constructor, ’ll write customized function style withr’s local_*() functions:Use tests like :local_useful_thing() helper defined?\nadvice given new_useful_thing() applies: define R/ test helper file.learn writing custom helpers like local_useful_thing(), see testthat vignette test fixtures.","code":"\nlocal_useful_thing <- function(..., env = parent.frame()) {\n  # your fiddly code to create a useful_thing goes here\n  withr::defer(\n    # your fiddly code to clean up after a useful_thing goes here\n    envir = env\n  )\n}\ntest_that(\"foofy() does this\", {\n  useful_thing1 <- local_useful_thing()\n  expect_equal(foofy(useful_thing1, x = \"this\"), EXPECTED_FOOFY_OUTPUT)\n})\n\ntest_that(\"foofy() does that\", {\n  useful_thing2 <- local_useful_thing()\n  expect_equal(foofy(useful_thing2, x = \"that\"), EXPECTED_FOOFY_OUTPUT)\n})"},{"path":"testing-advanced.html","id":"store-a-concrete-useful_thing-persistently","chapter":"15 Advanced testing techniques","heading":"15.1.3 Store a concrete useful_thing persistently","text":"useful_thing costly create, terms time memory, maybe don’t actually need re-create test run.\nmake useful_thing , store static test fixture, load tests need .\n’s sketch look:Now can revisit file listing earlier, addressed exactly scenario:shows static test files stored tests/testthat/fixtures/, also notice companion R script, make-useful-things.R.\ndata analysis, know things script run .\nRefinement iteration inevitable.\nalso holds true test objects like useful_thing1.rds.\nhighly recommend saving R code used create test objects, can re-created needed.","code":"\ntest_that(\"foofy() does this\", {\n  useful_thing1 <- readRDS(test_path(\"fixtures\", \"useful_thing.rds\"))\n  expect_equal(foofy(useful_thing1, x = \"this\"), EXPECTED_FOOFY_OUTPUT)\n})\n\ntest_that(\"foofy() does that\", {\n  useful_thing2 <- readRDS(test_path(\"fixtures\", \"useful_thing.rds\"))\n  expect_equal(foofy(useful_thing2, x = \"that\"), EXPECTED_FOOFY_OUTPUT)\n}).\n├── ...\n└── tests\n    ├── testthat\n    │   ├── fixtures\n    │   │   ├── make-useful-things.R\n    │   │   ├── useful_thing1.rds\n    │   │   └── useful_thing2.rds\n    │   ├── helper.R\n    │   ├── setup.R\n    │   └── (all the test files)\n    └── testthat.R"},{"path":"testing-advanced.html","id":"building-your-own-testing-tools","chapter":"15 Advanced testing techniques","heading":"15.2 Building your own testing tools","text":"Let’s return topic duplication test code.\n’ve encouraged higher tolerance repetition test code, name making tests obvious.\n’s still limit much repetition tolerate.\n’ve covered techniques loading static objects test_path(), writing constructor like new_useful_thing(), implementing test fixture like local_useful_thing().\neven types test helpers can useful certain situations.","code":""},{"path":"testing-advanced.html","id":"helper-defined-inside-a-test","chapter":"15 Advanced testing techniques","heading":"15.2.1 Helper defined inside a test","text":"Consider test str_trunc() function stringr:’s lot repetition , increases chance copy / paste errors generally makes eyes glaze .\nSometimes ’s nice create hyper-local helper, inside test.\n’s test actually looks stringrA hyper-local helper like trunc() particularly useful allows fit important business expectation one line.\nexpectations can read almost like table actual vs. expected, set related use cases.\n, ’s easy watch result change truncate input right, left, center.Note technique used extreme moderation.\nhelper like trunc() yet another place can introduce bug, ’s best keep helpers extremely short simple.","code":"\n# from stringr (hypothetically)\ntest_that(\"truncations work for all sides\", {\n  expect_equal(\n    str_trunc(\"This string is moderately long\", width = 20, side = \"right\"),\n    \"This string is mo...\"\n  )\n  expect_equal(\n    str_trunc(\"This string is moderately long\", width = 20, side = \"left\"),\n    \"...s moderately long\"\n  )\n  expect_equal(\n    str_trunc(\"This string is moderately long\", width = 20, side = \"center\"),\n    \"This stri...ely long\"\n  )\n})\n# from stringr (actually)\ntest_that(\"truncations work for all sides\", {\n\n  trunc <- function(direction) str_trunc(\n    \"This string is moderately long\",\n    direction,\n    width = 20\n  )\n\n  expect_equal(trunc(\"right\"),   \"This string is mo...\")\n  expect_equal(trunc(\"left\"),    \"...s moderately long\")\n  expect_equal(trunc(\"center\"),  \"This stri...ely long\")\n})"},{"path":"testing-advanced.html","id":"custom-expectatations","chapter":"15 Advanced testing techniques","heading":"15.2.2 Custom expectatations","text":"complicated helper feels necessary, ’s good time reflect .\n’s fussy get position test function, sign ’s also fussy use function.\nneed refactor ?\nfunction seems sound, probably need use formal helper, defined outside individual test, described earlier.One specific type helper might want create custom expectation.\ntwo simple ones usethis:expect_usethis_error() checks error \"usethis_error\" class.\nexpect_proj_file() simple wrapper around file_exists() searches file current project.\nsimple functions, sheer amount repetition expressiveness names makes feel justified.somewhat involved make proper custom expectation, .e. one behaves like expectations built testthat.\nrefer Custom expectations vignette wish learn .Finally, can handy know testthat makes specific information available ’s running:environment variable TESTTHAT set \"true\".\ntestthat::is_testing() shortcut:\n\nis_testing <- function() {\n  Sys.getenv(\"TESTTHAT_PKG\")\n}environment variable TESTTHAT set \"true\".\ntestthat::is_testing() shortcut:package--test available environment variable TESTTHAT_PKG testthat::testing_package() shortcut:\n\ntesting_package <- function() {\n  Sys.getenv(\"TESTTHAT_PKG\")\n}package--test available environment variable TESTTHAT_PKG testthat::testing_package() shortcut:situations, may want exploit information without taking run-time dependency testthat.\ncase, just inline source functions directly package.","code":"\nexpect_usethis_error <- function(...) {\n  expect_error(..., class = \"usethis_error\")\n}\n\nexpect_proj_file <- function(...) {\n  expect_true(file_exists(proj_path(...)))\n}\nis_testing <- function() {\n  Sys.getenv(\"TESTTHAT_PKG\")\n}\ntesting_package <- function() {\n  Sys.getenv(\"TESTTHAT_PKG\")\n}"},{"path":"testing-advanced.html","id":"when-testing-gets-hard","chapter":"15 Advanced testing techniques","heading":"15.3 When testing gets hard","text":"Despite techniques ’ve covered far, remain situations still feels difficult write tests.\nsection, review ways deal challenging situations:Skipping test certain situationsMocking external serviceDealing secrets","code":""},{"path":"testing-advanced.html","id":"tests-skipping","chapter":"15 Advanced testing techniques","heading":"15.3.1 Skipping a test","text":"Sometimes ’s impossible perform test - may internet connection may access necessary credentials.\nUnfortunately, another likely reason follows simple rule: platforms use test code, likely won’t able run tests, time.\nshort, times , instead getting failure, just want skip test.","code":""},{"path":"testing-advanced.html","id":"testthatskip","chapter":"15 Advanced testing techniques","heading":"15.3.1.1 testthat::skip()","text":"use testthat::skip() write hypothetical custom skipper, skip_if_no_api():skip_if_no_api() yet another example test helper advice already given define applies .skip()s associated reasons reported inline tests executed also indicated clearly summary:Something like skip_if_no_api() likely appear many times test suite.\nanother occasion tempting DRY things , hoisting skip() top-level file.\nHowever, still lean towards calling skip_if_no_api() test ’s needed.Within realm top-level code test files, skip() beginning test file one benign situations.\ntest file fit entirely screen, creates implicit yet easy--miss connection skip() individual tests.","code":"\nskip_if_no_api() <- function() {\n  if (api_unavailable()) {\n    skip(\"API not available\")\n  }\n}\n\ntest_that(\"foo api returns bar when given baz\", {\n  skip_if_no_api()\n  ...\n})\ndevtools::test()\n#> ℹ Loading abcde\n#> ℹ Testing abcde\n#> ✔ | F W S  OK | Context\n#> ✔ |         2 | blarg\n#> ✔ |     1   2 | foofy\n#> ────────────────────────────────────────────────────────────────────────────────\n#> Skip (test-foofy.R:6:3): foo api returns bar when given baz\n#> Reason: API not available\n#> ────────────────────────────────────────────────────────────────────────────────\n#> ✔ |         0 | yo                                                              \n#> ══ Results ═════════════════════════════════════════════════════════════════════\n#> ── Skipped tests  ──────────────────────────────────────────────────────────────\n#> • API not available (1)\n#> \n#> [ FAIL 0 | WARN 0 | SKIP 1 | PASS 4 ]\n#> \n#> 🥳\n# we prefer this:\ntest_that(\"foo api returns bar when given baz\", {\n  skip_if_no_api()\n  ...\n})\n\ntest_that(\"foo api returns an errors when given qux\", {\n  skip_if_no_api()\n  ...\n})\n\n# over this:\nskip_if_no_api()\n\ntest_that(\"foo api returns bar when given baz\", {...})\n\ntest_that(\"foo api returns an errors when given qux\", {...})"},{"path":"testing-advanced.html","id":"built-in-skip-functions","chapter":"15 Advanced testing techniques","heading":"15.3.1.2 Built-in skip() functions","text":"Similar testthat’s built-expectations, family skip() functions anticipate common situations.\nfunctions often relieve need write custom skipper.\nexamples useful skip() functions:","code":"\ntest_that(\"foo api returns bar when given baz\", {\n  skip_if(api_unavailable(), \"API not available\")\n  ...\n})\ntest_that(\"foo api returns bar when given baz\", {\n  skip_if_not(api_available(), \"API not available\")\n  ...\n})\n\nskip_if_not_installed(\"sp\")\nskip_if_not_installed(\"stringi\", \"1.2.2\")\n\nskip_if_offline()\nskip_on_cran()\nskip_on_os(\"windows\")"},{"path":"testing-advanced.html","id":"dangers-of-skipping","chapter":"15 Advanced testing techniques","heading":"15.3.1.3 Dangers of skipping","text":"One challenge skips currently completely invisible CI — automatically skip many tests, ’s easy fool tests passing fact ’re just skipped!\nideal world, CI/CD make easy see many tests skipped changes time.2022-06-01: Recent changes GitHub Actions mean likely better test reporting second edition book published. Stay tuned!’s good practice regularly dig R CMD check results, especially CI, make sure skips expect.\ntends something learn experience.","code":""},{"path":"testing-advanced.html","id":"mocking","chapter":"15 Advanced testing techniques","heading":"15.3.2 Mocking","text":"practice known mocking replace something ’s complicated unreliable control something simpler, ’s fully within control.\nUsually mocking external service, REST API, function reports something session state, whether session interactive.classic application mocking context package wraps external API.\norder test functions, technically need make live call API get response, process.\nAPI requires authentication ’s somewhat flaky occasional downtime?\ncan productive just pretend call API , instead, test code control processing pre-recorded response actual API.main advice mocking avoid can.\nindictment mocking, just realistic assessment mocking introduces new complexity always justified payoffs.Since R packages need full-fledged mocking, cover .\nInstead ’ll point packages represent state---art mocking R today:mockery: https://github.com/r-lib/mockerymockr: https://krlmlr.github.io/mockr/httptest: https://enpiar.com/r/httptest/httptest2: https://enpiar.com/httptest2/webfakes: https://webfakes.r-lib.org","code":""},{"path":"testing-advanced.html","id":"secrets","chapter":"15 Advanced testing techniques","heading":"15.3.3 Secrets","text":"Another common challenge packages wrap external service need manage credentials.\nSpecifically, likely need provide set test credentials fully test package.main advice design package large parts can tested without live, authenticated assess external service.course, still want able test package actual service wraps, environments support secure environment variables.\nSince also specialized topic, won’t go detail .\nInstead refer Wrapping APIs vignette httr2 package, offers substantial support secret management.","code":""},{"path":"testing-advanced.html","id":"special-considerations-for-cran-packages","chapter":"15 Advanced testing techniques","heading":"15.4 Special considerations for CRAN packages","text":"","code":""},{"path":"testing-advanced.html","id":"tests-cran-flavors-services","chapter":"15 Advanced testing techniques","heading":"15.4.1 CRAN check flavors and related services","text":"section likely move different location, revise expand content elsewhere book R CMD check package release. can gestate .CRAN runs R CMD check contributed packages regular basis, multiple platforms call “flavors”.\ncheck includes, limited , testthat tests.\nCRAN’s check flavors almost certainly include platforms preferred development environment(s), must proactively plan ahead want tests pass .can see CRAN’s current check flavors : https://cran.r-project.org/web/checks/check_flavors.html.\nvarious combinations :Operating system CPU: Windows, macOS (x86_64, arm64), Linux (various distributions)R version: r-devel, r-release, r-oldrelC, C++, FORTRAN compilersLocale, sense LC_CTYPE environment variable (human language use character encoding)impractical individual package developers personally maintain testing platforms.\nInstead, turn various community- CRAN-maintained resources test packages.\norder often use :GitHub Actions (GHA).\nMany R package developers host source code GitHub use GHA check package, e.g., every time push.\nusethis package offers several functions help configure GHA workflows checking package.\nappropriate level checking depends nature user base likely package behave differently across flavors (e.g. contain compiled code?)\nusethis::use_github_action_check_release(): entry-level, bare-minimum workflow checks latest release R Linux.\nusethis::use_github_action_check_standard(): Covers three major operating systems released development versions R. good choice package (aspires ) CRAN Bioconductor.\ntidyverse/r-lib team uses even extensive check matrix, overkill packages. ’s necessary case order meet commitment support current version, development version, four previous versions R.\nGitHub Actions (GHA).\nMany R package developers host source code GitHub use GHA check package, e.g., every time push.usethis package offers several functions help configure GHA workflows checking package.\nappropriate level checking depends nature user base likely package behave differently across flavors (e.g. contain compiled code?)usethis::use_github_action_check_release(): entry-level, bare-minimum workflow checks latest release R Linux.usethis::use_github_action_check_standard(): Covers three major operating systems released development versions R. good choice package (aspires ) CRAN Bioconductor.tidyverse/r-lib team uses even extensive check matrix, overkill packages. ’s necessary case order meet commitment support current version, development version, four previous versions R.R-hub builder (R-hub).\nservice supported R Consortium package developers can submit package checks replicate various CRAN check flavors.\nuseful ’re due diligence leading CRAN submission.\ncan use R-hub via web interface (https://builder.r-hub.io) , recommend, rhub R package.\nrhub::check_for_cran() function morally similar GHA workflow configured usethis::use_github_action_check_standard(), .e. ’s good solution typical package heading CRAN.\nrhub many functions accessing individual check flavors.R-hub builder (R-hub).\nservice supported R Consortium package developers can submit package checks replicate various CRAN check flavors.\nuseful ’re due diligence leading CRAN submission.can use R-hub via web interface (https://builder.r-hub.io) , recommend, rhub R package.rhub::check_for_cran() function morally similar GHA workflow configured usethis::use_github_action_check_standard(), .e. ’s good solution typical package heading CRAN.\nrhub many functions accessing individual check flavors.Win-Builder service maintained CRAN personnel build Windows binaries CRAN packages.\nuse similar way R-hub, .e. ’s good check run preparing CRAN submission.\n(Win-Builder basically inspiration R-hub, .e. Win-builder convenient service makes sense extend flavors.)\nWin-Builder homepage (https://win-builder.r-project.org) explains upload package via ftp, recommend using convenience functions devtools::check_win_release() friends.Win-Builder service maintained CRAN personnel build Windows binaries CRAN packages.\nuse similar way R-hub, .e. ’s good check run preparing CRAN submission.\n(Win-Builder basically inspiration R-hub, .e. Win-builder convenient service makes sense extend flavors.)Win-Builder homepage (https://win-builder.r-project.org) explains upload package via ftp, recommend using convenience functions devtools::check_win_release() friends.macOS builder service maintained CRAN personnel build macOS binaries CRAN packages.\nrelatively new addition list checks packages “setup available packages CRAN M1 build machine”.\ncan submit package using web interface (https://mac.r-project.org/macbuilder/submit.html) devtools::check_mac_release().macOS builder service maintained CRAN personnel build macOS binaries CRAN packages.\nrelatively new addition list checks packages “setup available packages CRAN M1 build machine”.can submit package using web interface (https://mac.r-project.org/macbuilder/submit.html) devtools::check_mac_release().","code":""},{"path":"testing-advanced.html","id":"testing-on-cran","chapter":"15 Advanced testing techniques","heading":"15.4.2 Testing on CRAN","text":"need pass tests CRAN’s flavors thing need think .\nconsiderations influence write tests (whether) run CRAN.\npackage runs afoul CRAN Repository Policy (https://cran.r-project.org/web/packages/policies.html), test suite often culprit (although always).specific test simply isn’t appropriate run CRAN, include skip_on_cran() start.hood, skip_on_cran() consults NOT_CRAN environment variable.\ntests run NOT_CRAN explicitly defined \"true\".\nvariable set devtools testthat, allowing tests run environments expect success (can tolerate troubleshoot occasional failure).particular, GitHub Actions workflows recommend elsewhere run tests NOT_CRAN = \"true\" call.\ncertain types functionality, practical way test CRAN checks, GHA equivalent continuous integration service, best method quality assurance.even rare cases makes sense maintain tests outside package altogether.\ntidymodels team uses strategy integration-type tests whole ecosystem impossible host inside individual CRAN package.following subsections enumerate thing keep mind maximum success testing CRAN.","code":"\ntest_that(\"some long-running thing works\", {\n  skip_on_cran()\n  # test code that can potentially take \"a while\" to run  \n})"},{"path":"testing-advanced.html","id":"speed","chapter":"15 Advanced testing techniques","heading":"15.4.2.1 Speed","text":"tests need run relatively quickly - ideally, less minute, total.\nUse skip_on_cran() test unavoidably long-running.","code":""},{"path":"testing-advanced.html","id":"reproducibility","chapter":"15 Advanced testing techniques","heading":"15.4.2.2 Reproducibility","text":"careful testing things likely variable CRAN machines.\n’s risky test long something takes (CRAN machines often heavily loaded) test parallel code (CRAN runs multiple package tests parallel, multiple cores always available).\nNumerical precision can also vary across platforms, use expect_equal() unless specific reason using expect_identical().","code":""},{"path":"testing-advanced.html","id":"flaky-tests","chapter":"15 Advanced testing techniques","heading":"15.4.2.3 Flaky tests","text":"Due scale CRAN checks packages, basically latitude test ’s “just flaky”, .e. sometimes fails incidental reasons.\nCRAN process package’s test results way , can inspect failure exercise human judgment concerning .’s probably good idea eliminate flaky tests, just sake!\nvaluable, well-written tests prone occasional nuisance failure, definitely put skip_on_cran() start.classic example test accesses website web API.\nGiven web resource world experience occasional downtime, ’s best let tests run CRAN.\nCRAN Repository Policy says:Packages use Internet resources fail gracefully informative message resource available changed (give check warning error).Often making failure “graceful” run counter behaviour actually want practice, .e. want user get error request fails.\nusually practical test functionality elsewhere.Recall snapshot tests, default, also skipped CRAN.\ntypically use tests monitor, e.g., various informational messages look.\nSlight changes message formatting something want alerted , indicate major defect package.\nmotivation default skip_on_cran() behaviour snapshot tests.Finally, flaky tests cause problems maintainers dependencies.\npackages depend updated, CRAN runs R CMD check reverse dependencies, including package.\npackage flaky tests, package can reason another package clear CRAN’s incoming checks can delay release.","code":""},{"path":"testing-advanced.html","id":"process-and-file-system-hygiene","chapter":"15 Advanced testing techniques","heading":"15.4.2.4 Process and file system hygiene","text":"section 14.3.7, urged write session temp directory clean .\npractice makes test suite much maintainable predictable.\npackages (aspire ) CRAN, absolutely required per CRAN repository policy:Packages write user’s home filespace (including clipboards), anywhere else file system apart R session’s temporary directory (installation location pointed TMPDIR: usage cleaned )….\nLimited exceptions may allowed interactive sessions package obtains confirmation user.Similarly, make effort hygienic respect processes launch:Packages start external software (PDF viewers browsers) examples tests unless specific instance software explicitly closed afterwards.Accessing clipboard perfect storm potentially runs afoul guidelines, clipboard considered part user’s home filespace , Linux, can launch external process (e.g. xsel xclip).\nTherefore best turn clipboard functionality tests (ensure , authentic usage, user clearly opting-).","code":""},{"path":"man.html","id":"man","chapter":"16 Function documentation","heading":"16 Function documentation","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"man.html","id":"introduction-11","chapter":"16 Function documentation","heading":"16.1 Introduction","text":"Documentation one important aspects good package: without , users won’t know use package!\nDocumentation also useful future-(remember functions supposed ) developers extending package.chapter, ’ll learn function documentation, accessed ? help().\nFunction documentation works like dictionary: ’s helpful want know function , won’t help find right function new situation.\n’s one jobs vignettes, ’ll learn next chapter.\nchapter ’ll focus documenting functions, ideas apply documenting datasets, classes generics, packages.Base R provides standard way documenting functions package: write .Rd files man/ directory.\nfiles use custom syntax, loosely based LaTeX, rendered HTML, plain text, pdf viewing.\ngoing use files directly.\nInstead, ’ll use roxygen2 package generate specially formatted comments.\nadvantages using roxygen2:Code documentation intermingled modify code, ’s easy remember also update documentation.Code documentation intermingled modify code, ’s easy remember also update documentation.can write using markdown, rather remember another text formatting syntax.can write using markdown, rather remember another text formatting syntax.roxygen2 dynamically inspects objects documents, can skip boilerplate ’d otherwise need write hand.roxygen2 dynamically inspects objects documents, can skip boilerplate ’d otherwise need write hand.abstracts provides number tools sharing text documentation topics even topics vignettes.abstracts provides number tools sharing text documentation topics even topics vignettes.’ll see files work git, ’ll otherwise rarely need look .","code":""},{"path":"man.html","id":"roxygen2-basics","chapter":"16 Function documentation","heading":"16.2 roxygen2 basics","text":"get started, ’ll work basic roxygen2 workflow discuss overall structure roxygen2 comments organised blocks tags.","code":""},{"path":"man.html","id":"man-workflow","chapter":"16 Function documentation","heading":"16.2.1 The documentation workflow","text":"documentation workflow starts add roxygen comments, comments start ', source file.\n’s simple example:’ll press Ctrl/Cmd + Shift + D (run devtools::document()) run roxygen2::roxygenise() generates man/add.Rd looks like :’re familiar LaTeX, look familiar since .Rd format loosely based , can read R extensions.\n’ll commit file git (since ’s R requires make interactive documentation work), typically won’t otherwise need look .use ?add, help(\"add\"), example(\"add\"), R looks .Rd file containing \\alias{\"add\"}.\nparses file, converts HTML displays .\n’s result looks like RStudio:preview development documentation, devtools uses tricks override usual help functions know look source packages.\nactivate tricks, need run devtools::load_all() .\ndevelopment documentation doesn’t appear, may need load package first.summarize, four steps basic roxygen2 workflow:Add roxygen2 comments .R files.Add roxygen2 comments .R files.Run press Ctrl/Cmd + Shift + D devtools::document() convert roxygen comments .Rd files.Run press Ctrl/Cmd + Shift + D devtools::document() convert roxygen comments .Rd files.Preview documentation ?.Preview documentation ?.Rinse repeat documentation looks way want.Rinse repeat documentation looks way want.","code":"\n#' Add together two numbers\n#' \n#' @param x A number.\n#' @param y A number.\n#' @return The sum of `x` and `y`.\n#' @examples\n#' add(1, 1)\n#' add(10, 1)\nadd <- function(x, y) {\n  x + y\n}% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/across.R\n\\name{add}\n\\alias{add}\n\\title{Add together two numbers}\n\\usage{\nadd(x, y)\n}\n\\arguments{\n\\item{x}{A number.}\n\n\\item{y}{A number.}\n}\n\\value{\nThe sum of \\code{x} and \\code{y}.\n}\n\\description{\nAdd together two numbers\n}\n\\examples{\nadd(1, 1)\nadd(10, 1)\n}"},{"path":"man.html","id":"roxygen-comments","chapter":"16 Function documentation","heading":"16.2.2 roxygen2 comments, blocks, and tags","text":"Now understand basic workflow, lets talk little roxygen2’s syntax.\nroxygen2 comments start #' set roxygen2 comments preceding function called block.\nBlocks broken tags, look like @tagName tagValue.\ncontent tag extends end tag name start next tag32.\nblock can contain text first tag called introduction. default, roxygen2 block generate single documentation topic, corresponding one .Rd. file man directory.Throughout chapter ’m going show roxygen2 comments real tidyverse packages, focusing stringr since functions tend fairly straightforward leading documentation easier excerpt.\n’s simple example start using documentation stringr::str_unique():introduction includes title (“Remove duplicated strings”) basic description function .\n’s followed five tags, two @params, one @returns, one @seealso, one @example, one @export.\nNote ’ve wrapped line roxygen2 block 80 characters wide, match wrapping code, ’ve indented second subsequent lines long @param tag ’s easier scan.\ncan get documentation style advice tidyverse style guide.following sections work important tags.\n’ll start introduction provides title, description, details, ’ll cover inputs (function arguments), outputs (return value), examples.","code":"\n#' Remove duplicated strings\n#'\n#' `str_unique()` removes duplicated values, with optional control over\n#' how duplication is measured.\n#'\n#' @param string A character vector to return unique entries.\n#' @param ... Other options used to control matching behavior between duplicate\n#'   strings. Passed on to [stringi::stri_opts_collator()].\n#' @returns A character vector.\n#' @seealso [unique()], [stringi::stri_unique()] which this function wraps.\n#' @examples\n#' str_unique(c(\"a\", \"b\", \"c\", \"b\", \"a\"))\n#'\n#' # Use ... to pass additional arguments to stri_unique()\n#' str_unique(c(\"motley\", \"mötley\", \"pinguino\", \"pingüino\"))\n#' str_unique(c(\"motley\", \"mötley\", \"pinguino\", \"pingüino\"), strength = 1)\n#' @export\nstr_unique <- function(string, ...) {\n  ...\n}"},{"path":"man.html","id":"title-description-details","chapter":"16 Function documentation","heading":"16.3 Title, description, details","text":"introduction block provides title, description, , optionally, details, function:title taken first sentence.\ntitle shown various function indexes user see browsing functions.title taken first sentence.\ntitle shown various function indexes user see browsing functions.description taken next paragraph.\ncomes first documentation briefly describe important features function.description taken next paragraph.\ncomes first documentation briefly describe important features function.details taken additional text.\nDetails optional, can length useful want dig deep important aspect function.details taken additional text.\nDetails optional, can length useful want dig deep important aspect function.following sections describe component detail, discuss useful related tags.","code":""},{"path":"man.html","id":"title","chapter":"16 Function documentation","heading":"16.3.1 Title","text":"title written sentence case end full stop.\nfiguring use title, think ’s important consider functions package holistically.\nuser skimming index functions, know function use?\nfunctions common doesn’t need repeated every title?\nunique function highlighted?example, take titles key dplyr functions:mutate(): Create, modify, delete columns.summarise(): Summarise group fewer rows.filter(): Subset rows using column values.select(): Subset columns using names types.arrange(): Arrange rows column values.’ve tried succinctly describe function , making sure describe whether affects rows, columns, groups.\npossible, ’ve tried use synonyms function name title hopefully give folks another chance understand intent function.time wrote , don’t think function titles stringr successful.\nprovide useful negative case study.str_detect(): Detect presence absence pattern string.str_extract(): Extract matching patterns string.str_locate(): Locate position patterns string.str_match(): Extract matched groups string.’s lot repetition (“pattern”, “string”) verb used function name repeated title, don’t understand function already, title seems unlikely help much.\n(hindsight, also seems like function names better chosen.) Hopefully ’ll improved titles time read .","code":""},{"path":"man.html","id":"description-1","chapter":"16 Function documentation","heading":"16.3.2 Description","text":"goal description summarize goal function, usually paragraph.\ncan challenging title function also concise summary function.\n’s often especially hard ’ve just written function purpose seems intuitively obvious ’s hard understand anyone need explanation.’s okay description little duplicative rest documentation; ’s often useful reader see thing expressed two different ways.\n’s little extra work keeping date, extra effort often worth .want use multiple paragraphs structures like bulleted list, can use explicit @description tag.\n’s example stringr::str_like(), mimics LIKE operator SQL:can also use explicit @title @details tags needed, don’t generally recommend adds extra noise docs without enabling additional functionality.","code":"\n#' Detect the presence/absence of a pattern\n#'\n#' `str_detect()` returns a logical vector `TRUE` if `pattern` is found within\n#' each element of `string` or a `FALSE` if not. It's equivalent\n#' `grepl(pattern, string)`.\n#' Detect the a pattern in the same way as `SQL`'s `LIKE` operator.\n#'\n#' @description\n#' `str_like()` follows the conventions of the SQL `LIKE` operator:\n#'\n#' * Must match the entire string.\n#' * `_` matches a single character (like `.`).\n#' * `%` matches any number of characters (like `.*`).\n#' * `\\%` and `\\_` match literal `%` and `_`.\n#' * The match is case insensitive by default."},{"path":"man.html","id":"details","chapter":"16 Function documentation","heading":"16.3.3 Details","text":"lot information convey details, recommend using markdown headings break documentation sections.\n’s example dplyr::mutate().\n’ve elided details keep example short, still get sense used headings break content skimmable chunks.Note even though headings come immediately description shown much later (function arguments return value) rendered documentation.older code, might also see use @section title: used create headings roxygen2 fully supported RMarkdown.\ncan move description turn markdown headings.","code":"\n#' Create, modify, and delete columns\n#'\n#' `mutate()` adds new variables and preserves existing ones;\n#' `transmute()` adds new variables and drops existing ones.\n#' New variables overwrite existing variables of the same name.\n#' Variables can be removed by setting their value to `NULL`.\n#'\n#' # Useful mutate functions\n#'\n#' * [`+`], [`-`], [log()], etc., for their usual mathematical meanings\n#'\n#' ...\n#'\n#' # Grouped tibbles\n#'\n#' Because mutating expressions are computed within groups, they may\n#' yield different results on grouped tibbles. This will be the case\n#' as soon as an aggregating, lagging, or ranking function is\n#' involved. Compare this ungrouped mutate:\n#'\n#' ..."},{"path":"man.html","id":"arguments","chapter":"16 Function documentation","heading":"16.4 Arguments","text":"functions, bulk work go towards documenting argument affects output function.\npurpose, ’ll use @param (short parameter, synonym argument) followed argument name description action.important job description provide succinct summary allowed inputs parameter .\nexample, ’s str_detect():three arguments str_flatten():Note @param collapse @param na.rm describes default argument.\ngood practice function usage (shows default values) argument description quite far apart docs.\nprimary downside introducing duplication means ’ll need update docs change default value; believe small amount extra work worth make life user easier.argument fixed set possible parameters, list .\n’re simple, can just list sentence, like str_trim():need explanation, might use bulleted list, str_wrap():documentation arguments tends relatively short, often one two sentences.\ntake much space need, ’ll see examples multi-paragraph argument documentation shortly.","code":"\n#' @param string Input vector. Either a character vector, or something\n#'  coercible to one.\n#' @param collapse String to insert between each piece. Defaults to `\"\"`.\n#' @param last Optional string use in place of final separator.\n#' @param na.rm Remove missing values? If `FALSE` (the default), the result \n#'   will be `NA` if any element of `string` is `NA`.\n#' @param side Side on which to remove whitespace: `\"left\"`, `\"right\"`, or\n#'   `\"both\"` (the default).\n#' @param whitespace_only A boolean.\n#'   * `TRUE` (the default): wrapping will only occur at whitespace.\n#'   * `FALSE`: can break on any non-word character (e.g. `/`, `-`)."},{"path":"man.html","id":"multiple-arguments","chapter":"16 Function documentation","heading":"16.4.1 Multiple arguments","text":"behavior multiple arguments tightly coupled, can document together separating names commas (spaces).\nexample, str_equal() x y interchangeable, ’re documented together:str_sub() start end define range characters replace, can use just start pass two-column matrix.\nmakes sense document together:str_wrap() indent exdent define indentation first line subsequent lines respectively:","code":"\n#' @param x,y A pair of character vectors.\n#' @param start,end Two integer vectors. `start` gives the position\n#'   of the first character (defaults to first), `end` gives the position\n#'   of the last (defaults to last character). Alternatively, pass a two-column\n#'   matrix to `start`.\n#'\n#'   Negative values count backwards from the last character.\n#' @param indent,exdent A non-negative integer giving the indent for the\n#'   first line (`indent`) and all subsequent lines (`exdent`)."},{"path":"man.html","id":"inheriting-arguments","chapter":"16 Function documentation","heading":"16.4.2 Inheriting arguments","text":"package contains many closely related functions, ’s common arguments name meaning.\nannoying error prone copy paste @param documentation every function roxygen2 provides @inheritParams allows inherit argument documentation another package.stringr uses @inheritParams extensively functions string pattern arguments.\nstr_detect() documents detail:stringr functions use @inheritParams str_detect get detailed documentation string pattern without duplicate text.@inheritParams inherits docs arguments aren’t already documented, can document arguments inherit others.\nstr_match() uses inherit standard string argument document unusual pattern argument:can documentation function another package using standard :: notation: @inheritParams package::function.\ncan introduce one small annoyance: now documentation package longer self-contained version remote package can affect generated docs.\ncan introduce spurious diffs multiple contributors different versions installed.","code":"\n#' @param string Input vector. Either a character vector, or something\n#'  coercible to one.\n#' @param pattern Pattern to look for.\n#'\n#'   The default interpretation is a regular expression, as described\n#'   `vignette(\"regular-expressions\")`. Control options with [regex()].\n#'\n#'   Match a fixed string (i.e. by comparing only bytes), using\n#'   [fixed()]. This is fast, but approximate. Generally,\n#'   for matching human text, you'll want [coll()] which\n#'   respects character matching rules for the specified locale.\n#'\n#'   Match character, word, line and sentence boundaries with\n#'   [boundary()]. An empty pattern, \"\", is equivalent to\n#'   `boundary(\"character\")`.\n#' @inheritParams str_detect\n#' @param pattern Unlike other stringr functions, `str_match()` only supports\n#'   regular expressions, as described `vignette(\"regular-expressions\")`. \n#'   The pattern should contain at least one capturing group."},{"path":"man.html","id":"multiple-functions-in-one-file","chapter":"16 Function documentation","heading":"16.4.3 Multiple functions in one file","text":"’s another powerful tool share just argument docs doc across multiple functions: @rdname.\ndefault, function gets documentation topic, can combine documentation fun2 fun1 using @rdname fun1.example, take str_length() str_width() provide two different ways computing size string.\ncan see description, functions documented together, makes easy see differ:works str_width() uses @rdname str_length documentation included existing topic:technique best used functions just similar arguments, also similar return value related examples, discussed next.","code":"\n#' The length/width of a string\n#'\n#' @description\n#' `str_length()` returns the number of codepoints in a string. These are\n#' the individual elements (which are often, but not always letters) that\n#' can be extracted with [str_sub()].\n#'\n#' `str_width()` returns how much space the string will occupy when printed\n#' in a fixed width font (i.e. when printed in the console).\n#'\n#' ...\nstr_length <- function(string) {\n  ...\n}\n#' @rdname str_length\nstr_width <- function(string) {\n  ...\n}"},{"path":"man.html","id":"return-value","chapter":"16 Function documentation","heading":"16.5 Return value","text":"important function’s inputs outputs.\nDocumenting outputs job @returns33 tag.\ngoal docs describe exactly values computed (job description details), roughly describe overall “shape” output, .e. sort object , dimensions (makes sense).\nexample, function returns vector might describe type length, function returns data frame might describe names types columns expected number rows.return documentation functions stringr straightforward almost functions return type vector length input.\nexample, ’s str_like():complicated cases, ’s often easier figure describe set functions differ.\nexample, dplyr functions return data frames, just saying @return data frame useful.\nInstead sit think exactly makes functions different.\ntook thinking, eventually decided makes sense describe function terms affects rows, columns, groups, attributes.\nexample, ’s dplyr::filter():@return also good place describe important warnings errors user might see .\nexample readr::read_csv():initial CRAN submission, functions must document @return value.\nrequired subsequent submission, ’s good practice.\n’s currently way enforce (’re working ) ’ll notice tidyverse functions lack documentation outputs.","code":"\n#' @returns A logical vector the same length as `string`.\n#' @returns\n#' An object of the same type as `.data`. The output has the following properties:\n#'\n#' * Rows are a subset of the input, but appear in the same order.\n#' * Columns are not modified.\n#' * The number of groups may be reduced (if `.preserve` is not `TRUE`).\n#' * Data frame attributes are preserved.\n#' @returns A [tibble()]. If there are parsing problems, a warning will alert you.\n#'   You can retrieve the full details by calling [problems()] on your dataset."},{"path":"man.html","id":"dry2","chapter":"16 Function documentation","heading":"16.6 Examples","text":"Describing function works useful, showing works often even better.\n’s purpose @examples tag, uses executable R code show can function.Use examples show basic operation function, highlight particularly important properties.\nstr_detct() starts showing simple variations highlights property might easily miss reading docs: well passing vector strings one pattern, can also pass one string vector patterns.Try stay focused important features without getting weeds every last edge case: make examples long, becomes hard user find key application ’re looking .Bear mind want examples execute relatively quickly users can run , make website package doesn’t take ages generate documentation.\nR CMD check records total amount time taking examples package, topic individually.\nMake sure example run quickly.submitting CRAN, examples must run 10 minutes.","code":"\n#' @examples\n#' fruit <- c(\"apple\", \"banana\", \"pear\", \"pineapple\")\n#' str_detect(fruit, \"a\")\n#' str_detect(fruit, \"^a\")\n#' str_detect(fruit, \"a$\")\n#' \n#' # Also vectorised over pattern\n#' str_detect(\"aecfg\", letters)"},{"path":"man.html","id":"execution","chapter":"16 Function documentation","heading":"16.6.1 Execution","text":"Examples run four common cases:Interactively using example() function.R CMD check computer control (e.g. development machine CI/CD server).R CMD check computer don’t control (e.g. CRAN).building pkgdown websiteThis means example code must run without error three cases.\nmeans code must self-contained, uses packages listed DESCRIPTION fields Imports Suggests.","code":""},{"path":"man.html","id":"things-to-avoid","chapter":"16 Function documentation","heading":"16.6.2 Things to avoid","text":"constraints imposed CRAN examples user runs example interactively example() don’t want mess current session.\nmeans shouldn’t make changes global state, :Don’t change global options options()Don’t mess working directory.Don’t create create files current working directory. Instead write temporary directory, make sure clean end example.general, “Pack , pack ”, .e. don’t leave stuff changed state behind.Don’t write clipboard.Avoid depending external resources might occasionally fail.can make point familiar built-dataset, like iris, .points tension good documentation.\n’s really hard follow rules, consider thing want show better expressed via different form documentation.","code":""},{"path":"man.html","id":"errors","chapter":"16 Function documentation","heading":"16.6.3 Errors","text":"can want include code causes error purposes teaching.\ntwo basic options:can wrap code try() error shown, doesn’t stop execution error.can wrap code \\dontrun{}34 never run example().","code":""},{"path":"man.html","id":"other-packages","chapter":"16 Function documentation","heading":"16.6.4 Other packages","text":"can use packages examples packages depends (.e. appears imports suggests).\nneed explicitly load packages example code run user’s environment, package environment.either imported suggested packages reccomend using ::, unless ’s really lot duplication.Previously, recommended protecting suggested packages inside block used (requireNamespace(\"suggested_package\", quietly = TRUE)).\nHowever, longer recommend :expect suggested packages installed running R CMD check (since effectively required developers).cost wrapping code {} high, don’t see intermediate results. cost package installed low, users generally know recognise package loaded error can resolve .","code":""},{"path":"man.html","id":"conditional-execution","chapter":"16 Function documentation","heading":"16.6.5 Conditional execution","text":"cases, might want code run specific scenarios.\ncommon case, don’t want run code CRAN ’re something usually best avoided (see ) examples need setup CRAN won’t .\ncase can use @examplesIf instead @examples.\ncode @examplesIf block executed condition TRUE:example, googledrive uses @examplesIf almost every function examples can work active, authenticated, connection googledrive judged googledrive::drive_has_token().\nexample, ’s googledrive::drive_publish():initial CRAN submission package, functions must contain runnable examples (.e. must examples must wrapped \\dontrun{}).","code":"\n#' @examplesIf some_function()\n#' some_other_function()\n#' some_more_functions()\n#' @examplesIf drive_has_token()\n#' # Create a file to publish\n#' file <- drive_example_remote(\"chicken_sheet\") %>%\n#'   drive_cp()\n#'\n#' # Publish file\n#' file <- drive_publish(file)\n#' file$published"},{"path":"man.html","id":"intermixing-examples-and-text","chapter":"16 Function documentation","heading":"16.6.6 Intermixing examples and text","text":"’s also possible show example code text code blocks, either ```R just want show code ```{r} want code run.","code":""},{"path":"man.html","id":"organisation","chapter":"16 Function documentation","heading":"16.6.7 Organisation","text":"tidyr::chop() + tidyr::unchop():","code":"\n#' @examples\n#' # Chop ==============================================================\n#' df <- tibble(x = c(1, 1, 1, 2, 2, 3), y = 1:6, z = 6:1)\n#' # Note that we get one row of output for each unique combination of\n#' # non-chopped variables\n#' df %>% chop(c(y, z))\n#' # cf nest\n#' df %>% nest(data = c(y, z))\n#'\n#' # Unchop ============================================================\n#' df <- tibble(x = 1:4, y = list(integer(), 1L, 1:2, 1:3))\n#' df %>% unchop(y)\n#' df %>% unchop(y, keep_empty = TRUE)\n#' \n#' #' # Incompatible types -------------------------------------------------\n#' # If the list-col contains types that can not be natively\n#' df <- tibble(x = 1:2, y = list(\"1\", 1:3))\n#' try(df %>% unchop(y))"},{"path":"man.html","id":"links-and-images","chapter":"16 Function documentation","heading":"16.7 Links and images","text":"Regular markdown link web pages: https://r-project.org [R Project](https://r-project.org).link function slightly abuse markdown syntax: [function()] [pkg::function()]. link non-function documentation just omit (): [topic], [pkg::topic]().Images need live …Useful tags@seealso allows point useful resources, either web, package [functioname()], another package [pkg::function()].@seealso allows point useful resources, either web, package [functioname()], another package [pkg::function()].family related functions every function link every function family, use @family.\nvalue @family plural.family related functions every function link every function family, use @family.\nvalue @family plural.start using links images, ’ll also need use new documentation workflow, workflow described show images links topics .\n’d like also see links, can use slower comprehensive workflow:Re-document package Cmd + Shift + D.Re-document package Cmd + Shift + D.Build install package clicking  build pane pressing Ctrl/Cmd + Shift + B.\ninstalls regular library, restarts R reloads package.Preview documentation ?.Preview documentation ?.","code":""},{"path":"man.html","id":"re-using-documentation","chapter":"16 Function documentation","heading":"16.8 Re-using documentation","text":"tension DRY (don’t repeat ) principle programming need documentation self-contained.\n’s frustrating navigate multiple help files order pull together pieces need.\nroxygen2 provides number ways avoid repeat developer, forcing user follow spiderweb links find everything need.\n’ll focus two:two RMarkdown features supported roxygen2 can use share documentation.can use child documents share Rmd topics.can use inline R code generate documentation.","code":""},{"path":"man.html","id":"inherits","chapter":"16 Function documentation","heading":"16.8.1 @inherits","text":"","code":""},{"path":"man.html","id":"child-documents","chapter":"16 Function documentation","heading":"16.8.2 Child documents","text":"Allows share documentation","code":""},{"path":"man.html","id":"inline-r-code","chapter":"16 Function documentation","heading":"16.8.3 Inline R code","text":"","code":""},{"path":"vignettes.html","id":"vignettes","chapter":"17 Vignettes","heading":"17 Vignettes","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"vignettes.html","id":"introduction-12","chapter":"17 Vignettes","heading":"17.1 Introduction","text":"vignette long-form guide package.\nFunction documentation great know name function need, ’s useless otherwise.\nvignette like book chapter academic paper: can describe problem package designed solve, show reader solve .Many existing packages vignettes.\ncan see installed vignettes browseVignettes().\nsee vignette specific package, use argument, browseVignettes(\"packagename\").\nvignette provides three things: original source file, readable HTML page PDF, file R code.\ncan read specific vignette vignette(x), see code edit(vignette(x)).\nsee vignettes package haven’t installed, look CRAN page, e.g., https://cran.r-project.org/web/packages/dplyr.chapter, ’re going use RMarkdown write vignettes.\n’re already familiar RMarkdown ’ll need learn basics elsewhere; good place start https://rmarkdown.rstudio.com/.Older packages can include vignettes written Sweave, precursor RMarkdown.\ndescribes, package, highly recommend switching RMarkdown.","code":""},{"path":"vignettes.html","id":"vignette-workflow","chapter":"17 Vignettes","heading":"17.2 Vignette workflow","text":"create first vignette, run::Create vignettes/ directory.Create vignettes/ directory.Add necessary dependencies DESCRIPTION (.e. adds knitr Suggests VignetteBuilder fields).Add necessary dependencies DESCRIPTION (.e. adds knitr Suggests VignetteBuilder fields).Draft vignette, vignettes/-vignette.Rmd.Draft vignette, vignettes/-vignette.Rmd.draft vignette designed remind important parts R Markdown file.\nserves useful reference ’re creating new vignette.\nfile, workflow straightforward:Modify vignette.Modify vignette.Press Ctrl/Cmd + Shift + K (click ) knit vignette preview output.builds installed package — probably want dev package.\nUse devtools::build_rmd().builds installed package — probably want dev package.\nUse devtools::build_rmd().check workflow, Cmd + Shift + E, run code vignettes.\ngood way verify ’ve captured needed dependencies.","code":"\nusethis::use_vignette(\"my-vignette\")"},{"path":"vignettes.html","id":"vignette-metadata","chapter":"17 Vignettes","heading":"17.3 Metadata","text":"first lines vignette contain important metadata.\ndefault template contains following information:metadata written yaml, format designed human computer readable.\nbasics syntax much like DESCRIPTION file, line consists field name, colon, value field.\none special YAML feature ’re using >.\nindicates following lines text plain text shouldn’t use special YAML features.fields :title description.\nchange title, must also change VignetteIndexEntry{} described .title description.\nchange title, must also change VignetteIndexEntry{} described .author: don’t use unless vignette author different package author.author: don’t use unless vignette author different package author.date: don’t recommend either ’s easy forget update.\nuse Sys.date(), shows vignette built, might different last updated.date: don’t recommend either ’s easy forget update.\nuse Sys.date(), shows vignette built, might different last updated.Output: tells rmarkdown output formatter use.\nmany options useful regular reports (including html, pdf, slideshows, …) rmarkdown::html_vignette specifically designed work well inside packages.\nSee ?rmarkdown::html_vignette details.Output: tells rmarkdown output formatter use.\nmany options useful regular reports (including html, pdf, slideshows, …) rmarkdown::html_vignette specifically designed work well inside packages.\nSee ?rmarkdown::html_vignette details.Vignette: contains special block metadata needed R.\n, can see legacy LaTeX vignettes: metadata looks like LaTeX commands.\n’ll need modify \\VignetteIndexEntry provide title vignette ’d like appear vignette index.\nLeave two lines .\ntell R use knitr process file, file encoded UTF-8 (encoding ever use write vignettes).Vignette: contains special block metadata needed R.\n, can see legacy LaTeX vignettes: metadata looks like LaTeX commands.\n’ll need modify \\VignetteIndexEntry provide title vignette ’d like appear vignette index.\nLeave two lines .\ntell R use knitr process file, file encoded UTF-8 (encoding ever use write vignettes).Also includes block set standard options:collapse = TRUE comment = \"#>\" preferred way displaying code output.\nusually set globally putting following knitr block start document.","code":"---\ntitle: \"Vignette Title\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---"},{"path":"vignettes.html","id":"controlling-evaluation","chapter":"17 Vignettes","heading":"17.4 Controlling evaluation","text":"vignettes evaluated many different places, just computer — CI/CD, CRAN, users can run computers (although typical).\nNeed make sure work everywhere can challenging yourAny packages used vignette must listed Imports Suggests fields.\nGenerally save assume suggest packages installed vignette executed.\npackage particularly hard install might want safeguard using one tools .’re probably already familiar chunk option eval = FALSE.\ncan also set later chunks knitr::opts_chunk$set(eval = FALSE).\nparticularly useful :eval = requireNamespace(\"package\")eval = !identical(Sys.getenv(\"foo\"), \"\")eval = file.exists(\"special-key\")final option want don’t want execute CRAN.\nAnother option create “article”; Rmd appears website ’s embedded package.\nmakes slightly less accessible, ’s fine pkgdown website.Many options described https://yihui.name/knitr/options.error = TRUE captures errors block shows inline.\nuseful want demonstrate happens code throws error.","code":""},{"path":"vignettes.html","id":"vignette-advice","chapter":"17 Vignettes","heading":"17.5 Advice","text":"’re thinking without writing, think ’re thinking.\n— Leslie LamportWhen writing vignette, ’re teaching someone use package.\nneed put readers’ shoes, adopt “beginner’s mind”.\ncan difficult ’s hard forget knowledge ’ve already internalised.\nreason, find -person teaching really useful way get feedback.\n’re immediately confronted ’ve forgotten know.useful side effect approach helps improve code.\nforces re-see initial onboarding process appreciate parts hard.\nexperience explaining code works often reveals problems need fixing.\n(fact, key part tidyverse package release process writing blog post: now submitting CRAN number times ’s revealed subtle problem requires fix).tidyverse, think ’re generally always little behind vignettes need currently .Writing vignette also makes nice break coding.\nWriting seems use different part brain programming, ’re sick programming, try writing bit.","code":""},{"path":"vignettes.html","id":"writing","chapter":"17 Vignettes","heading":"17.5.1 Writing","text":"strongly recommend literally anything written Kathy Sierra.\nold blog, Creating passionate users full advice programming, teaching, create valuable tools.\nthoroughly recommend reading older content.\nnew blog, Serious Pony, doesn’t much content, great articles.strongly recommend literally anything written Kathy Sierra.\nold blog, Creating passionate users full advice programming, teaching, create valuable tools.\nthoroughly recommend reading older content.\nnew blog, Serious Pony, doesn’t much content, great articles.’d like learn write better, highly recommend Style: Lessons Clarity Grace Joseph M. Williams Joseph Bizup.\nhelps understand structure writing ’ll better able recognise fix bad writing.’d like learn write better, highly recommend Style: Lessons Clarity Grace Joseph M. Williams Joseph Bizup.\nhelps understand structure writing ’ll better able recognise fix bad writing.","code":""},{"path":"vignettes.html","id":"diagrams","chapter":"17 Vignettes","heading":"17.5.2 Diagrams","text":"’ll need watch file size.\ninclude lot graphics, ’s easy create large file.\nlook NOTE complains overly large directory.","code":""},{"path":"vignettes.html","id":"organisation-1","chapter":"17 Vignettes","heading":"17.5.3 Organisation","text":"simpler packages, one vignette often sufficient.\nCall pkgname.Rmd; takes advantage pkgdown convention automatically link “Getting Started” vignette.complicated packages may actually need one.\nfact, can many vignettes like.\ntend think like chapters book – self-contained, still link together cohesive whole.","code":""},{"path":"vignettes.html","id":"scientific-publication","chapter":"17 Vignettes","heading":"17.5.4 Scientific publication","text":"Vignettes can also useful want explain details package.\nexample, implemented complex statistical algorithm, might want describe details vignette users package can understand ’s going hood, confident ’ve implemented algorithm correctly.\ncase, might also consider submitting vignette Journal Statistical Software R Journal.\njournals electronic peer-reviewed.\nComments reviewers can helpful improving package vignette.just want provide something lightweight folks easy time citing package might also consider Journal Open Source Software.\njournal particularly speedy submission review process, published “Welcome Tidyverse”, paper wrote folks single paper cite tidyverse authors get academic credit.","code":""},{"path":"important-files.html","id":"important-files","chapter":"18 Other markdown files","heading":"18 Other markdown files","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter currently dumping ground ideas, don’t recommend reading . :::","code":""},{"path":"important-files.html","id":"introduction-13","chapter":"18 Other markdown files","heading":"18.1 Introduction","text":"now package ’s ready submit CRAN.\n, two important files update: README.md describes package , NEWS.md describes ’s changed since previous version.\nrecommend using Markdown files, ’s useful readable plain text (e.g. emails) HTML (e.g. GitHub, blog posts).\nbasic writing formatting syntax available https://help.github.com/articles/basic-writing--formatting-syntax/.","code":""},{"path":"important-files.html","id":"readme","chapter":"18 Other markdown files","heading":"18.2 README","text":"","code":""},{"path":"important-files.html","id":"readme-md","chapter":"18 Other markdown files","heading":"18.2.1 README.md","text":"goal README.md answer following questions package:use ?use ?get ?GitHub, README.md rendered HTML displayed repository home page.normally structure README follows:paragraph describes high-level purpose package.paragraph describes high-level purpose package.example shows use package solve simple problem.example shows use package solve simple problem.Installation instructions, giving code can copied pasted R.Installation instructions, giving code can copied pasted R.overview describes main components package.\ncomplex packages, point vignettes details.overview describes main components package.\ncomplex packages, point vignettes details.","code":""},{"path":"important-files.html","id":"readme-rmd","chapter":"18 Other markdown files","heading":"18.2.2 README.Rmd","text":"include example README (good idea!) may want generate R Markdown.\neasiest way get started use usethis::use_readme_rmd().\ncreates template README.Rmd adds .Rbuildignore.\ntemplate looks like::Outputs Github flavoured Markdown.Outputs Github flavoured Markdown.Includes comment README.md remind edit README.Rmd, README.md.Includes comment README.md remind edit README.Rmd, README.md.Sets recommended knitr options, including saving images man/figures/README- ensures ’re included built package (important README works ’s displayed CRAN).Sets recommended knitr options, including saving images man/figures/README- ensures ’re included built package (important README works ’s displayed CRAN).’ll need remember re-knit README.Rmd time modify .\nuse git, use_readme_rmd() automatically adds following “pre-commit” hook:prevents git commit succeeding unless README.md recent README.Rmd.\nget false positive, can ignore check git commit ---verify.\nNote git commit hooks stored repository, every time clone repo, ’ll need run usethis::use_readme_rmd() set .","code":"---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n``` {r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"man/figures/README-\",\n  out.width = \"100%\"\n)\n```#!/bin/bash\nif [[ README.Rmd -nt README.md ]]; then\n  echo \"README.md is out of date; please re-knit README.Rmd\"\n  exit 1\nfi "},{"path":"important-files.html","id":"development-badges","chapter":"18 Other markdown files","heading":"18.2.3 Development badges","text":"number usethis helpers automatically add development status badges readme readers can see:current version package CRAN, usethis::use_cran_badge().amount code coverage, added use_coverage().R CMD check status development package, added use_github_action_check_standard() friends.","code":""},{"path":"important-files.html","id":"news","chapter":"18 Other markdown files","heading":"18.3 NEWS.md","text":"README.md aimed new users.\nNEWS.md aimed existing users: list API changes release.\nnumber formats can use package news, recommend NEWS.md.\n’s well supported GitHub, permitted CRAN, easy re-purpose formats.Organise NEWS.md follows:Use top-level heading version: e.g. # mypackage 1.0.\nrecent version go top.\n(pkgdown supports formats, see https://pkgdown.r-lib.org/reference/build_news.html)Use top-level heading version: e.g. # mypackage 1.0.\nrecent version go top.\n(pkgdown supports formats, see https://pkgdown.r-lib.org/reference/build_news.html)change included bulleted list.\nlot changes might want break using subheadings, ## Major changes, ## Bug fixes etc.\nusually stick simple list just releasing package ’ll reorganise sections, needed.\n’s hard know advance exactly sections ’ll need.change included bulleted list.\nlot changes might want break using subheadings, ## Major changes, ## Bug fixes etc.\nusually stick simple list just releasing package ’ll reorganise sections, needed.\n’s hard know advance exactly sections ’ll need.item related issue GitHub, include issue number parentheses, e.g. (#​10).\nitem related pull request, include pull request number author, e.g. (#​101, @hadley).\nmakes easy navigate relevant issues GitHub.item related issue GitHub, include issue number parentheses, e.g. (#​10).\nitem related pull request, include pull request number author, e.g. (#​101, @hadley).\nmakes easy navigate relevant issues GitHub.main challenge NEWS.md getting habit noting change make change.","code":""},{"path":"important-files.html","id":"other-github-files","chapter":"18 Other markdown files","heading":"18.4 Other GitHub files","text":"’ll also find number files .github directory.\nmostly useful GitHub also supported pkgdown:LICENSE.md: complete text license package. Discussed …cran-comments.md: sent CRAN submit package. Discussed …SUPPORT.md:CONTRIBUTING.md:CODE_OF_CONDUCT.md:ISSUE_TEMPLATE PULL_REQUEST_TEMPLATE","code":""},{"path":"website.html","id":"website","chapter":"19 Website","heading":"19 Website","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter currently dumping ground ideas, don’t recommend reading . :::","code":""},{"path":"website.html","id":"introduction-14","chapter":"19 Website","heading":"19.1 Introduction","text":"","code":""},{"path":"website.html","id":"logo","chapter":"19 Website","heading":"19.2 Logo","text":"Website also great way show package logo.use_logo()Include hexagon spec.Mention get sticker.","code":""},{"path":"r-cmd-check.html","id":"r-cmd-check","chapter":"20 R CMD check","heading":"20 R CMD check","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"r-cmd-check.html","id":"introduction-15","chapter":"20 R CMD check","heading":"20.1 Introduction","text":"important part package development process R CMD check.\nR CMD check automatically checks code common problems.\n’s essential ’re planning submitting CRAN, ’s useful even ’re automatically detects many common problems ’d otherwise discover hard way.R CMD check frustrating first time run - ’ll discover many problems need fixed.\nkey making R CMD check less frustrating actually run often: sooner find problem, easier fix.\nupper limit approach run R CMD check every time make change.\nuse GitHub, ’ll learn precisely GitHub Actions.","code":""},{"path":"r-cmd-check.html","id":"check-workflow","chapter":"20 R CMD check","heading":"20.2 Workflow","text":"R CMD check name command run terminal.\ndon’t recommend calling directly.\nInstead, run devtools::check(), press Ctrl/Cmd + Shift + E RStudio.\ncontrast R CMD check, devtools::check():Ensures documentation --date running devtools::document().Ensures documentation --date running devtools::document().Bundles package checking .\nbest practice checking packages makes sure check starts clean slate: package bundle doesn’t contain temporary files can accumulate source package, e.g. artifacts like ..o files accompany compiled code, can avoid spurious warnings files generate.Bundles package checking .\nbest practice checking packages makes sure check starts clean slate: package bundle doesn’t contain temporary files can accumulate source package, e.g. artifacts like ..o files accompany compiled code, can avoid spurious warnings files generate.Sets NOT_CRAN environment variable TRUE.\nallows selectively skip tests CRAN.\n(See ?testthat::skip_on_cran details.)Sets NOT_CRAN environment variable TRUE.\nallows selectively skip tests CRAN.\n(See ?testthat::skip_on_cran details.)workflow checking package simple, tedious:Run devtools::check(), press Ctrl/Cmd + Shift + E.Run devtools::check(), press Ctrl/Cmd + Shift + E.Fix first problem.Fix first problem.Repeat problems.Repeat problems.R CMD check returns three types messages:ERRORs: Severe problems fix regardless whether ’re submitting CRAN.ERRORs: Severe problems fix regardless whether ’re submitting CRAN.WARNINGs: Likely problems must fix ’re planning submit CRAN (good idea look even ’re ).WARNINGs: Likely problems must fix ’re planning submit CRAN (good idea look even ’re ).NOTEs: Mild problems.\nsubmitting CRAN, strive eliminate NOTEs, even false positives.\nNOTEs, human intervention required, package submission process easier.\n’s possible eliminate NOTE, ’ll need describe ’s OK submission comments, described release notes.\n’re submitting CRAN, carefully read NOTE, don’t go way fix things don’t think problems.NOTEs: Mild problems.\nsubmitting CRAN, strive eliminate NOTEs, even false positives.\nNOTEs, human intervention required, package submission process easier.\n’s possible eliminate NOTE, ’ll need describe ’s OK submission comments, described release notes.\n’re submitting CRAN, carefully read NOTE, don’t go way fix things don’t think problems.","code":""},{"path":"r-cmd-check.html","id":"check-checks","chapter":"20 R CMD check","heading":"20.3 Checks","text":"R CMD check composed 50 individual checks, described following sections.\ncheck, briefly describe , common problems , fix .\nproblem R CMD check can’t understand fix , use list help figure need .\nmake easier understand checks fit together, ’ve organised sections roughly corresponding chapters book.\nmeans somewhat different order ’ll see run check().list includes every check run R 3.1.1.\n’re using recent version, may want consult recent online version chapter: https://r-pkgs.org/r-cmd-check.html.\nPlease let know encounter problem chapter doesn’t help .","code":""},{"path":"r-cmd-check.html","id":"check-metadata","chapter":"20 R CMD check","heading":"20.3.1 Check metadata","text":"R CMD check always starts describing current environment.\n’m running R 3.1.1 OS X UTF-8 charset:Using log directory ‘/Users/hadley/Documents/web/httr.Rcheck’Using R version 3.1.1 (2014-07-10)Using platform: x86_64-apple-darwin13.1.0 (64-bit)Using session charset: UTF-8Next description parsed package version printed.\n’m checking httr version 0.5.0.9000 (’ll learn weird version number versioning).Checking file ‘httr/DESCRIPTION’package ‘httr’ version ‘0.5.0.9000’","code":""},{"path":"r-cmd-check.html","id":"package-structure","chapter":"20 R CMD check","heading":"20.3.2 Package structure","text":"Checking package directory. directory ’re checking must exist - devtools::check() protects problem.Checking source package. must check source package, binary installed package. never fail usedevtools::check().Checking executable files. must executable files package: ’re portable, ’re open source, security risk. Delete executable files package. (’re submitting CRAN, can silence warning listing executable file BinaryFiles field DESCRIPTION.)Checking hidden files directories. Linux OS X, files name starting . hidden default, ’ve probably included package mistake. Either delete , important, use .Rbuildignore remove package bundle. R automatically removes common directories like .git .svn.Checking portable file names. R packages must work Windows, Linux OS X, can use file names work platforms. easiest way stick letters, numbers, underscores dashes. Avoid non-English letters spaces. Fix check renaming listed files.Checking sufficient/correct file permissions. can’t read file, can’t check . check detects unlikely occurence files package don’t permission read. Fix problem fixing file permissions.Checking whether package ‘XYZ’ can installed. R CMD check runs R CMD install make sure ’s possible install package. fails, run devtools::install() RStudio’s Build & Reload debug problems continuing.Checking installed package size.\n’s easy accidentally include large files blow size package.\ncheck ensures whole package less 5 MB subdirectory less 1 MB.\nsee message, check haven’t accidentally included large file.\nsubmitting CRAN, ’ll need justify size package.\nFirst, make sure package small possibly can : try recompressing data, data CRAN notes; minimising vignettes, vignette CRAN notes.\n’s still large, consider moving data package.Checking installed package size.\n’s easy accidentally include large files blow size package.\ncheck ensures whole package less 5 MB subdirectory less 1 MB.\nsee message, check haven’t accidentally included large file.submitting CRAN, ’ll need justify size package.\nFirst, make sure package small possibly can : try recompressing data, data CRAN notes; minimising vignettes, vignette CRAN notes.\n’s still large, consider moving data package.Checking top-level files.\nspecified files directories allowed top level package (e.g. DESCRIPTION, R/, src/).\ninclude files, two choices:\ndon’t need installed (.e. ’re used source package): add .Rbuildignore usethis::use_build_ignore().\nneed installed: move inst/.\n’ll moved back top-level package directory installed.\nChecking top-level files.\nspecified files directories allowed top level package (e.g. DESCRIPTION, R/, src/).\ninclude files, two choices:don’t need installed (.e. ’re used source package): add .Rbuildignore usethis::use_build_ignore().don’t need installed (.e. ’re used source package): add .Rbuildignore usethis::use_build_ignore().need installed: move inst/.\n’ll moved back top-level package directory installed.need installed: move inst/.\n’ll moved back top-level package directory installed.Checking package subdirectories.\nDon’t include empty directories.\nusually removed automatically R CMD build shouldn’t see error.\n, just delete directory.\ncase files directories important.\nsub-directories lower-case, except R/.\ncitation file, present, inst/CITATION.\nRename needed.\ncontents inst/ shouldn’t clash top-level contents package (like build/, R/ etc).\n, rename files/directories.\nChecking package subdirectories.Don’t include empty directories.\nusually removed automatically R CMD build shouldn’t see error.\n, just delete directory.Don’t include empty directories.\nusually removed automatically R CMD build shouldn’t see error.\n, just delete directory.case files directories important.\nsub-directories lower-case, except R/.\ncitation file, present, inst/CITATION.\nRename needed.case files directories important.\nsub-directories lower-case, except R/.\ncitation file, present, inst/CITATION.\nRename needed.contents inst/ shouldn’t clash top-level contents package (like build/, R/ etc).\n, rename files/directories.contents inst/ shouldn’t clash top-level contents package (like build/, R/ etc).\n, rename files/directories.Checking left-files. Remove files listed . ’ve included package accident.","code":""},{"path":"r-cmd-check.html","id":"description-2","chapter":"20 R CMD check","heading":"20.3.3 Description","text":"Checking DESCRIPTION meta-information.\nDESCRIPTION must valid.\nunlikely see error, devtools::load_all() runs check time re-load package.\nuse non-ASCII characters DESCRIPTION, must also specify encoding.\nthree encodings work platforms: latin1, latin2 UTF-8.\nstrongly recommend UTF-8: Encoding: UTF-8.\nLicense must refer either known license (complete list can found https://svn.r-project.org/R/trunk/share/licenses/license.db), must use file LICENSE file must exist.\nErrors likely typos.\neither provide Authors@R Authors Maintainer.\n’ll get error ’ve specified , can fix removing one didn’t want.\nChecking DESCRIPTION meta-information.DESCRIPTION must valid.\nunlikely see error, devtools::load_all() runs check time re-load package.DESCRIPTION must valid.\nunlikely see error, devtools::load_all() runs check time re-load package.use non-ASCII characters DESCRIPTION, must also specify encoding.\nthree encodings work platforms: latin1, latin2 UTF-8.\nstrongly recommend UTF-8: Encoding: UTF-8.use non-ASCII characters DESCRIPTION, must also specify encoding.\nthree encodings work platforms: latin1, latin2 UTF-8.\nstrongly recommend UTF-8: Encoding: UTF-8.License must refer either known license (complete list can found https://svn.r-project.org/R/trunk/share/licenses/license.db), must use file LICENSE file must exist.\nErrors likely typos.License must refer either known license (complete list can found https://svn.r-project.org/R/trunk/share/licenses/license.db), must use file LICENSE file must exist.\nErrors likely typos.either provide Authors@R Authors Maintainer.\n’ll get error ’ve specified , can fix removing one didn’t want.either provide Authors@R Authors Maintainer.\n’ll get error ’ve specified , can fix removing one didn’t want.Checking package dependencies.\npackages listed Depends, Imports LinkingTo must installed, version requirements must met, otherwise package can’t checked.\neasy way install missing outdated dependencies run devtools::install_deps(dependencies = TRUE).\nPackages listed Suggests must installed, unless ’ve set environment variable _R_CHECK_FORCE_SUGGESTS_ false value (e.g. check(force_suggests = FALSE)).\nuseful suggested packages available platforms.\nR packages can cycle dependencies: .e. package requires B, B can require (otherwise one load first?).\nsee error, ’ll need rethink design package.\nOne easy fix move conflicting package Imports Depends Suggests.\npackages used NAMESPACE must listed one Imports (commonly) Depends (special cases).\nSee search path details.\nEvery package listed Depends must also imported NAMESPACE accessed pkg::foo.\ndon’t , package work attached search path (library(mypackage)) work loaded (e.g. mypackage::foo())\nChecking package dependencies.packages listed Depends, Imports LinkingTo must installed, version requirements must met, otherwise package can’t checked.\neasy way install missing outdated dependencies run devtools::install_deps(dependencies = TRUE).packages listed Depends, Imports LinkingTo must installed, version requirements must met, otherwise package can’t checked.\neasy way install missing outdated dependencies run devtools::install_deps(dependencies = TRUE).Packages listed Suggests must installed, unless ’ve set environment variable _R_CHECK_FORCE_SUGGESTS_ false value (e.g. check(force_suggests = FALSE)).\nuseful suggested packages available platforms.Packages listed Suggests must installed, unless ’ve set environment variable _R_CHECK_FORCE_SUGGESTS_ false value (e.g. check(force_suggests = FALSE)).\nuseful suggested packages available platforms.R packages can cycle dependencies: .e. package requires B, B can require (otherwise one load first?).\nsee error, ’ll need rethink design package.\nOne easy fix move conflicting package Imports Depends Suggests.R packages can cycle dependencies: .e. package requires B, B can require (otherwise one load first?).\nsee error, ’ll need rethink design package.\nOne easy fix move conflicting package Imports Depends Suggests.packages used NAMESPACE must listed one Imports (commonly) Depends (special cases).\nSee search path details.packages used NAMESPACE must listed one Imports (commonly) Depends (special cases).\nSee search path details.Every package listed Depends must also imported NAMESPACE accessed pkg::foo.\ndon’t , package work attached search path (library(mypackage)) work loaded (e.g. mypackage::foo())Every package listed Depends must also imported NAMESPACE accessed pkg::foo.\ndon’t , package work attached search path (library(mypackage)) work loaded (e.g. mypackage::foo())Checking CRAN incoming feasibility.\nchecks apply ’re submitting CRAN.\n’re submitting new package, can’t use name existing package.\n’ll need come new name.\n’re submitting update, version number must higher current CRAN version.\nUpdate Version field DESCRIPTION.\nmaintainer package changed (even ’s just change email address), new maintainer submit CRAN, old maintainer send confirmation email.\nmust use standard open source license, listed https://svn.r-project.org/R/trunk/share/licenses/license.db.\ncan use custom license CRAN legal resources review custom agreements.\nTitle Description must free spelling mistakes.\ntitle package must title case.\nNeither title description include either name package word “package”.\nReword title description needed.\n’re submitting new package, ’ll always get NOTE.\nreminds CRAN maintainers extra manual checks.\nAvoid submitting multiple versions package short period time.\nCRAN prefers one submission per month.\nneed fix major bug, apologetic.\nChecking CRAN incoming feasibility.\nchecks apply ’re submitting CRAN.’re submitting new package, can’t use name existing package.\n’ll need come new name.’re submitting new package, can’t use name existing package.\n’ll need come new name.’re submitting update, version number must higher current CRAN version.\nUpdate Version field DESCRIPTION.’re submitting update, version number must higher current CRAN version.\nUpdate Version field DESCRIPTION.maintainer package changed (even ’s just change email address), new maintainer submit CRAN, old maintainer send confirmation email.maintainer package changed (even ’s just change email address), new maintainer submit CRAN, old maintainer send confirmation email.must use standard open source license, listed https://svn.r-project.org/R/trunk/share/licenses/license.db.\ncan use custom license CRAN legal resources review custom agreements.must use standard open source license, listed https://svn.r-project.org/R/trunk/share/licenses/license.db.\ncan use custom license CRAN legal resources review custom agreements.Title Description must free spelling mistakes.\ntitle package must title case.\nNeither title description include either name package word “package”.\nReword title description needed.Title Description must free spelling mistakes.\ntitle package must title case.\nNeither title description include either name package word “package”.\nReword title description needed.’re submitting new package, ’ll always get NOTE.\nreminds CRAN maintainers extra manual checks.’re submitting new package, ’ll always get NOTE.\nreminds CRAN maintainers extra manual checks.Avoid submitting multiple versions package short period time.\nCRAN prefers one submission per month.\nneed fix major bug, apologetic.Avoid submitting multiple versions package short period time.\nCRAN prefers one submission per month.\nneed fix major bug, apologetic.","code":""},{"path":"r-cmd-check.html","id":"namespace","chapter":"20 R CMD check","heading":"20.3.4 Namespace","text":"Checking namespace. must NAMESPACE file. Roxygen2 create described namespaces.Checking package namespace information. NAMESPACE parseable parseNamespaceFile() valid. check fails, ’s bug roxygen2.Checking whether package can loaded stated dependencies. Runs library(pkg) R_DEFAULT_PACKAGES=NULL, search path empty (.e. stats, graphics, grDevices, utils, datasets methods attached like usual). Failure typically indicates ’re missing dependency one packages.Checking whether namespace can loaded stated dependencies. Runs loadNamespace(pkg) R_DEFAULT_PACKAGES=NULL. Failure usually indicates problem namespace.","code":""},{"path":"r-cmd-check.html","id":"r-code","chapter":"20 R CMD check","heading":"20.3.5 R code","text":"Checking R files non-ASCII characters. maximum portability (.e. people can use package Windows) avoid using non-ASCII characters R files. ’s ok use comments, object names shouldn’t use , strings use unicode escapes. See R/ CRAN notes details.Checking R files syntax errors. Obviously R code must valid. ’re unlikely see error ’ve regularly using devtools::load_all().Checking dependencies R code.\nErrors often indicate ’ve forgotten declare needed package DESCRIPTION.\nRemember never use require() library() inside package - see namespace imports details best practices.\nAlternatively, may accidentally used ::: access exported function package.\nSwitch :: instead.Checking dependencies R code.\nErrors often indicate ’ve forgotten declare needed package DESCRIPTION.\nRemember never use require() library() inside package - see namespace imports details best practices.Alternatively, may accidentally used ::: access exported function package.\nSwitch :: instead.Checking S3 generic/method consistency.\nS3 methods must compatible function signature generic.\nmeans method must arguments generic, one exception: generic includes ... method can additional arguments.\ncommon cause error defining print methods, print() generic contains...:\n\n# BAD\nprint.my_class <- function(x) cat(\"Hi\")\n\n# GOOD\nprint.my_class <- function(x, ...) cat(\"Hi\")\n\n# Also ok\nprint.my_class <- function(x, ..., my_arg = TRUE) cat(\"Hi\")Checking S3 generic/method consistency.\nS3 methods must compatible function signature generic.\nmeans method must arguments generic, one exception: generic includes ... method can additional arguments.common cause error defining print methods, print() generic contains...:Checking replacement functions. Replacement functions (e.g. functions called like foo(x) <- y), must value last argument.Checking R code possible problems.\ncompound check wide range problems:\nCalls library.dynam() (library.dynam.unload()) look like library.dynam(\"name\"), library.dynam(\"name.dll\").\nRemove extension fix error.\nPut library.dynam() .onLoad(), .onAttach(); put packageStartupMessage() .onAttach(), .onLoad().\nPut library.dynam.unload() .onUnload().\nuse functions, make sure ’re right place.\nDon’t use unlockBinding() assignInNamespace() modify objects don’t belong .\ncodetools::checkUsagePackage() called check functions don’t use variables don’t exist.\nsometimes raises false positives functions use non-standard evaluation (NSE), like subset() ().\nGenerally, think avoid NSE package functions, hence avoid NOTE, can , see ?globalVariables suppress NOTE.\nallowed use .Internal() package.\nEither call R wrapper function, write C function.\n(copy paste C function base R, make sure maintain copyright notice, use GPL-2 compatible license, list R-core Author field.)\nSimilarly allowed use ::: access non-exported functions packages.\nEither ask package maintainer export function need, write version using exported functions.\nAlternatively, licenses compatible can copy paste exported function package.\n, remember update Authors@R.\nDon’t use assign() modify objects global environment.\nneed maintain state across function calls, create environment e <- new.env(parent = emptyenv()) set get values :\n\ne <- new.env(parent = emptyenv())\n\nadd_up <- function(x) {\n  (.null(e$last_x)) {\n    old <- 0\n  } else {\n    old <- e$last_x\n  }\n\n  new <- old + x\n  e$last_x <- new\n  new\n}\nadd_up(10)\n#> [1] 10\nadd_up(20)\n#> [1] 30\nDon’t use attach() code.\nInstead refer variables explicitly.\nDon’t use data() without specifying envir argument.\nOtherwise data loaded global environment.\nDon’t use deprecated defunct functions.\nUpdate code use latest versions.\nmust use TRUE FALSE code (examples), T F.\nChecking R code possible problems.\ncompound check wide range problems:Calls library.dynam() (library.dynam.unload()) look like library.dynam(\"name\"), library.dynam(\"name.dll\").\nRemove extension fix error.Calls library.dynam() (library.dynam.unload()) look like library.dynam(\"name\"), library.dynam(\"name.dll\").\nRemove extension fix error.Put library.dynam() .onLoad(), .onAttach(); put packageStartupMessage() .onAttach(), .onLoad().\nPut library.dynam.unload() .onUnload().\nuse functions, make sure ’re right place.Put library.dynam() .onLoad(), .onAttach(); put packageStartupMessage() .onAttach(), .onLoad().\nPut library.dynam.unload() .onUnload().\nuse functions, make sure ’re right place.Don’t use unlockBinding() assignInNamespace() modify objects don’t belong .Don’t use unlockBinding() assignInNamespace() modify objects don’t belong .codetools::checkUsagePackage() called check functions don’t use variables don’t exist.\nsometimes raises false positives functions use non-standard evaluation (NSE), like subset() ().\nGenerally, think avoid NSE package functions, hence avoid NOTE, can , see ?globalVariables suppress NOTE.codetools::checkUsagePackage() called check functions don’t use variables don’t exist.\nsometimes raises false positives functions use non-standard evaluation (NSE), like subset() ().\nGenerally, think avoid NSE package functions, hence avoid NOTE, can , see ?globalVariables suppress NOTE.allowed use .Internal() package.\nEither call R wrapper function, write C function.\n(copy paste C function base R, make sure maintain copyright notice, use GPL-2 compatible license, list R-core Author field.)allowed use .Internal() package.\nEither call R wrapper function, write C function.\n(copy paste C function base R, make sure maintain copyright notice, use GPL-2 compatible license, list R-core Author field.)Similarly allowed use ::: access non-exported functions packages.\nEither ask package maintainer export function need, write version using exported functions.\nAlternatively, licenses compatible can copy paste exported function package.\n, remember update Authors@R.Similarly allowed use ::: access non-exported functions packages.\nEither ask package maintainer export function need, write version using exported functions.\nAlternatively, licenses compatible can copy paste exported function package.\n, remember update Authors@R.Don’t use assign() modify objects global environment.\nneed maintain state across function calls, create environment e <- new.env(parent = emptyenv()) set get values :\n\ne <- new.env(parent = emptyenv())\n\nadd_up <- function(x) {\n  (.null(e$last_x)) {\n    old <- 0\n  } else {\n    old <- e$last_x\n  }\n\n  new <- old + x\n  e$last_x <- new\n  new\n}\nadd_up(10)\n#> [1] 10\nadd_up(20)\n#> [1] 30Don’t use assign() modify objects global environment.\nneed maintain state across function calls, create environment e <- new.env(parent = emptyenv()) set get values :Don’t use attach() code.\nInstead refer variables explicitly.Don’t use attach() code.\nInstead refer variables explicitly.Don’t use data() without specifying envir argument.\nOtherwise data loaded global environment.Don’t use data() without specifying envir argument.\nOtherwise data loaded global environment.Don’t use deprecated defunct functions.\nUpdate code use latest versions.Don’t use deprecated defunct functions.\nUpdate code use latest versions.must use TRUE FALSE code (examples), T F.must use TRUE FALSE code (examples), T F.Checking whether package can loaded. R loads package library(). Failure typically indicates problem .onLoad() .onAttach().Checking whether package can unloaded cleanly. Loads library() detach()es. fails, check .onUnload() .onDetach().Checking whether namespace can unloaded cleanly. Runs loadNamespace(\"pkg\"); unloadNamespace(\"pkg\"). Check .onUnload() problems.Checking loading without library search path. Calls library(x, lib.loc = ...). Failure indicates making false assumption .onLoad() .onAttach().","code":"\n# BAD\nprint.my_class <- function(x) cat(\"Hi\")\n\n# GOOD\nprint.my_class <- function(x, ...) cat(\"Hi\")\n\n# Also ok\nprint.my_class <- function(x, ..., my_arg = TRUE) cat(\"Hi\")\ne <- new.env(parent = emptyenv())\n\nadd_up <- function(x) {\n  if (is.null(e$last_x)) {\n    old <- 0\n  } else {\n    old <- e$last_x\n  }\n\n  new <- old + x\n  e$last_x <- new\n  new\n}\nadd_up(10)\n#> [1] 10\nadd_up(20)\n#> [1] 30"},{"path":"r-cmd-check.html","id":"data-1","chapter":"20 R CMD check","heading":"20.3.6 Data","text":"Checking contents ‘data’ directory.\ndata directory can contain file types described exported data.\nData files can contain non-ASCII characters encoding correctly set.\nusually shouldn’t problem ’re saving .Rdata files.\nsee error, look Encoding() column data frame, ensure none “unknown”.\n(’ll typically need fix somewhere import process).\n’ve compressed data file bzip2 xz need declare least Depends: R (>= 2.10) DESCRIPTION.\n’ve used sub-optimal compression algorithm data, re-compress suggested algorithm.\nChecking contents ‘data’ directory.data directory can contain file types described exported data.data directory can contain file types described exported data.Data files can contain non-ASCII characters encoding correctly set.\nusually shouldn’t problem ’re saving .Rdata files.\nsee error, look Encoding() column data frame, ensure none “unknown”.\n(’ll typically need fix somewhere import process).Data files can contain non-ASCII characters encoding correctly set.\nusually shouldn’t problem ’re saving .Rdata files.\nsee error, look Encoding() column data frame, ensure none “unknown”.\n(’ll typically need fix somewhere import process).’ve compressed data file bzip2 xz need declare least Depends: R (>= 2.10) DESCRIPTION.’ve compressed data file bzip2 xz need declare least Depends: R (>= 2.10) DESCRIPTION.’ve used sub-optimal compression algorithm data, re-compress suggested algorithm.’ve used sub-optimal compression algorithm data, re-compress suggested algorithm.","code":""},{"path":"r-cmd-check.html","id":"documentation","chapter":"20 R CMD check","heading":"20.3.7 Documentation","text":"can run common outside devtools::check() devtools::check_man() (automatically calls devtools::document() ).\ndocumentation problems, ’s best iterate quickly check_man(), rather running full check time.Checking Rd files. checks man/*.Rd files use correct Rd syntax. fails, indicates bug roxygen2.Checking Rd metadata. Names aliases must unique across documentation files package. encounter problem ’ve accidentally used @name @aliases multiple places; make sure ’re unique.Checking Rd line widths. Lines Rd files must less 90 characters wide. unlikely occur wrap R code, hence roxygen comments, 80 characters. long urls, use link-shortening service like bit.ly.Checking Rd cross-references. Errors usually represent typos. Recall syntax linking functions packages: \\link[package_name]{function_name}. Sometimes accidentally switch order \\code{} \\link{}: \\link{\\code{function}} work.Checking missing documentation entries. exported objects must documented. See ?tools::undoc details.Checking code/documentation mismatches. check ensures documentation matches code. never fail ’re using roxygen2 automatically keeps sync.Checking Rd \\usage sections.\narguments must documented, @params must document existing argument.\nmay forgotten document argument, forgotten remove documentation argument ’ve removed, misspelled argument name.\nS3 S4 methods need use special \\S3method{} \\S4method{} markup Rd file.\nRoxygen2 generate automatically.Checking Rd \\usage sections.\narguments must documented, @params must document existing argument.\nmay forgotten document argument, forgotten remove documentation argument ’ve removed, misspelled argument name.S3 S4 methods need use special \\S3method{} \\S4method{} markup Rd file.\nRoxygen2 generate automatically.Checking Rd contents. checks autogenerated content made package.skeleton(). Since ’re using package.skeleton() never problem .Checking unstated dependencies examples.\nuse package example, make sure ’s listed Suggests field.\nrunning example code depends , test see ’s available requireNamespace(\"pkg\", quietly = TRUE):\n\n#' @examples\n#' (requireNamespace(\"dplyr\", quietly = TRUE)) {\n#'   ...\n#' }Checking unstated dependencies examples.\nuse package example, make sure ’s listed Suggests field.\nrunning example code depends , test see ’s available requireNamespace(\"pkg\", quietly = TRUE):Checking examples.\nEvery documentation example must run without errors, must take long.\nExclude failing slow tests \\donttest{}.\nSee documenting functions details.\nExamples one last checks run, fixing problems can painful run devtools::check() time.\nInstead, use devtools::run_examples(): checks examples, optional parameter tells function start .\nway ’ve discovered error, can rerun just file, files lead .\nNB: can’t use unexported functions shouldn’t open new graphics devices use two cores.\nIndividual examples shouldn’t take 5s.Checking examples.\nEvery documentation example must run without errors, must take long.\nExclude failing slow tests \\donttest{}.\nSee documenting functions details.Examples one last checks run, fixing problems can painful run devtools::check() time.\nInstead, use devtools::run_examples(): checks examples, optional parameter tells function start .\nway ’ve discovered error, can rerun just file, files lead .NB: can’t use unexported functions shouldn’t open new graphics devices use two cores.\nIndividual examples shouldn’t take 5s.Checking PDF version manual. Occassionally ’ll get error building PDF manual. usually pdf built latex ’ve forgotten escape something. Debugging painful - best bet look latex logs combined tex file work back .Rd files back roxygen comment. consider failure bug roxygen2, please let know.","code":"\n#' @examples\n#' if (requireNamespace(\"dplyr\", quietly = TRUE)) {\n#'   ...\n#' }"},{"path":"r-cmd-check.html","id":"demos","chapter":"20 R CMD check","heading":"20.3.8 Demos","text":"Checking index information.\n’ve written demos, demo must listed demo/00Index.\nfile look like:\ndemo-name-without-extension  Demo description\nanother-demo-name            Another descriptionChecking index information.\n’ve written demos, demo must listed demo/00Index.\nfile look like:","code":"demo-name-without-extension  Demo description\nanother-demo-name            Another description"},{"path":"r-cmd-check.html","id":"compiled-code","chapter":"20 R CMD check","heading":"20.3.9 Compiled code","text":"Checking foreign function calls. .Call(), .C(), .Fortran(), .External() must always called either NativeSymbolInfo object (created @useDynLib) use .package argument. See ?tools::checkFF details.Checking line endings C/C++/Fortran sources/headers. Always use LF line ending.Checking line endings Makefiles. .Checking portable use $(BLAS_LIBS) $(LAPACK_LIBS). Errors indicate issue use BLAS LAPACK.Checking compiled code. Checks ’re using C functions shouldn’t. See details C best practices.","code":""},{"path":"r-cmd-check.html","id":"tests","chapter":"20 R CMD check","heading":"20.3.10 Tests","text":"Checking unstated dependencies tests. Every package used tests must included dependencies.Checking tests.\nfile tests/ run.\n’ve followed instructions testing ’ll least one file: testthat.R.\noutput R CMD check usually helpful, may need look logfile package.Rcheck/tests/testthat.Rout.\nFix failing tests iterating devtools::test().\nOccasionally may problem tests pass run interactively devtools::test(), fail R CMD check.\nusually indicates ’ve made faulty assumption testing environment, ’s often hard figure .Checking tests.\nfile tests/ run.\n’ve followed instructions testing ’ll least one file: testthat.R.\noutput R CMD check usually helpful, may need look logfile package.Rcheck/tests/testthat.Rout.\nFix failing tests iterating devtools::test().Occasionally may problem tests pass run interactively devtools::test(), fail R CMD check.\nusually indicates ’ve made faulty assumption testing environment, ’s often hard figure .","code":""},{"path":"r-cmd-check.html","id":"vignettes","chapter":"20 R CMD check","heading":"20.3.11 Vignettes","text":"Checking ‘build’ directory. build/ used track vignette builds. ’m sure check fail unless ’ve accidentally .Rbuildignored build/ directory.Checking installed files ‘inst/doc’. Don’t put files inst/doc - vignettes now live vignettes/.Checking files ‘vignettes’. Problems usually straightforward - ’ve included files already included R (like jss.cls, jss.bst, Sweave.sty), leftover latex compilation files. Delete files.Checking sizes PDF files ‘inst/doc’. ’re making PDF vignettes, can make small possible running tools::compactPDF().Checking unstated dependencies vignettes. tests, every package use vignette must listed DESCRIPTION. package used vignette, elsewhere, make sure ’s listed Suggests.Checking package vignettes ‘inst/doc’. checks every source vignette (.e. .Rmd) built equivalent (.e. .html) inst/doc. shouldn’t fail ’ve used standard process outlined vignettes. problem, start checking .Rbuildignore.Checking running R code vignettes. R code vignette run. want deliberately execute errors (show user failure looks like), make sure chunk error = TRUE, purl = FALSE.Checking re-building vignette outputs. vignette re-knit make sure output corresponds input. , shouldn’t fail normal circumstances.run vignettes, package first must installed.\nmeans check():Builds package.Installs package without vignettes.Builds vignettes.Re-installs package vignettes.lot compiled code, can rather slow.\nmay want add ---build-vignettes commands list “Build Source Packages” field project options:","code":""},{"path":"continuous-integration.html","id":"continuous-integration","chapter":"21 Continuous integration","heading":"21 Continuous integration","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter currently dumping ground ideas, don’t recommend reading . :::","code":""},{"path":"continuous-integration.html","id":"introduction-16","chapter":"21 Continuous integration","heading":"21.1 Introduction","text":"","code":""},{"path":"continuous-integration.html","id":"gha","chapter":"21 Continuous integration","heading":"21.2 Checking after every commit with GitHub actions","text":"’re using GitHub, recommend, also use GitHub actions.\nGitHub actions allow run code every time push GitHub.use GitHub actions:Run usethis::use_github_action_check_standard() set GitHub action runs R CMD check Linux, Mac, Windows.Run usethis::use_github_action_check_standard() set GitHub action runs R CMD check Linux, Mac, Windows.Commit push GitHub.Commit push GitHub.Wait minutes see results email.Wait minutes see results email.setup place, R CMD check run every time push GitHub whenever someone else submits pull request.\n’ll find failures right away, makes easier fix.\nUsing automated checks also encourages check often locally, know fails ’ll find minutes later, often ’ve moved new problem.","code":""},{"path":"continuous-integration.html","id":"other-uses","chapter":"21 Continuous integration","heading":"21.2.1 Other uses","text":"Since GitHub actions allows run arbitrary code, many things can use :Re-publishing book website every time make change source.\n(Like book!)Re-publishing book website every time make change source.\n(Like book!)Building vignettes publishing website.Building vignettes publishing website.Automatically building documentation website package.Automatically building documentation website package.Learn using GitHub actions R https://github.com/r-lib/actions/tree/master/examples.","code":""},{"path":"release.html","id":"release","chapter":"22 Releasing to CRAN","heading":"22 Releasing to CRAN","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter undergoing heavy restructuring may confusing incomplete. :::","code":""},{"path":"release.html","id":"introduction-17","chapter":"22 Releasing to CRAN","heading":"22.1 Introduction","text":"want package significant traction R community, need submit CRAN.\nSubmitting CRAN lot work just providing version github, vast majority R users install packages github, CRAN provides discoverability, ease installation stamp authenticity.\nCRAN submission process can frustrating, ’s worthwhile, chapter make painless possible.get package ready release, follow steps:Pick version number.Run document R CMD check.Check ’re aligned CRAN policies.Update README.md NEWS.md.Submit package CRAN.Prepare next version updating version numbers.Publicise new version.","code":""},{"path":"release.html","id":"release-process","chapter":"22 Releasing to CRAN","heading":"22.2 The submission process","text":"manually submit package CRAN, create package bundle (devtools::build()) upload https://cran.r-project.org/submit.html, along comments describe process followed.\nsection shows make submission easy possible providing standard structure comments.\nLater, submission, ’ll see actually submit package devtools::release().submitting CRAN, remember CRAN staffed volunteers, full-time jobs.\ntypical week 100 submissions three volunteers process .\nless work make likely pleasant submission experience.recommend store submission comments file called cran-comments.md.\ncran-comments.md checked git (can track time), listed .Rbuildignore (’s included package).\nextension suggests, recommend using Markdown gives standard way laying plain text.\nHowever, contents never rendered another format, don’t need worry sticking closely.\ncran-comments.md recent version httr:layout designed easy skim, easy match R CMD check results seen CRAN maintainers.\nincludes two sections:Check results: always state errors warnings.\nNOTEs go bulleted list.\nNOTE, include message R CMD check brief description think ’s OK.\nNOTEs, ’d say “ERRORs, WARNINGs NOTEs”Check results: always state errors warnings.\nNOTEs go bulleted list.\nNOTE, include message R CMD check brief description think ’s OK.\nNOTEs, ’d say “ERRORs, WARNINGs NOTEs”Downstream dependencies: downstream dependencies, run R CMD check package summarise results.\ndownstream dependencies, keep section, say: “currently downstream dependencies package”.Downstream dependencies: downstream dependencies, run R CMD check package summarise results.\ndownstream dependencies, keep section, say: “currently downstream dependencies package”.described detail .","code":"## R CMD check results\nThere were no ERRORs or WARNINGs. \n\nThere was 1 NOTE:\n\n* checking dependencies in R code ... NOTE\n  Namespace in Imports field not imported from: 'R6'\n\n  R6 is a build-time dependency.\n\n## Downstream dependencies\nI have also run R CMD check on downstream dependencies of httr \n(https://github.com/wch/checkresults/blob/master/httr/r-release). \nAll packages that I could install passed except:\n\n* Ecoengine: this appears to be a failure related to config on \n  that machine. I couldn't reproduce it locally, and it doesn't \n  seem to be related to changes in httr (the same problem exists \n  with httr 0.4)."},{"path":"release.html","id":"release-test-env","chapter":"22 Releasing to CRAN","heading":"22.2.1 Test environments","text":"checking package need make sure passed current development version R works least two platforms.\nR CMD check continuously evolving, ’s good idea check package latest development version, R-devel.\ncan install R-devel machine:Mac: install https://mac.r-project.org/.Mac: install https://mac.r-project.org/.Windows: install https://cran.r-project.org/bin/windows/base/rdevel.htmlWindows: install https://cran.r-project.org/bin/windows/base/rdevel.htmlLinux: either build source, better, learn Docker containers run R-devel container https://github.com/rocker-org/rocker.Linux: either build source, better, learn Docker containers run R-devel container https://github.com/rocker-org/rocker.’s painful manage multiple R versions, especially since ’ll need reinstall packages.\nInstead, can run R CMD check CRAN’s servers devtools::check_win_*() family functions.\nbuild package submit CRAN win-builder.\n10-20 minutes submission, ’ll receive e-mail telling check results.CRAN runs multiple platforms: Windows, Mac OS X, Linux, Solaris.\ndon’t need run R CMD check every one platforms, ’s really good idea least two.\nincreases chances spotting code relies idiosyncrasies specific platform.\ntwo easy ways check different platforms:rhub::check() lets manually run R CMD check platform choosing.rhub::check() lets manually run R CMD check platform choosing.usethis::use_github_action_check_standard() helps set GitHub actions automatically run R CMD check every time push GitHub.usethis::use_github_action_check_standard() helps set GitHub actions automatically run R CMD check every time push GitHub.Debugging code works computer fails elsewhere painful.\nhappens , either install virtualisation tool can run another operating system locally, find friend help figure problem.\nDon’t submit package hope CRAN help figure problem.","code":""},{"path":"release.html","id":"release-check","chapter":"22 Releasing to CRAN","heading":"22.2.2 Check results","text":"’ve already learned use R CMD check ’s important automated checking.\nCompared running R CMD check locally, important differences running CRAN submission:must fix ERRORs WARNINGs.\npackage contains errors warnings accepted CRAN.must fix ERRORs WARNINGs.\npackage contains errors warnings accepted CRAN.Eliminate many NOTEs possible.\nNOTE requires human oversight, precious commodity.\nnotes believe important, almost always easier fix (even fix bit hack) persuade CRAN ’re OK.\nSee check descriptions details fix individual problems.\nNOTEs less likely package flagged additional human checks.\ntime consuming CRAN, best avoided possible.Eliminate many NOTEs possible.\nNOTE requires human oversight, precious commodity.\nnotes believe important, almost always easier fix (even fix bit hack) persuade CRAN ’re OK.\nSee check descriptions details fix individual problems.NOTEs less likely package flagged additional human checks.\ntime consuming CRAN, best avoided possible.can’t eliminate NOTE, document cran-comments.md, describing think spurious.\ncomments easy scan, easy match R CMD check.\nProvide CRAN maintainers everything need one place, even means repeating .\nNB: always one NOTE first submit package.\nreminds CRAN new submission ’ll need extra checks.\ncan’t eliminate , just mention cran-comments.md first submission.can’t eliminate NOTE, document cran-comments.md, describing think spurious.\ncomments easy scan, easy match R CMD check.\nProvide CRAN maintainers everything need one place, even means repeating .NB: always one NOTE first submit package.\nreminds CRAN new submission ’ll need extra checks.\ncan’t eliminate , just mention cran-comments.md first submission.","code":""},{"path":"release.html","id":"release-deps","chapter":"22 Releasing to CRAN","heading":"22.2.3 Reverse dependencies","text":"Finally, ’re releasing new version existing package, ’s responsibility check downstream dependencies (.e. packages list package Depends, Imports, Suggests LinkingTo fields) continue work.\nhelp , devtools provides devtools::revdep_check().\nsection slated revision 2nd edition. meantime, know functionality now provided revdepcheck package. :Sets temporary library doesn’t clobber existing packages installed.Sets temporary library doesn’t clobber existing packages installed.Installs dependencies downstream dependencies.Installs dependencies downstream dependencies.Runs R CMD check package.Runs R CMD check package.Summarises results single file.Summarises results single file.Run usethis::use_revdep() set package useful template.packages fail R CMD check, give package authors least two weeks fix problem submit package CRAN (can easily get maintainer e-mail addresses revdep_maintainers()).\ntwo weeks , re-run checks, list remaining failures cran-comments.md.\npackage accompanied brief explanation either tells CRAN ’s false positive R CMD check (e.g. couldn’t install dependency locally) ’s legitimate change API (maintainer hasn’t fixed yet).Inform CRAN release process: “advised downstream package maintainers problems two weeks ago”.\n’s example recent release dplyr:","code":"Important reverse dependency check notes (full details at \nhttps://github.com/wch/checkresults/tree/master/dplyr/r-release);\n\n* COPASutils, freqweights, qdap, simPH: fail for various reasons. All package \n  authors were informed of the upcoming release and shown R CMD check issues \n  over two weeks ago.\n\n* ggvis: You'll be receiving a submission that fixes these issues very shortly\n  from Winston.\n\n* repra, rPref: uses a deprecated function."},{"path":"release.html","id":"cran-policies","chapter":"22 Releasing to CRAN","heading":"22.3 CRAN policies","text":"well automated checks provided R CMD check, number CRAN policies must checked manually.\nCRAN maintainers typically look closely package’s first submission.’ve summarised common problems :’s vital maintainer’s e-mail address stable way CRAN contact , problems can’t get touch remove package CRAN.\nmake sure ’s something ’s likely around , ’s heavily filtered.’s vital maintainer’s e-mail address stable way CRAN contact , problems can’t get touch remove package CRAN.\nmake sure ’s something ’s likely around , ’s heavily filtered.must clearly identified copyright holders DESCRIPTION: included external source code, must ensure license compatible.\nSee licensing chapter, license section DESCRIPTION, src/ licensing details.must clearly identified copyright holders DESCRIPTION: included external source code, must ensure license compatible.\nSee licensing chapter, license section DESCRIPTION, src/ licensing details.must “make reasonable efforts” get package working across multiple platforms.\nPackages don’t work least two normally considered.must “make reasonable efforts” get package working across multiple platforms.\nPackages don’t work least two normally considered.make external changes without explicit user permission.\nDon’t write file system, change options, install packages, quit R, send information internet, open external software, etc.make external changes without explicit user permission.\nDon’t write file system, change options, install packages, quit R, send information internet, open external software, etc.submit updates frequently.\npolicy suggests new version every 1-2 months .submit updates frequently.\npolicy suggests new version every 1-2 months .recommend following CRAN Policy Watch Twitter account tweets whenever ’s policy change.\ncan also look GitHub repository powers : https://github.com/eddelbuettel/crp/commits/master/texi.","code":""},{"path":"release.html","id":"release-submission","chapter":"22 Releasing to CRAN","heading":"22.4 Release","text":"’re now ready submit package CRAN.\neasiest way run devtools::release().\n:Builds package runs R CMD check one last time.Builds package runs R CMD check one last time.Asks number yes/questions verify followed common best practices.Asks number yes/questions verify followed common best practices.Allows add questions check process including unexported release_questions() function package.\nreturn character vector questions ask.\nexample, httr :\n\nrelease_questions <- function() {\n  c(\n    \"run OAuth demos?\",\n    \"inst/cacert.pem date?\"\n  )\n}\nuseful reminding manual tasks can’t otherwise automated.Allows add questions check process including unexported release_questions() function package.\nreturn character vector questions ask.\nexample, httr :useful reminding manual tasks can’t otherwise automated.Uploads package bundle CRAN submission form including comments cran-comments.md.Uploads package bundle CRAN submission form including comments cran-comments.md.Within next minutes, ’ll receive email notifying submission asking approve (confirms maintainer address correct).\nNext CRAN maintainers run checks get back results.\nnormally takes around 24 hours, occasionally can take 5 days.","code":"\nrelease_questions <- function() {\n  c(\n    \"Have you run all the OAuth demos?\",\n    \"Is inst/cacert.pem up to date?\"\n  )\n}"},{"path":"release.html","id":"on-failure","chapter":"22 Releasing to CRAN","heading":"22.4.1 On failure","text":"package pass R CMD check violation CRAN policies, CRAN maintainer e-mail describe problem(s).\nFailures frustrating, feedback may curt may feel downright insulting.\nArguing CRAN maintainers likely waste time .\nInstead:Breathe.\nrejected CRAN package end world.\nhappens everyone.\nEven members R-core go process CRAN friendlier .\nnumerous packages rejected CRAN.\nbanned submitting CRAN two weeks many existing packages minor problems.Breathe.\nrejected CRAN package end world.\nhappens everyone.\nEven members R-core go process CRAN friendlier .\nnumerous packages rejected CRAN.\nbanned submitting CRAN two weeks many existing packages minor problems.response gets really riled , take couple days cool responding.\nIgnore ad hominem attacks, strive respond technical issues.response gets really riled , take couple days cool responding.\nIgnore ad hominem attacks, strive respond technical issues.devtools problem causes CRAN maintainer annoyed , deeply sorry.\nforward message along address, ’ll send hand-written apology card.devtools problem causes CRAN maintainer annoyed , deeply sorry.\nforward message along address, ’ll send hand-written apology card.Unless feel extremely strongly discussion merited, don’t respond e-mail.\nInstead:Fix identified problems make recommended changes.\nRe-run devtools::check() make sure didn’t accidentally introduce new problems.Fix identified problems make recommended changes.\nRe-run devtools::check() make sure didn’t accidentally introduce new problems.Add “Resubmission” section top cran-comments.md.\nclearly identify package resubmission, list changes made.\n## Resubmission\nresubmission. version :\n\n* Converted DESCRIPTION title title case.\n\n* clearly identified copyright holders DESCRIPTION\n  LICENSE files.Add “Resubmission” section top cran-comments.md.\nclearly identify package resubmission, list changes made.necessary, update check results downstream dependencies sections.necessary, update check results downstream dependencies sections.Run devtools::submit_cran() re-submit package without working release() questions second time.Run devtools::submit_cran() re-submit package without working release() questions second time.","code":"## Resubmission\nThis is a resubmission. In this version I have:\n\n* Converted the DESCRIPTION title to title case.\n\n* More clearly identified the copyright holders in the DESCRIPTION\n  and LICENSE files."},{"path":"release.html","id":"binary-builds","chapter":"22 Releasing to CRAN","heading":"22.4.2 Binary builds","text":"package accepted CRAN built platform.\n’s possible may uncover errors.\nWait 48 hours checks packages run, go check results page package:Prepare patch release fixes problems submit using process .","code":""},{"path":"release.html","id":"post-release","chapter":"22 Releasing to CRAN","heading":"22.5 Prepare for next version","text":"package accepted CRAN, couple technical tasks :use GitHub, go repository release page.\nCreate new release tag version v1.2.3 (.e. “v” followed version package).\nCopy paste contents relevant NEWS.md section release notes.use GitHub, go repository release page.\nCreate new release tag version v1.2.3 (.e. “v” followed version package).\nCopy paste contents relevant NEWS.md section release notes.use git, GitHub, tag release git tag -v1.2.3.use git, GitHub, tag release git tag -v1.2.3.Add .9000 suffix Version field DESCRIPTION indicate development version.\nCreate new heading NEWS.md commit changes.Add .9000 suffix Version field DESCRIPTION indicate development version.\nCreate new heading NEWS.md commit changes.","code":""},{"path":"release.html","id":"promotion","chapter":"22 Releasing to CRAN","heading":"22.6 Publicising your package","text":"Now ’re ready fun part: publicising package.\nreally important.\none use helpful new package don’t know exists.Start writing release announcement.\nR Markdown document briefly describes package (people haven’t used can understand care), ’s new version.\nStart contents NEWS.md, ’ll need modify .\ngoal NEWS.md comprehensive; goal release announcement highlight important changes.\nInclude link end announcement full release notes people can see changes.\npossible, recommend showing examples new features: ’s much easier understand benefit new feature can see action.number places can include announcement:blog, publish .\nnow publish package release announcements RStudio blog.blog, publish .\nnow publish package release announcements RStudio blog.use Twitter, tweet #rstats hashtag.use Twitter, tweet #rstats hashtag.Send r-packages mailing list.\nMessages sent list automatically forwarded R-help mailing list.Send r-packages mailing list.\nMessages sent list automatically forwarded R-help mailing list.","code":""},{"path":"release.html","id":"congratulations","chapter":"22 Releasing to CRAN","heading":"22.7 Congratulations!","text":"released first package CRAN made end book!","code":""},{"path":"lifecycle.html","id":"lifecycle","chapter":"23 Lifecycle","heading":"23 Lifecycle","text":"::: {.rmdnote}\nreading work--progress second edition R Packages. chapter currently dumping ground ideas, don’t recommend reading . :::","code":""},{"path":"lifecycle.html","id":"description-version","chapter":"23 Lifecycle","heading":"23.1 Introduction","text":"","code":""},{"path":"lifecycle.html","id":"version","chapter":"23 Lifecycle","heading":"23.2 Version","text":"Formally, R package version sequence least two integers separated either . -.\nexample, 1.0 0.9.1-10 valid versions, 1 1.0-devel .\ncan parse version number numeric_version().example, package might version 1.9.\nversion number considered R 1.9.0, less version 1.9.2, less version 1.10 (version “one point ten”, “one point one zero”).\nR uses version numbers determine whether package dependencies satisfied.\npackage might, example, import package devtools (>= 1.9.2), case version 1.9 1.9.0 wouldn’t work.recommended framework managing package version number:Always use . separator, never -.Always use . separator, never -.released version number consists three numbers, <major>.<minor>.<patch>.\nversion number 1.9.2, 1 major number, 9 minor number, 2 patch number.\nNever use versions like 1.0, instead always spell three components, 1.0.0.released version number consists three numbers, <major>.<minor>.<patch>.\nversion number 1.9.2, 1 major number, 9 minor number, 2 patch number.\nNever use versions like 1.0, instead always spell three components, 1.0.0.-development package fourth component: development version.\nstart 9000.\nexample, first version package 0.0.0.9000.\ntwo reasons recommendation: First, makes easy see package released -development.\nAlso, use fourth place means ’re limited next version .\n0.0.1, 0.1.0, 1.0.0 greater 0.0.0.9000.\nIncrement development version, e.g. 9000 9001, ’ve added important feature another development package needs depend .-development package fourth component: development version.\nstart 9000.\nexample, first version package 0.0.0.9000.\ntwo reasons recommendation: First, makes easy see package released -development.\nAlso, use fourth place means ’re limited next version .\n0.0.1, 0.1.0, 1.0.0 greater 0.0.0.9000.Increment development version, e.g. 9000 9001, ’ve added important feature another development package needs depend .advice inspired part Semantic Versioning X.Org versioning schemes.\nRead ’d like understand standards versioning used many open source projects.\nFinally, know maintainers follow different philosophies manage package version number.version number package increases subsequent releases package, ’s just incrementing counter – way number changes release can convey information kind changes package.\ndiscuss Section 23.3.\nnow, just remember first version package 0.0.0.9000.\nusethis::create_package() , default.\nusethis::use_version() increments package version; called interactively, argument, presents helpful menu:","code":"\nnumeric_version(\"1.9\") == numeric_version(\"1.9.0\")\n#> [1] TRUE\nnumeric_version(\"1.9.0\") < numeric_version(\"1.10.0\")\n#> [1] TRUE\nusethis::use_version()\n#> Current version is 0.1.\n#> What should the new version be? (0 to exit) \n#> \n#> 1: major --> 1.0\n#> 2: minor --> 0.2\n#> 3: patch --> 0.1.1\n#> 4:   dev --> 0.1.0.9000\n#> \n#> Selection: "},{"path":"lifecycle.html","id":"release-version","chapter":"23 Lifecycle","heading":"23.3 Version number","text":"’ve following advice versioning, version number -development package four components, major.minor.patch.dev, dev least 9000.\nnumber 9000 arbitrary, provides strong visual signal ’s something different version number.\nReleased packages don’t dev component, now need drop pick version number based changes ’ve made.\nexample, current version 0.8.1.9000 next CRAN version 0.8.2, 0.9.0 1.0.0?\nUse advice decide:Increment patch, e.g. 0.8.2 patch: ’ve fixed bugs without adding significant new features.\n’ll often patch release , release, discover show-stopping bug needs fixed ASAP.\nreleases patch number 0.Increment patch, e.g. 0.8.2 patch: ’ve fixed bugs without adding significant new features.\n’ll often patch release , release, discover show-stopping bug needs fixed ASAP.\nreleases patch number 0.Increment minor, e.g. 0.9.0, minor release.\nminor release can include bug fixes, new features changes backward compatibility.\ncommon type release.\n’s perfectly fine many minor releases need use two (even three!) digits, e.g. 1.17.0.Increment minor, e.g. 0.9.0, minor release.\nminor release can include bug fixes, new features changes backward compatibility.\ncommon type release.\n’s perfectly fine many minor releases need use two (even three!) digits, e.g. 1.17.0.Increment major, e.g. 1.0.0, major release.\nbest reserved changes backward compatible likely affect many users.\nGoing 0.b.c 1.0.0 typically indicates package feature complete stable API.\npractice, backward compatibility --nothing threshold.\nexample, make API-incompatible change rarely-used part code, may deserve major number change.\nfix bug many people depend , feel like API breaking change.\nUse best judgement.Increment major, e.g. 1.0.0, major release.\nbest reserved changes backward compatible likely affect many users.\nGoing 0.b.c 1.0.0 typically indicates package feature complete stable API.practice, backward compatibility --nothing threshold.\nexample, make API-incompatible change rarely-used part code, may deserve major number change.\nfix bug many people depend , feel like API breaking change.\nUse best judgement.","code":""},{"path":"lifecycle.html","id":"compatibility","chapter":"23 Lifecycle","heading":"23.4 Backward compatibility","text":"big difference major minor versions whether code backward compatible.\ndifference bit academic R community way people update packages running update.packages(), always updates latest version package, even major version changed, potentially breaking code.\nR users becoming familiar tools like packrat, capture package versions per-project basis, need little cautious making big backward incompatible changes, regardless version number.importance backward compatibility directly proportional number people using package: trading time users’ time.\nharder strive maintain backward compatibility, harder develop new features fix old mistakes.\nBackward compatible code also tends harder read need maintain multiple paths support functionality previous versions.\nconcerned backward compatibility, don’t let paralyse .good reasons make backward incompatible changes - made design mistake makes package harder use ’s better fix sooner rather later.\nneed make backward incompatible change, ’s best gradually.\nProvide interim version(s) now ’d like , provide advice ’s going change.\nDepending ’re changing, use one following techniques let users know ’s happening:Don’t immediately remove function.\nFirst deprecate .\nexample, imagine package version 0.5.0 want remove fun().\nversion, 0.6.0, ’d use .Deprecated() display warning message whenever someone uses function:\n\n# 0.6.0\nfun <- function(x, y, z) {\n  .Deprecated(\"sum\")\n  x + y + z\n}\n\nfun(1, 2, 3)\n#> Warning: 'fun' deprecated.\n#> Use 'sum' instead.\n#> See help(\"Deprecated\")\n#> [1] 6\n, remove function got 0.7.0 (strict, got 1.0.0 since ’s backward incompatible change).Don’t immediately remove function.\nFirst deprecate .\nexample, imagine package version 0.5.0 want remove fun().\nversion, 0.6.0, ’d use .Deprecated() display warning message whenever someone uses function:, remove function got 0.7.0 (strict, got 1.0.0 since ’s backward incompatible change).Similarly, ’re removing function argument, first warn :\n\nbar <- function(x, y, z) {\n  (!missing(y)) {\n    warning(\"argument y deprecated; please use z instead.\", \n      call. = FALSE)\n    z <- y\n  }\n}\n\nbar(1, 2, 3)\n#> Warning: argument y deprecated; please use z instead.Similarly, ’re removing function argument, first warn :’re deprecating lot code, can useful add helper function.\nexample, ggplot2 gg_dep automatically displays message, warning error, depending much version number changed.\n\ngg_dep <- function(version, msg) {\n  v <- .package_version(version)\n  cv <- packageVersion(\"ggplot2\")\n\n  # current major number greater last-good major number, \n  # current minor number 1 greater last-good minor number,\n  # return error.\n  (cv[[1,1]] > v[[1,1]]  ||  cv[[1,2]] > v[[1,2]] + 1) {\n    stop(msg, \" (Defunct; last used version \", version, \")\",\n      call. = FALSE)\n\n  # minor number differs one, give warning\n  } else (cv[[1,2]] > v[[1,2]]) {\n    warning(msg, \" (Deprecated; last used version \", version, \")\",\n      call. = FALSE)\n\n  # subminor number greater, provide message\n  } else (cv[[1,3]] > v[[1,3]]) {\n    message(msg, \" (Deprecated; last used version \", version, \")\")\n  }\n\n  invisible()\n}’re deprecating lot code, can useful add helper function.\nexample, ggplot2 gg_dep automatically displays message, warning error, depending much version number changed.Significant changes existing function requires planning, including making gradual changes multiple versions.\nTry develop sequence transformations change can accompanied informative error message.Significant changes existing function requires planning, including making gradual changes multiple versions.\nTry develop sequence transformations change can accompanied informative error message.want use functionality new version another package, don’t make hard install-time dependency DESCRIPTION (forcing users upgrade package might break code).\nInstead check version run-time:\n\n(packageVersion(\"ggplot2\") < \"1.0.0\") {\n  stop(\"ggplot2 >= 1.0.0 needed function.\", call. = FALSE)\n}\nalso useful ’re responding changes one dependencies - ’ll want version work change.\nallow submit CRAN time, even package.\nmay generate R CMD check notes.\nexample:\n\n(packageVersion(\"foo\") > \"1.0.0\") {\n  foo::baz()\n} else {\n  foo::bar()\n}\nbaz doesn’t exist foo version 1.0.0, ’ll get note doesn’t exist foo’s namespace.\nJust explain ’re working around difference versions submission CRAN.want use functionality new version another package, don’t make hard install-time dependency DESCRIPTION (forcing users upgrade package might break code).\nInstead check version run-time:also useful ’re responding changes one dependencies - ’ll want version work change.\nallow submit CRAN time, even package.\nmay generate R CMD check notes.\nexample:baz doesn’t exist foo version 1.0.0, ’ll get note doesn’t exist foo’s namespace.\nJust explain ’re working around difference versions submission CRAN.","code":"\n# 0.6.0\nfun <- function(x, y, z) {\n  .Deprecated(\"sum\")\n  x + y + z\n}\n\nfun(1, 2, 3)\n#> Warning: 'fun' is deprecated.\n#> Use 'sum' instead.\n#> See help(\"Deprecated\")\n#> [1] 6\nbar <- function(x, y, z) {\n  if (!missing(y)) {\n    warning(\"argument y is deprecated; please use z instead.\", \n      call. = FALSE)\n    z <- y\n  }\n}\n\nbar(1, 2, 3)\n#> Warning: argument y is deprecated; please use z instead.\ngg_dep <- function(version, msg) {\n  v <- as.package_version(version)\n  cv <- packageVersion(\"ggplot2\")\n\n  # If current major number is greater than last-good major number, or if\n  # current minor number is more than 1 greater than last-good minor number,\n  # return an error.\n  if (cv[[1,1]] > v[[1,1]]  ||  cv[[1,2]] > v[[1,2]] + 1) {\n    stop(msg, \" (Defunct; last used in version \", version, \")\",\n      call. = FALSE)\n\n  # If minor number differs by one, give a warning\n  } else if (cv[[1,2]] > v[[1,2]]) {\n    warning(msg, \" (Deprecated; last used in version \", version, \")\",\n      call. = FALSE)\n\n  # If only subminor number is greater, provide a message\n  } else if (cv[[1,3]] > v[[1,3]]) {\n    message(msg, \" (Deprecated; last used in version \", version, \")\")\n  }\n\n  invisible()\n}\nif (packageVersion(\"ggplot2\") < \"1.0.0\") {\n  stop(\"ggplot2 >= 1.0.0 needed for this function.\", call. = FALSE)\n}\nif (packageVersion(\"foo\") > \"1.0.0\") {\n  foo::baz()\n} else {\n  foo::bar()\n}"}]
