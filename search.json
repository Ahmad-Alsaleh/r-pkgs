[{"path":"index.html","id":"welcome","chapter":"Welcome!","heading":"Welcome!","text":" Welcome R packages Hadley Wickham Jenny Bryan. Packages fundamental units reproducible R code. include reusable R functions, documentation describes use , sample data. book ’ll learn turn code packages others can easily download use. Writing package can seem overwhelming first. start basics improve time. doesn’t matter first version isn’t perfect long next version better.work--progress 2nd edition book.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Welcome 2nd edition R Packages! ’re familiar 1st edition, preface describes major changes can focus reading new areas.X main goals edition:Update reflect changes devtools package, specifically, “conscious uncoupling” set smaller, focused packages.Update reflect changes devtools package, specifically, “conscious uncoupling” set smaller, focused packages.Expanded coverage workflow process, alongside presentation important moving parts make R package.Expanded coverage workflow process, alongside presentation important moving parts make R package.comemore comeSpecifics individual chapters:New chapter 2, “Whole Game”, previews key steps package development process.New chapter 2, “Whole Game”, previews key steps package development process.New chapter 3, “Setup”, carved previous Introduction gained detail.New chapter 3, “Setup”, carved previous Introduction gained detail.sections “Organising functions” “Code style”, Chapter 7, “R code”, removed, favor online style guide, https://style.tidyverse.org/. style guide paired new styler package (Müller Walthert 2018) can automatically apply many rules.sections “Organising functions” “Code style”, Chapter 7, “R code”, removed, favor online style guide, https://style.tidyverse.org/. style guide paired new styler package (Müller Walthert 2018) can automatically apply many rules.chapter formerly known “Package structure” expanded split two chapters, one covering package structure state (Chapter 4) another workflows tooling (Chapter 5).chapter formerly known “Package structure” expanded split two chapters, one covering package structure state (Chapter 4) another workflows tooling (Chapter 5).something git/githubsomething git/github","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introduction","heading":"1 Introduction","text":"R, fundamental unit shareable code package. package bundles together code, data, documentation, tests, easy share others. June 2019, 14,000 packages available Comprehensive R Archive Network, CRAN, public clearing house R packages. huge variety packages one reasons R successful: chances someone already solved problem ’re working , can benefit work downloading package.’re reading book, already know use packages:install CRAN install.packages(\"x\").use R library(\"x\").get help package?x help(package = \"x\").goal book teach develop packages can write , just use people’s. write package? One compelling reason code want share others. Bundling code package makes easy people use , like , already know use packages. code package, R user can easily download , install learn use .packages useful even never share code. Hilary Parker says introduction packages: “Seriously, doesn’t sharing code (although added benefit!). saving time.” Organising code package makes life easier packages come conventions. example, put R code R/, put tests tests/ put data data/. conventions helpful :save time — don’t need think best way organise\nproject, can just follow template.save time — don’t need think best way organise\nproject, can just follow template.Standardised conventions lead standardised tools — buy \nR’s package conventions, get many tools free.Standardised conventions lead standardised tools — buy \nR’s package conventions, get many tools free.’s even possible use packages structure data analyses, described Marwick, Boettiger, Mullen (Marwick, Boettiger, Mullen 2018a) (Marwick, Boettiger, Mullen 2018b).","code":""},{"path":"intro.html","id":"intro-phil","chapter":"1 Introduction","heading":"1.1 Philosophy","text":"book espouses philosophy package development: anything can automated, automated. little possible hand. much possible functions. goal spend time thinking want package rather thinking minutiae package structure.philosophy realised primarily devtools package, public face suite R functions automate common development tasks. release version 2.0.0 October 2018 marked internal restructuring set focused packages, devtools becoming meta-package. usethis package sub-package likely interact directly; explain devtools-usethis relationship section 3.2.always, goal devtools make package development painless possible. encapsulates best practices developed first author Hadley Wickham, initially years prolific solo developer. recently, assembled team ~10 developers RStudio, collectively look ~150 open source R packages, including known tidyverse. reach team allows us explore space possible mistakes extraordinary scale. Fortunately, also affords us opportunity reflect successes failures, company expert sympathetic colleagues. try develop practices make life enjoyable maintainer users package. devtools meta-package lessons made concrete.book, highlight specific ways RStudio can expedite package development workflow, specially formatted sections like .devtools works hand--hand RStudio, believe best development environment R users. main alternative Emacs Speaks Statistics (ESS), rewarding environment ’re willing put time learn Emacs customise needs. history ESS stretches back 20 years (predating R!), ’s still actively developed many workflows described book also available . loyal vim, recommend Nvim-R plugin.Together, devtools RStudio insulate low-level details packages built. start develop packages, highly recommend learn details. best resource official details package development always official writing R extensions manual. However, manual can hard understand ’re already familiar basics packages. ’s also exhaustive, covering every possible package component, rather focusing common useful components, book . Writing R extensions useful resource ’ve mastered basics want learn ’s going hood.","code":""},{"path":"intro.html","id":"intro-outline","chapter":"1 Introduction","heading":"1.2 In this book","text":"Chapter 2 runs development small toy package. ’s meant paint Big Picture suggest workflow, descend detailed treatment key components R package.Chapter 3 describes prepare system package development, requirements simply running R scripts. includes recommendations optional setup can make workflow pleasant, tends lead higher-quality product.basic structure package varies across different states explained chapter 4.Chapter 5 goes core workflows come repeatedly package developers. chapter also covers connections favored tools, devtools/usethis RStudio, philosophies drive design tools.Subsequent chapters book go details package component. ’re roughly organised order importance:R code, chapter 7: important directory R/, R\ncode lives. package just directory still useful package. (\nindeed, stop reading book chapter, ’ll still\nlearned useful new skills.)R code, chapter 7: important directory R/, R\ncode lives. package just directory still useful package. (\nindeed, stop reading book chapter, ’ll still\nlearned useful new skills.)Package metadata, chapter 8: DESCRIPTION lets \ndescribe package needs work. ’re sharing package,\n’ll also use DESCRIPTION describe , can use \n(license), contact things go wrong.Package metadata, chapter 8: DESCRIPTION lets \ndescribe package needs work. ’re sharing package,\n’ll also use DESCRIPTION describe , can use \n(license), contact things go wrong.Documentation, chapter 10: want people (including\nfuture-!) understand use functions package, ’ll\nneed document . ’ll show use roxygen2 document \nfunctions. recommend roxygen2 lets write code \ndocumentation together continuing produce R’s standard documentation\nformat.Documentation, chapter 10: want people (including\nfuture-!) understand use functions package, ’ll\nneed document . ’ll show use roxygen2 document \nfunctions. recommend roxygen2 lets write code \ndocumentation together continuing produce R’s standard documentation\nformat.Vignettes, chapter 11: function documentation describes \nnit-picky details every function package. Vignettes give big\npicture. ’re long-form documents show combine multiple parts\npackage solve real problems. ’ll show use Rmarkdown\nknitr create vignettes minimum fuss.Vignettes, chapter 11: function documentation describes \nnit-picky details every function package. Vignettes give big\npicture. ’re long-form documents show combine multiple parts\npackage solve real problems. ’ll show use Rmarkdown\nknitr create vignettes minimum fuss.Tests, chapter 12: ensure package works designed (\ncontinues work make changes), ’s essential write unit tests\ndefine correct behaviour, alert functions break. \nchapter, ’ll teach use testthat package convert \ninformal interactive tests ’re already formal, automated\ntests.Tests, chapter 12: ensure package works designed (\ncontinues work make changes), ’s essential write unit tests\ndefine correct behaviour, alert functions break. \nchapter, ’ll teach use testthat package convert \ninformal interactive tests ’re already formal, automated\ntests.Namespace, chapter 13: play nicely others, package\nneeds define functions makes available packages \nfunctions requires packages. job NAMESPACE\nfile ’ll show use roxygen2 generate .\nNAMESPACE one challenging parts developing R\npackage ’s critical master want package work reliably.Namespace, chapter 13: play nicely others, package\nneeds define functions makes available packages \nfunctions requires packages. job NAMESPACE\nfile ’ll show use roxygen2 generate .\nNAMESPACE one challenging parts developing R\npackage ’s critical master want package work reliably.External data, chapter 14: data/ directory allows \ninclude data package. might bundle data\nway ’s easy R users access, just provide compelling\nexamples documentation.External data, chapter 14: data/ directory allows \ninclude data package. might bundle data\nway ’s easy R users access, just provide compelling\nexamples documentation.Compiled code, chapter 15: R code designed human efficiency,\ncomputer efficiency, ’s useful tool back pocket\nallows write fast code. src/ directory allows include\nspeedy compiled C C++ code solve performance bottlenecks \npackage.Compiled code, chapter 15: R code designed human efficiency,\ncomputer efficiency, ’s useful tool back pocket\nallows write fast code. src/ directory allows include\nspeedy compiled C C++ code solve performance bottlenecks \npackage.components, chapter 17: chapter documents handful \ncomponents rarely needed: demo/, exec/, po/ tools/.components, chapter 17: chapter documents handful \ncomponents rarely needed: demo/, exec/, po/ tools/.final chapters describe general best practices specifically tied one directory:Git GitHub, chapter 18: mastering version control system \nvital easily collaborate others, useful even solo work\nallows easily undo mistakes. chapter, ’ll learn\nuse popular Git GitHub combo RStudio.Git GitHub, chapter 18: mastering version control system \nvital easily collaborate others, useful even solo work\nallows easily undo mistakes. chapter, ’ll learn\nuse popular Git GitHub combo RStudio.Automated checking, chapter 19: R provides useful\nautomated quality checks form R CMD check. Running regularly\ngreat way avoid many common mistakes. results can sometimes \nbit cryptic, provide comprehensive cheatsheet help convert\nwarnings actionable insight.Automated checking, chapter 19: R provides useful\nautomated quality checks form R CMD check. Running regularly\ngreat way avoid many common mistakes. results can sometimes \nbit cryptic, provide comprehensive cheatsheet help convert\nwarnings actionable insight.Release, chapter 20: life-cycle package culminates \nrelease public. chapter compares two main options (CRAN \nGitHub) offers general advice managing process.Release, chapter 20: life-cycle package culminates \nrelease public. chapter compares two main options (CRAN \nGitHub) offers general advice managing process.lot learn, don’t feel overwhelmed. Start minimal subset useful features (e.g. just R/ directory!) build time. paraphrase Zen monk Shunryu Suzuki: “package perfect way — can use little improvement”.","code":""},{"path":"intro.html","id":"intro-ack","chapter":"1 Introduction","heading":"1.3 Acknowledgments","text":"Since first edition R Packages published, packages supporting workflows described undergone extensive development. original trio devtools, roxygen2, testthat expanded include packages created “conscious uncoupling” devtools. packages originate Hadley Wickham (HW), devtools roots. many significant contributors, many now serve maintainers:devtools: HW, Winston Chang, Jim Hester (maintainer, >= v1.13.5)usethis: HW, Jennifer Bryan (maintainer >= v1.5.0)roxygen2: HW (maintainer), Peter Danenburg, Manuel Eugstertestthat: HW (maintainer)desc: Gábor Csárdi (maintainer), Kirill Müller, Jim Hesterpkgbuild: HW, Jim Hester (maintainer)pkgload: HW, Jim Hester (maintainer), Winston Changrcmdcheck: Gábor Csárdi (maintainer)remotes: HW, Jim Hester (maintainer), Gábor Csárdi, Winston Chang, Martin Morgan, Dan Tenenbaumrevdepcheck: HW, Gábor Csárdi (maintainer)sessioninfo: HW, Gábor Csárdi (maintainer), Winston Chang, Robert Flight, Kirill Müller, Jim HesterThis book R package development community benefit tremendously experts smooth specific pain points:Kevin Ushey, JJ Allaire, Dirk Eddelbuettel tirelessly answered sorts C, C++, Rcpp questions.Craig Citro wrote much initial code facilitate using Travis-CI R packages.Jeroen Ooms also helps maintain R community infrastructure, current R support Travis-CI (along Jim Hester), Windows toolchain.TODO: revisit rest section 2nd edition nears completion. Currently applies worded 1st edition.Often way learn right way wrong way first. suffering many package development errors, ’d like thank CRAN maintainers, especially Brian Ripley, Uwe Ligges Kurt Hornik.book written revised open truly community effort: many people read drafts, fix typos, suggest improvements, contribute content. Without contributors, book wouldn’t nearly good , deeply grateful help.special thanks goes Peter Li, read book cover--cover provided many fixes. also deeply appreciate time reviewers (Duncan Murdoch, Karthik Ram, Vitalie Spinu Ramnath Vaidyanathan) spent reading book giving thorough feedback.Thanks go contributors submitted improvements via github (alphabetical order): @aaronwolen, @adessy, Adrien Todeschini, Andrea Cantieni, Andy Visser, @apomatix, Ben Bond-Lamberty, Ben Marwick, Brett K, Brett Klamer, @contravariant, Craig Citro, David Robinson, David Smith, @davidkane9, Dean Attali, Eduardo Ariño de la Rubia, Federico Marini, Gerhard Nachtmann, Gerrit-Jan Schutten, Hadley Wickham, Henrik Bengtsson, @heogden, Ian Gow, @jacobbien, Jennifer (Jenny) Bryan, Jim Hester, @jmarshallnz, Jo-Anne Tan, Joanna Zhao, Joe Cainey, John Blischak, @jowalski, Justin Alford, Karl Broman, Karthik Ram, Kevin Ushey, Kun Ren, @kwenzig, @kylelundstedt, @lancelote, Lech Madeyski, @lindbrook, @maiermarco, Manuel Reif, Michael Buckley, @MikeLeonard, Nick Carchedi, Oliver Keyes, Patrick Kimes, Paul Blischak, Peter Meissner, @PeterDee, Po Su, R. Mark Sharp, Richard M. Smith, @rmar073, @rmsharp, Robert Krzyzanowski, @ryanatanner, Sascha Holzhauer, @scharne, Sean Wilkinson, @SimonPBiggs, Stefan Widgren, Stephen Frank, Stephen Rushe, Tony Breyal, Tony Fischetti, @urmils, Vlad Petyuk, Winston Chang, @winterschlaefer, @wrathematics, @zhaoy.light bulb image used workflow tips comes www.vecteezy.com.","code":""},{"path":"intro.html","id":"intro-conventions","chapter":"1 Introduction","heading":"1.4 Conventions","text":"Throughout book, write foo() refer functions, bar refer variables function parameters, baz/ paths.Larger code blocks intermingle input output. Output commented electronic version book, e.g., https://r-pkgs.org, can easily copy paste examples R. Output comments look like #> distinguish regular comments.","code":""},{"path":"intro.html","id":"intro-colophon","chapter":"1 Introduction","heading":"1.5 Colophon","text":"book authored using R Markdown, using bookdown, inside RStudio. website hosted Netlify, automatically updated every commit GitHub actions. complete source available GitHub.version book built :","code":"\nlibrary(devtools)\n#> Loading required package: usethis\nlibrary(roxygen2)\nlibrary(testthat)\n#> \n#> Attaching package: 'testthat'\n#> The following object is masked from 'package:devtools':\n#> \n#>     test_file\ndevtools::session_info()\n#> ─ Session info ───────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.0 (2022-04-22)\n#>  os       Ubuntu 20.04.4 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language (EN)\n#>  collate  C.UTF-8\n#>  ctype    C.UTF-8\n#>  tz       UTC\n#>  date     2022-05-20\n#>  pandoc   2.7.3 @ /usr/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────\n#>  package     * version date (UTC) lib source\n#>  bookdown      0.26    2022-04-15 [1] RSPM\n#>  brio          1.1.3   2021-11-30 [1] RSPM\n#>  bslib         0.3.1   2021-10-06 [1] RSPM\n#>  cachem        1.0.6   2021-08-19 [1] RSPM\n#>  callr         3.7.0   2021-04-20 [1] RSPM\n#>  cli           3.3.0   2022-04-25 [1] CRAN (R 4.2.0)\n#>  crayon        1.5.1   2022-03-26 [1] RSPM\n#>  desc          1.4.1   2022-03-06 [1] RSPM\n#>  devtools    * 2.4.3   2021-11-30 [1] RSPM\n#>  digest        0.6.29  2021-12-01 [1] RSPM\n#>  downlit       0.4.0   2021-10-29 [1] RSPM\n#>  ellipsis      0.3.2   2021-04-29 [1] RSPM\n#>  evaluate      0.15    2022-02-18 [1] RSPM\n#>  fastmap       1.1.0   2021-01-25 [1] RSPM\n#>  fs            1.5.2   2021-12-08 [1] RSPM\n#>  glue          1.6.2   2022-02-24 [1] RSPM\n#>  htmltools     0.5.2   2021-08-25 [1] RSPM\n#>  jquerylib     0.1.4   2021-04-26 [1] RSPM\n#>  jsonlite      1.8.0   2022-02-22 [1] RSPM\n#>  knitr         1.39    2022-04-26 [1] CRAN (R 4.2.0)\n#>  lifecycle     1.0.1   2021-09-24 [1] RSPM\n#>  magrittr      2.0.3   2022-03-30 [1] RSPM\n#>  memoise       2.0.1   2021-11-26 [1] RSPM\n#>  pkgbuild      1.3.1   2021-12-20 [1] RSPM\n#>  pkgload       1.2.4   2021-11-30 [1] RSPM\n#>  prettyunits   1.1.1   2020-01-24 [1] RSPM\n#>  processx      3.5.3   2022-03-25 [1] RSPM\n#>  ps            1.7.0   2022-04-23 [1] CRAN (R 4.2.0)\n#>  purrr         0.3.4   2020-04-17 [1] RSPM\n#>  R6            2.5.1   2021-08-19 [1] RSPM\n#>  remotes       2.4.2   2021-11-30 [1] RSPM\n#>  rlang         1.0.2   2022-03-04 [1] RSPM\n#>  rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n#>  roxygen2    * 7.2.0   2022-05-13 [1] CRAN (R 4.2.0)\n#>  rprojroot     2.0.3   2022-04-02 [1] RSPM\n#>  sass          0.4.1   2022-03-23 [1] RSPM\n#>  sessioninfo   1.2.2   2021-12-06 [1] RSPM\n#>  stringi       1.7.6   2021-11-29 [1] RSPM\n#>  stringr       1.4.0   2019-02-10 [1] RSPM\n#>  testthat    * 3.1.4   2022-04-26 [1] CRAN (R 4.2.0)\n#>  usethis     * 2.1.5   2021-12-09 [1] RSPM\n#>  withr         2.5.0   2022-03-03 [1] RSPM\n#>  xfun          0.31    2022-05-10 [1] RSPM\n#>  xml2          1.3.3   2021-11-30 [1] RSPM\n#>  yaml          2.3.5   2022-02-21 [1] RSPM\n#> \n#>  [1] /home/runner/work/_temp/Library\n#>  [2] /opt/R/4.2.0/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────"},{"path":"whole-game.html","id":"whole-game","chapter":"2 The whole game","heading":"2 The whole game","text":"Spoiler alert!chapter runs development small toy package.\n’s meant paint Big Picture suggest workflow, descend detailed treatment key components R package.keep pace brisk, exploit modern conveniences devtools package RStudio IDE.\nlater chapters, explicit helpers us.","code":""},{"path":"whole-game.html","id":"load-devtools-and-friends","chapter":"2 The whole game","heading":"2.1 Load devtools and friends","text":"can initiate new package active R session.\ndon’t need worry whether ’re existing new project .\nfunctions use take care .Load devtools package, public face set packages support various aspects package development.\nobvious usethis package, ’ll see also loaded.old version devtools? Compare version upgrade necessary.","code":"\nlibrary(devtools)\n#> Loading required package: usethis\npackageVersion(\"devtools\")\n#> [1] '2.4.3'"},{"path":"whole-game.html","id":"toy-package-regexcite","chapter":"2 The whole game","heading":"2.2 Toy package: regexcite","text":"use various functions devtools build small toy package scratch, features commonly seen released packages:Functions address specific need, case helpers work regular expressions.Version control open development process.\ncompletely optional work, highly recommended.\n’ll see Git GitHub help us expose intermediate stages \ntoy package.\ncompletely optional work, highly recommended.\n’ll see Git GitHub help us expose intermediate stages \ntoy package.Access established workflows installation, getting help, checking quality.\nDocumentation individual functions via roxygen2.\nUnit testing testthat.\nDocumentation package whole via executable README.Rmd.\nDocumentation individual functions via roxygen2.Unit testing testthat.Documentation package whole via executable README.Rmd.call package regexcite couple functions make common tasks regular expressions easier.\nPlease note functions super simple definitely point! real work, several proper R packages address problem space:stringr (uses stringi)stringirexrematch2The regexcite package goal .\ndevice demonstrating typical workflow package development devtools.","code":""},{"path":"whole-game.html","id":"peek-at-the-finished-product","chapter":"2 The whole game","heading":"2.3 Peek at the finished product","text":"regexcite package tracked development Git version control system.\npurely optional can certainly follow along without implementing .\nnice side benefit eventually connect remote repository GitHub, means can see glorious result working towards visiting regexcite GitHub: https://github.com/jennybc/regexcite.\ninspecting commit history especially diffs, can see exactly changes step process laid .","code":""},{"path":"whole-game.html","id":"create_package","chapter":"2 The whole game","heading":"2.4 create_package()","text":"Call create_package() initialize new package directory computer (create directory, necessary).\nSee section 5.1.3 .Make deliberate choice create package computer.\nprobably somewhere within home directory, alongside R projects.\nnested inside another RStudio Project, R package, Git repo.\nR package library, holds packages already built installed.\nconversion source package create installed package part devtools facilitates.\nDon’t try devtools’ job !\nSee 5.1.4 .Substitute chosen path create_package() call like :work temp directory, book built non-interactively, cloud.\nBehind scenes, ’re executing create_package() command, don’t surprised output differs bit .’re working RStudio, find new instance RStudio, opened new regexcite package (Project).\nsomehow need manually, navigate directory double click regexcite.Rproj.\nRStudio special handling packages now see Build tab pane Environment History.’s new directory also R package , probably, RStudio Project?\n’s listing (locally, can consult Files pane):file browser, go > Show Hidden Files toggle visibility hidden files (.k.. “dotfiles”).\nselect visible time, sometimes want see ..Rbuildignore lists files need around \nincluded building R package source.\n4.3.1..Rproj.user, , directory used internally RStudio..gitignore anticipates Git usage ignores standard,\nbehind--scenes files created R RStudio.\nEven plan use Git, harmless.DESCRIPTION provides metadata package.\nedit shortly.NAMESPACE declares functions package exports \nexternal use external functions package imports \npackages.\npoint, empty, except comment declaring file\nedit hand.R/ directory “business end” package.\nsoon contain .R files function definitions.regexcite.Rproj file makes directory RStudio Project.\nEven don’t use RStudio, file harmless.\ncan suppress creation create_package(..., rstudio = FALSE).\n5.2.probably need call library(devtools) , create_package() probably dropped fresh R session, new package.","code":"\ncreate_package(\"~/path/to/regexcite\")\n#> ✔ Creating '/tmp/Rtmpde0k7R/regexcite/'\n#> ✔ Setting active project to '/tmp/Rtmpde0k7R/regexcite'\n#> ✔ Creating 'R/'\n#> ✔ Writing 'DESCRIPTION'\n#> Package: regexcite\n#> Title: What the Package Does (One Line, Title Case)\n#> Version: 0.0.0.9000\n#> Authors@R (parsed):\n#>     * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)\n#> Description: What the package does (one paragraph).\n#> License: `use_mit_license()`, `use_gpl3_license()` or friends to\n#>     pick a license\n#> Encoding: UTF-8\n#> Roxygen: list(markdown = TRUE)\n#> RoxygenNote: 7.1.2\n#> ✔ Writing 'NAMESPACE'\n#> ✔ Writing 'regexcite.Rproj'\n#> ✔ Adding '^regexcite\\\\.Rproj$' to '.Rbuildignore'\n#> ✔ Adding '.Rproj.user' to '.gitignore'\n#> ✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n#> ✔ Setting active project to '<no active project>'\n#> # A tibble: 6 × 2\n#>   path            type     \n#>   <fs::path>      <fct>    \n#> 1 .Rbuildignore   file     \n#> 2 .gitignore      file     \n#> 3 DESCRIPTION     file     \n#> 4 NAMESPACE       file     \n#> 5 R               directory\n#> 6 regexcite.Rproj file\nlibrary(devtools)"},{"path":"whole-game.html","id":"use_git","chapter":"2 The whole game","heading":"2.5 use_git()","text":"use Git another version control system optional, recommended practice long-term.\nexplain importance Chapter 18.regexcite directory R source package RStudio Project.\nNow make also Git repository, use_git().interactive session, asked want commit files probably accept offer.\nBehind scenes, ’ll cause happen us.’s new?\ncreation .git directory, hidden contexts, including RStudio file browser.\nexistence evidence indeed initialized Git repo .’re using RStudio, probably requested permission relaunch Project, .\ncan manually quitting, relaunching RStudio double clicking regexcite.Rproj.\nNow, addition package development support, access basic Git client Git tab Environment/History/Build pane.Click History (clock icon Git pane) , consented, see initial commit made via use_git():RStudio can initialize Git repository, Project, even ’s R package, long ’ve set RStudio + Git integration.\nTools > Version Control > Project Setup.\nchoose Version control system: Git initialize new git repository project.","code":"\nuse_git()\n#> ✔ Initialising Git repo\n#> ✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store' to '.gitignore'\n#> # A tibble: 1 × 2\n#>   path       type     \n#>   <fs::path> <fct>    \n#> 1 .git       directory\n#> # A tibble: 1 × 3\n#>   commit                                   author            message\n#>   <chr>                                    <chr>             <chr>  \n#> 1 d685e06184a029865c61b4aa826fd9e2e06796a9 jennybc <jennybc… \"Initi…"},{"path":"whole-game.html","id":"write-the-first-function","chapter":"2 The whole game","heading":"2.6 Write the first function","text":"fairly common task dealing strings need split single string many parts.\nstrsplit() function base R exactly .Take close look return value.shape return value often surprises people , least, inconveniences .\ninput character vector length one output list length one.\nmakes total sense light R’s fundamental tendency towards vectorization.\nsometimes ’s still bit bummer.\nOften know input morally scalar, .e. ’s just single string, really want output character vector parts.leads R users employ various methods “unlist”-ing result:second, safer solution basis inaugural function regexcite: strsplit1().book teach write functions R.\nlearn take look Functions chapter R Data Science Functions chapter Advanced R.name strsplit1() nod handy paste0(), first appeared R 2.15.0 2012.\npaste0() created address extremely common use case paste()-ing strings together without separator.\npaste0() lovingly described “statistical computing’s influential contribution 21st century”.","code":"\n(x <- \"alfa,bravo,charlie,delta\")\n#> [1] \"alfa,bravo,charlie,delta\"\nstrsplit(x, split = \",\")\n#> [[1]]\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\nstr(strsplit(x, split = \",\"))\n#> List of 1\n#>  $ : chr [1:4] \"alfa\" \"bravo\" \"charlie\" \"delta\"\nunlist(strsplit(x, split = \",\"))\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nstrsplit(x, split = \",\")[[1]]\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\nstrsplit1 <- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}"},{"path":"whole-game.html","id":"use_r","chapter":"2 The whole game","heading":"2.7 use_r()","text":"shall define strsplit1()?\nSave .R file, R/ subdirectory package.\nreasonable starting position make new .R file user-facing function package name file function.\nadd functions, ’ll want relax begin group related functions together.\n’ll save definition strsplit1() file R/strsplit1.R.helper use_r() creates /opens script R/.\nreally shines mature package, navigating .R files associated test file.\n, even , ’s useful keep getting carried away working Untitled4.Put definition strsplit1() definition strsplit1() R/strsplit1.R save .\nfile R/strsplit1.R contain top-level code recently executed, definition practice input x, library(devtools), use_git().\nforeshadows adjustment ’ll need make transition writing R scripts R packages.\nPackages scripts use different mechanisms declare dependency packages store example test code.\nexplore Chapter 7.","code":"\nuse_r(\"strsplit1\")\n#> • Edit 'R/strsplit1.R'\n#> • Call `use_test()` to create a matching test file"},{"path":"whole-game.html","id":"whole-game-load-all","chapter":"2 The whole game","heading":"2.8 load_all()","text":"test drive strsplit1()?\nregular R script, might use RStudio send function definition R Console define strsplit1() global environment.\nmaybe ’d call source(\"R/strsplit1.R\").\npackage development, however, devtools offers robust approach.\nSee section 5.4 .Call load_all() make strsplit1() available experimentation.Now call strsplit1(x) see works.Note load_all() made strsplit1() function available, although exist global environment.see TRUE instead FALSE, indicates ’re still using script-oriented workflow sourcing functions.\n’s get back track:Clean global environment restart R.Re-attach devtools library(devtools) re-load regexcite \nload_all().Redefine test input x call strsplit1(x, split = \",\") .\nwork!Run exists(\"strsplit1\", = globalenv(), inherits = FALSE) \nsee FALSE.load_all() simulates process building, installing, attaching regexcite package.\npackage accumulates functions, exported, , call , call functions packages depend , load_all() gives much accurate sense package developing test driving functions defined global environment.\nAlso load_all() allows much faster iteration actually building, installing, attaching package.Review far:wrote first function, strsplit1(), split string character\nvector (list containing character vector).used load_all() quickly make function available interactive\nuse, ’d built installed regexcite attached via\nlibrary(regexcite).RStudio exposes load_all() Build menu, Build pane via > Load , keyboard shortcuts Ctrl + Shift + L (Windows & Linux) Cmd + Shift + L (macOS).","code":"\nload_all()\n#> ℹ Loading regexcite\n(x <- \"alfa,bravo,charlie,delta\")\n#> [1] \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\nexists(\"strsplit1\", where = globalenv(), inherits = FALSE)\n#> [1] FALSE"},{"path":"whole-game.html","id":"commit-strsplit1","chapter":"2 The whole game","heading":"2.8.1 Commit strsplit1()","text":"’re using Git, use preferred method commit new R/strsplit1.R file.\nbehind scenes ’s associated diff.point , commit step.\nRemember commits available public repository.","code":"#> diff --git a/R/strsplit1.R b/R/strsplit1.R\n#> new file mode 100644\n#> index 0000000..29efb88\n#> --- /dev/null\n#> +++ b/R/strsplit1.R\n#> @@ -0,0 +1,3 @@\n#> +strsplit1 <- function(x, split) {\n#> +  strsplit(x, split = split)[[1]]\n#> +}"},{"path":"whole-game.html","id":"check","chapter":"2 The whole game","heading":"2.9 check()","text":"informal, empirical evidence strsplit1() works.\ncan sure moving parts regexcite package still work?\nmay seem silly check, small addition, ’s good establish habit checking often.R CMD check, executed shell, gold standard checking R package full working order.\ncheck() convenient way run without leaving R session.Note check() produces rather voluminous output, optimized interactive consumption.\nintercept just reveal summary.\nlocal check() output different.Read output check!\nDeal problems early often.\n’s just like incremental development .R .Rmd files.\nlonger go full checks everything works, harder becomes pinpoint solve problems.point, expect 1 warning (0 errors, 0 notes):’ll address soon, exactly says.RStudio exposes check() Build menu, Build pane via Check, keyboard shortcuts Ctrl + Shift + E (Windows & Linux) Cmd + Shift + E (macOS).","code":"\ncheck()\n#> ── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\n#> Duration: 24.3s\n#> \n#> ❯ checking DESCRIPTION meta-information ... WARNING\n#>   Non-standard license specification:\n#>     `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n#>     license\n#>   Standardizable: FALSE\n#> \n#> 0 errors ✔ | 1 warning ✖ | 0 notes ✔Non-standard license specification:\n  `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n  license"},{"path":"whole-game.html","id":"edit-description","chapter":"2 The whole game","heading":"2.10 Edit DESCRIPTION","text":"DESCRIPTION file provides metadata package covered fully chapter 8.\ngood time look regexcite’s current DESCRIPTION.\n’ll see ’s populated boilerplate content, needs replaced.Make edits:Make author. don’t ORCID, can omit \ncomment = ... portion.Write descriptive text Title Description fields.Use Ctrl + . RStudio start typing “DESCRIPTION” activate helper makes easy open file editing.\naddition filename, hint can function name.\nhandy package lots files.’re done, DESCRIPTION look similar :","code":"Package: regexcite\nTitle: Make Regular Expressions More Exciting\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Jane\", \"Doe\", , \"jane@example.com\", role = c(\"aut\", \"cre\"))\nDescription: Convenience functions to make some common tasks with string\n    manipulation and regular expressions a bit easier.\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.1.2"},{"path":"whole-game.html","id":"use_mit_license","chapter":"2 The whole game","heading":"2.11 use_mit_license()","text":"Pick License, License. – Jeff AtwoodWe currently placeholder License field DESCRIPTION ’s deliberately invalid suggests resolution.Let’s call use_mit_license().configures License field correctly MIT license, promises name copyright holders year LICENSE file.\nOpen newly created LICENSE file confirm looks something like :Like license helpers, use_mit_license() also puts copy full license LICENSE.md adds file .Rbuildignore.\n’s considered best practice include full license package’s source, GitHub, CRAN disallows inclusion file package tarball.","code":"License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nuse_mit_license()\n#> ✔ Setting License field in DESCRIPTION to 'MIT + file LICENSE'\n#> ✔ Writing 'LICENSE'\n#> ✔ Writing 'LICENSE.md'\n#> ✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'YEAR: 2022\nCOPYRIGHT HOLDER: regexcite authors"},{"path":"whole-game.html","id":"whole-game-document","chapter":"2 The whole game","heading":"2.12 document()","text":"Wouldn’t nice get help strsplit1(), just like R functions?\nrequires package special R documentation file, man/strsplit1.Rd, written R-specific markup language sort like LaTeX.\nLuckily don’t necessarily author directly.write specially formatted comment right strsplit1(), source file, let package called roxygen2 handle creation man/strsplit1.Rd.\nmotivation mechanics roxygen2 covered chapter 10.use RStudio, open R/strsplit1.R source editor put cursor somewhere strsplit1() function definition.\nNow Code > Insert roxygen skeleton.\nspecial comment appear function, line begins #'.\nRStudio inserts barebones template, need edit look something like .don’t use RStudio, create comment .\nRegardless, modify look something like :’re done yet!\nstill need trigger conversion new roxygen comment man/strsplit1.Rd document():RStudio exposes document() Build menu, Build pane via > Document, keyboard shortcuts Ctrl + Shift + D (Windows & Linux) Cmd + Shift + D (macOS).now able preview help file like :’ll see message like “Rendering development documentation ‘strsplit1’”, reminds basically previewing draft documentation.\n, documentation present package’s source, yet present installed package.\nfact, haven’t installed regexcite yet, soon.Note also package’s documentation won’t properly wired formally built installed.\npolishes niceties like links help files creation package index.","code":"\n#' Split a string\n#'\n#' @param x A character vector with one element.\n#' @param split What to split on.\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x <- \"alfa,bravo,charlie,delta\"\n#' strsplit1(x, split = \",\")\nstrsplit1 <- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}\ndocument()\n#> ℹ Updating regexcite documentation\n#> ℹ Loading regexcite\n#> Writing NAMESPACE\n#> Writing strsplit1.Rd\n?strsplit1"},{"path":"whole-game.html","id":"namespace-changes","chapter":"2 The whole game","heading":"2.12.1 NAMESPACE changes","text":"addition converting strsplit1()’s special comment man/strsplit1.Rd, call document() updates NAMESPACE file, based @export directives found roxygen comments.\nOpen NAMESPACE inspection.\ncontents :export directive NAMESPACE makes strsplit1() available user attaching regexcite via library(regexcite).\nJust entirely possible author .Rd files “hand”, can manage NAMESPACE explicitly .\nchoose delegate devtools (roxygen2).","code":"# Generated by roxygen2: do not edit by hand\n\nexport(strsplit1)"},{"path":"whole-game.html","id":"check-again","chapter":"2 The whole game","heading":"2.13 check() again","text":"regexcite pass R CMD check cleanly now forever : 0 errors, 0 warnings, 0 notes.","code":"\ncheck()\n#> ── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\n#> Duration: 25.4s\n#> \n#> 0 errors ✔ | 0 warnings ✔ | 0 notes ✔"},{"path":"whole-game.html","id":"install","chapter":"2 The whole game","heading":"2.14 install()","text":"Since minimum viable product now, let’s install regexcite package library via install():RStudio exposes similar functionality Build menu Build pane via Install Restart.Now can attach use regexcite like package.\nLet’s revisit small example top.\ngood time restart R session ensure clean workspace.Success!","code":"\ninstall()* checking for file ‘/tmp/Rtmpde0k7R/regexcite/DESCRIPTION’ ... OK\n* preparing ‘regexcite’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‘regexcite_0.0.0.9000.tar.gz’\nRunning /opt/R/4.1.3/lib/R/bin/R CMD INSTALL \\\n  /tmp/Rtmpde0k7R/regexcite_0.0.0.9000.tar.gz --install-tests \n* installing to library ‘/home/runner/work/_temp/Library’\n* installing *source* package ‘regexcite’ ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)\nlibrary(regexcite)\n\nx <- \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\""},{"path":"whole-game.html","id":"use_testthat","chapter":"2 The whole game","heading":"2.15 use_testthat()","text":"’ve tested strsplit1() informally, single example.\ncan formalize unit test.\nmeans express concrete expectation correct strsplit1() result specific input.First, declare intent write unit tests use testthat package , via use_testthat():initializes unit testing machinery package.\nadds Suggests: testthat DESCRIPTION, creates directory tests/testthat/, adds script tests/testthat.R.\n’ll notice testthat probably added minimum version 3.0.0 second DESCRIPTION field, Config/testthat/edition: 3.\n’ll talk details chapter 12.However, ’s still write actual tests!helper use_test() opens /creates test file.\ncan provide file’s basename , editing relevant source file RStudio, automatically generated.\nmany , R/strsplit1.R active file RStudio, can just call use_test().\nHowever, since book built non-interactively, must provide basename explicitly:creates file tests/testthat/test-strsplit1.R.\nalready existed, use_test() just opened .\nPut content :tests strsplit1() gives expected result splitting string.Run test interactively, write .\nNote ’ll attach testthat via library(testthat) R session first ’ll probably want load_all().Going forward, tests mostly run en masse arm’s length via test():RStudio exposes test() Build menu, Build pane via > Test package, keyboard shortcuts Ctrl + Shift + T (Windows & Linux) Cmd + Shift + T (macOS).tests also run whenever check() package.\nway, basically augment standard checks , specific package.\ngood idea use covr package track proportion package’s source code exercised tests.\ndetails can found chapter 12.","code":"\nuse_testthat()\n#> ✔ Adding 'testthat' to Suggests field in DESCRIPTION\n#> ✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n#> ✔ Creating 'tests/testthat/'\n#> ✔ Writing 'tests/testthat.R'\n#> • Call `use_test()` to initialize a basic test file and open it for editing.\nuse_test(\"strsplit1\")\n#> ✔ Writing 'tests/testthat/test-strsplit1.R'\n#> • Edit 'tests/testthat/test-strsplit1.R'\ntest_that(\"strsplit1() splits a string\", {\n  expect_equal(strsplit1(\"a,b,c\", split = \",\"), c(\"a\", \"b\", \"c\"))\n})\ntest()\n#> ℹ Loading regexcite\n#> ℹ Testing regexcite\n#> ✔ | F W S  OK | Context\n#> \n#> ⠏ |         0 | strsplit1                                           \n#> ✔ |         1 | strsplit1\n#> \n#> ══ Results ═════════════════════════════════════════════════════════\n#> [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]"},{"path":"whole-game.html","id":"use_package","chapter":"2 The whole game","heading":"2.16 use_package()","text":"inevitably want use function another package package.\nJust needed export strsplit1(), need import functions namespace packages.\nplan submit package CRAN, note even applies functions packages think “always available”, stats::median() utils::head().One common dilemma using R’s regular expression functions uncertainty whether request perl = TRUE perl = FALSE.\noften, always, arguments alter patterns matched, fixed, ignore.case, invert.\ncan hard keep track functions use arguments arguments interact, many users never get point retain details without rereading docs.stringr package “provides cohesive set functions designed make working strings easy possible”.\nparticular, stringr uses one regular expression system everywhere (ICU regular expressions) uses interface every function controlling matching behaviors, case sensitivity.\npeople find easier internalize program around.\nLet’s imagine decide ’d rather build regexcite based stringr (stringi) base R’s regular expression functions.First, declare general intent use functions stringr namespace use_package():adds stringr package “Imports” section DESCRIPTION.\n.Let’s revisit strsplit1() make stringr-like.\n’s new take :Notice :Rename function str_split_one(), signal wrapper\naround stringr::str_split().Adopt argument names stringr::str_split(). Now string \npattern (n), instead x split.Introduce bit argument checking edge case handling. \nunrelated switch stringr equally beneficial \nversion built strsplit().Use package::function() form calling stringr::str_split(). \nspecifies want call str_split() function stringr\nnamespace. one way call function another\npackage one endorse explained fully chapter\n13.write new function definition?\n’d like keep following convention name .R file function defines, now need fiddly file shuffling.\ncomes fairly often real life, rename_files() function, choreographs renaming file R/ associated companion files test/.Remember: file name work purely aspirational.\nstill need update contents files!updated contents R/str_split_one.R.\naddition changing function definition, ’ve also updated roxygen header reflect new arguments include examples show stringr features.Don’t forget also update test file!updated contents tests/testthat/test-str_split_one.R.\naddition change function’s name arguments, ’ve added couple tests.take new str_split_one() test drive, need call document().\n?\nRemember document() two main jobs:Converts roxygen comments proper R documentation.(Re)generates NAMESPACE.second point especially important , since longer export strsplit1() newly export str_split_one().\nDon’t dismayed warning \"Objects listed exports, present namespace: strsplit1\".\nalways happens remove something namespace.Try new str_split_one() function simulating package installation via load_all():","code":"\nuse_package(\"stringr\")\n#> ✔ Adding 'stringr' to Imports field in DESCRIPTION\n#> • Refer to functions with `stringr::fun()`\nstr_split_one <- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) <= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\nrename_files(\"strsplit1\", \"str_split_one\")\n#> ✔ Moving 'R/strsplit1.R' to 'R/str_split_one.R'\n#> ✔ Moving 'tests/testthat/test-strsplit1.R' to 'tests/testthat/test-str_split_one.R'\n#' Split a string\n#'\n#' @param string A character vector with, at most, one element.\n#' @inheritParams stringr::str_split\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x <- \"alfa,bravo,charlie,delta\"\n#' str_split_one(x, pattern = \",\")\n#' str_split_one(x, pattern = \",\", n = 2)\n#'\n#' y <- \"192.168.0.1\"\n#' str_split_one(y, pattern = stringr::fixed(\".\"))\nstr_split_one <- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) <= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\ntest_that(\"str_split_one() splits a string\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\"), c(\"a\", \"b\", \"c\"))\n})\n\ntest_that(\"str_split_one() errors if input length > 1\", {\n  expect_error(str_split_one(c(\"a,b\",\"c,d\"), \",\"))\n})\n\ntest_that(\"str_split_one() exposes features of stringr::str_split()\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\", n = 2), c(\"a\", \"b,c\"))\n  expect_equal(str_split_one(\"a.b\", stringr::fixed(\".\")), c(\"a\", \"b\"))\n})\ndocument()\n#> ℹ Updating regexcite documentation\n#> ℹ Loading regexcite\n#> Warning in setup_ns_exports(path, export_all, export_imports):\n#> Objects listed as exports, but not present in namespace: strsplit1\n#> Writing NAMESPACE\n#> Writing NAMESPACE\n#> Writing str_split_one.Rd\n#> Deleting strsplit1.Rd\nload_all()\n#> ℹ Loading regexcite\nstr_split_one(\"a, b, c\", pattern = \", \")\n#> [1] \"a\" \"b\" \"c\""},{"path":"whole-game.html","id":"use_github","chapter":"2 The whole game","heading":"2.17 use_github()","text":"’ve seen us making commits development process regexcite.\ncan see indicative history https://github.com/jennybc/regexcite.\nuse version control decision expose development process means can inspect state regexcite source developmental stage.\nlooking -called diffs, can see exactly devtools helper function modifies source files constitute regexcite package.connect local regexcite package Git repository companion repository GitHub?use_github() \nhelper recommend long-term. won’t demonstrate \nrequires credential setup end. also don’t want \ntear rebuild public regexcite package every time build \nbook.Set GitHub repo first! sounds counter-intuitive, easiest way\nget work onto GitHub initiate , use RStudio start\nworking synced local copy. approach described Happy Git’s\nworkflows New project, GitHub first Existing project, GitHub first.Command line Git can always used add remote repository post hoc.\ndescribed Happy Git workflow Existing project, GitHub last.approaches connect local regexcite project GitHub repo, public private, can push pull using Git client built RStudio.","code":""},{"path":"whole-game.html","id":"use_readme_rmd","chapter":"2 The whole game","heading":"2.18 use_readme_rmd()","text":"Now package GitHub, README.md file matters.\npackage’s home page welcome mat, least decide give website (see pkgdown), add vignette (see chapter 11), submit CRAN (see chapter 20).use_readme_rmd() function initializes basic, executable README.Rmd ready edit:addition creating README.Rmd, adds lines .Rbuildignore, creates Git pre-commit hook help keep README.Rmd README.md sync.README.Rmd already sections prompt :Describe purpose package.Provide installation instructions. GitHub remote detected \nuse_readme_rmd() called, section pre-filled instructions \ninstall GitHub.Show bit usage.populate skeleton?\nCopy stuff liberally DESCRIPTION formal informal tests examples .\nAnything better nothing.\nOtherwise … expect people install package comb individual help files figure use ?\nprobably won’t.like write README R Markdown, can feature actual usage.\ninclusion live code also makes less likely README grows stale --sync actual package.RStudio already done , open README.Rmd editing.\nMake sure shows usage str_split_one().README.Rmd use : README.Rmd ’s contains:Don’t forget render make README.md!\npre-commit hook remind try commit README.Rmd, README.md, also README.md appears --date.best way render README.Rmd build_readme(), takes care render current version package, .e. installs temporary copy current source.can see rendered README.md simply visiting regexcite GitHub.Finally, don’t forget one last commit. push, ’re using GitHub.","code":"\nuse_readme_rmd()\n#> ✔ Writing 'README.Rmd'\n#> ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n#> • Update 'README.Rmd' to include installation instructions.\n#> ✔ Writing '.git/hooks/pre-commit'---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"man/figures/README-\",\n  out.width = \"100%\"\n)\n```\n\n**NOTE: This is a toy package created for expository purposes, for the second edition of [R Packages](https://r-pkgs.org). It is not meant to actually be useful. If you want a package for factor handling, please see [stringr](https://stringr.tidyverse.org), [stringi](https://stringi.gagolewski.com/),\n[rex](https://cran.r-project.org/package=rex), and\n[rematch2](https://cran.r-project.org/package=rematch2).**\n\n# regexcite\n\n<!-- badges: start -->\n<!-- badges: end -->\n\nThe goal of regexcite is to make regular expressions more exciting!\nIt provides convenience functions to make some common tasks with string manipulation and regular expressions a bit easier.\n\n## Installation\n\nYou can install the development version of regexcite from [GitHub](https://github.com/) with:\n      \n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"jennybc/regexcite\")\n```\n\n## Usage\n\nA fairly common task when dealing with strings is the need to split a single string into many parts.\nThis is what `base::strplit()` and `stringr::str_split()` do.\n\n```{r}\n(x <- \"alfa,bravo,charlie,delta\")\nstrsplit(x, split = \",\")\nstringr::str_split(x, pattern = \",\")\n```\n\nNotice how the return value is a **list** of length one, where the first element holds the character vector of parts.\nOften the shape of this output is inconvenient, i.e. we want the un-listed version.\n\nThat's exactly what `regexcite::str_split_one()` does.\n\n```{r}\nlibrary(regexcite)\n\nstr_split_one(x, pattern = \",\")\n```\n\nUse `str_split_one()` when the input is known to be a single string.\nFor safety, it will error if its input has length greater than one.\n\n`str_split_one()` is built on `stringr::str_split()`, so you can use its `n` argument and stringr's general interface for describing the `pattern` to be matched.\n\n```{r}\nstr_split_one(x, pattern = \",\", n = 2)\n\ny <- \"192.168.0.1\"\nstr_split_one(y, pattern = stringr::fixed(\".\"))\n```\nbuild_readme()\n#> ℹ Installing regexcite in temporary library\n#> ℹ Building /tmp/Rtmpde0k7R/regexcite/README.Rmd"},{"path":"whole-game.html","id":"the-end-check-and-install","chapter":"2 The whole game","heading":"2.19 The end: check() and install()","text":"Let’s run check() make sure still well.regexcite errors, warnings notes.\ngood time re-build install properly. celebrate!Feel free visit regexcite package GitHub, exactly developed .\ncommit history reflects individual step, use diffs see addition modification files, package evolved.\nrest book goes greater detail step ’ve seen much .","code":"\ncheck()\n#> ── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\n#> Duration: 27.7s\n#> \n#> 0 errors ✔ | 0 warnings ✔ | 0 notes ✔\ninstall()* checking for file ‘/tmp/Rtmpde0k7R/regexcite/DESCRIPTION’ ... OK\n* preparing ‘regexcite’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nRemoved empty directory ‘regexcite/tests/testthat/_snaps’\n* building ‘regexcite_0.0.0.9000.tar.gz’\nRunning /opt/R/4.1.3/lib/R/bin/R CMD INSTALL \\\n  /tmp/Rtmpde0k7R/regexcite_0.0.0.9000.tar.gz --install-tests \n* installing to library ‘/home/runner/work/_temp/Library’\n* installing *source* package ‘regexcite’ ...\n** using staged installation\n** R\n** tests\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)"},{"path":"setup.html","id":"setup","chapter":"3 System setup","heading":"3 System setup","text":"","code":""},{"path":"setup.html","id":"setup-prep","chapter":"3 System setup","heading":"3.1 Prepare your system","text":"get started, make sure latest version R (least 4.2.0, version used render book), run following code get packages ’ll need:Make sure recent version RStudio integrated development environment (IDE). fact, consider using preview version updating regularly. Compared official released version, preview gives access latest greatest features slightly increases chances finding bug. distinct volatile daily build.Preview version: https://www.rstudio.com/products/rstudio/download/preview/Released version: https://www.rstudio.com/products/rstudio/download/\nreaders can use free, open source version RStudio Desktop.\nreaders can use free, open source version RStudio Desktop.","code":"\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))"},{"path":"setup.html","id":"setup-usage","chapter":"3 System setup","heading":"3.2 devtools, usethis, and you","text":"“large, contain multitudes.”— Walt Whitman, Song MyselfAfter 7 years development, devtools grown rather unwieldy package, making maintenance difficult. Version 2.0.0, released late 2018, marked conscious uncoupling devtools, functionality moving seven smaller packages. various means, devtools continues expose usual functionality, although mostly maintained elsewhere. example, devtools might provide wrapper function order set user-friendly defaults, introduce helpful interactive behaviour, combine functionality multiple sub-packages.’s recommended approach devtools constituent packages? varies, depending whether ’re working useR developeR mode:interactive use, useRs attach devtools think provider favorite functions package development.programmatic use, inside another package, developeRs depend devtools, instead access functions via package primary home.\ndevtools rarely appear role foo qualified call form foo::fcn(). Instead, foo package fcn() defined.\nexception continue feature devtools::install_github() way install development version package README, even though install_github() actually lives remotes package. ’s piece advice pertains interactive use, prefer emphasize devtools.\ndevtools rarely appear role foo qualified call form foo::fcn(). Instead, foo package fcn() defined.exception continue feature devtools::install_github() way install development version package README, even though install_github() actually lives remotes package. ’s piece advice pertains interactive use, prefer emphasize devtools.Try report bugs package function’s primary home.Example simulate installing loading package, interactive development:functionality used inside R package, preferred call:usethis package one constituent package people may aware may use directly. now holds functions act files folders R project, especially project also R package. functions usethis made available devtools. , attach devtools, can use function usethis without qualification, .e. just call use_testthat(). choose specify namespace, working programmatic style, access usethis functions directly: usethis::use_testthat() instead devtools::use_testthat().","code":"\nlibrary(devtools)\nload_all()\npkgload::load_all()"},{"path":"setup.html","id":"personal-startup-configuration","chapter":"3 System setup","heading":"3.2.1 Personal startup configuration","text":"can attach devtools like :soon grows aggravating repeatedly attach devtools every R session. Therefore, strongly recommend attaching devtools .Rprofile startup file, like :convenience, function use_devtools() creates .Rprofile, needed, opens editing, puts necessary lines code clipboard screen. Another package may want handle way testthat.general, ’s bad idea attach packages .Rprofile, invites create R scripts don’t reflect dependencies via explicit calls library(foo). devtools workflow package smooths process package development , therefore, unlikely get baked analysis scripts. Note still take care attach interactive sessions.usethis consults certain options , example, creating R packages de novo. allows specify personal defaults package maintainer preferred license. ’s example code snippet go .Rprofile:following code installs development versions devtools usethis, may important revision book.","code":"\nlibrary(devtools)\nif (interactive()) {\n  suppressMessages(require(devtools))\n}\noptions(\n  usethis.full_name = \"Jane Doe\",\n  usethis.description = list(\n    `Authors@R` = 'person(\"Jane\", \"Doe\", email = \"jane@example.com\", role = c(\"aut\", \"cre\"), \n    comment = c(ORCID = \"YOUR-ORCID-ID\"))',\n    License = \"MIT + file LICENSE\",\n    Version = \"0.0.0.9000\"\n  ),\n  usethis.protocol  = \"ssh\"  \n)\ndevtools::install_github(\"r-lib/devtools\")\ndevtools::install_github(\"r-lib/usethis\")"},{"path":"setup.html","id":"setup-tools","chapter":"3 System setup","heading":"3.3 R build toolchain","text":"fully capable building R packages source, ’ll also need compiler command line tools. may strictly necessary want build packages containing C C++ code (topic chapter 15). Especially using RStudio, can set aside now. IDE alert provide support try something requires setup development environment. Read advice .","code":""},{"path":"setup.html","id":"windows","chapter":"3 System setup","heading":"3.3.1 Windows","text":"Windows collection tools needed building packages source called Rtools.Rtools R package. installed install.packages(). Instead, download https://cran.r-project.org/bin/windows/Rtools/ run installer.Rtools installation may see window asking “Select\nAdditional Tasks”.select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed.select box “Save version information registry”. selected default.","code":""},{"path":"setup.html","id":"macos","chapter":"3 System setup","heading":"3.3.2 macOS","text":"need install Xcode command line tools, requires register Apple developer (don’t worry, ’s free)., shell, :Alternatively, can install current release full Xcode Mac App Store. includes great deal need, offers advantage App Store convenience.","code":"xcode-select --install"},{"path":"setup.html","id":"linux","chapter":"3 System setup","heading":"3.3.3 Linux","text":"Make sure ’ve installed R, also R development tools. example, Ubuntu (Debian) need install r-base-dev package.","code":""},{"path":"setup.html","id":"verify-system-prep","chapter":"3 System setup","heading":"3.3.4 Verify system prep","text":"can request “(package) development situation report” devtools::dev_sitrep():reveals certain tools packages missing --date, encouraged update .","code":"\ndevtools::dev_sitrep()\n#> ── R ───────────────────────────────────────────────────────────────────────\n#> • version: 4.1.2\n#> • path: '/Library/Frameworks/R.framework/Versions/4.1/Resources/'\n#> ── RStudio ─────────────────────────────────────────────────────────────────\n#> • version: 2022.2.0.443\n#> ── devtools ────────────────────────────────────────────────────────────────\n#> • version: 2.4.3.9000\n#> • devtools or its dependencies out of date:\n#>   'gitcreds', 'gh'\n#>   Update them with `devtools::update_packages(\"devtools\")`\n#> ── dev package ─────────────────────────────────────────────────────────────\n#> • package: 'rpkgs'\n#> • path: '/Users/jenny/rrr/r-pkgs/'\n#> • rpkgs dependencies out of date:\n#>   'gitcreds', 'generics', 'tidyselect', 'dplyr', 'tidyr', 'broom', 'gh'\n#>  Update them with `devtools::install_dev_deps()`"},{"path":"package-structure-state.html","id":"package-structure-state","chapter":"4 Package structure and state","heading":"4 Package structure and state","text":"chapter start road package development converting implicit knowledge ’ve gained using R packages explicit knowledge needed create modify . ’ll learn various states package can difference package library (care).","code":""},{"path":"package-structure-state.html","id":"package-states","chapter":"4 Package structure and state","heading":"4.1 Package states","text":"create modify package, work “source code” “source files”. interact -development package source form. package form familiar day--day usage. Package development workflows make much sense understand five states R package can :sourcebundledbinaryinstalledin-memoryYou already know functions put packages states. example, install.packages() devtools::install_github() move package source, bundled, binary states installed state. library() function loads installed package memory, making available immediate direct use.","code":""},{"path":"package-structure-state.html","id":"source-package","chapter":"4 Package structure and state","heading":"4.2 Source package","text":"source package just directory files specific structure. includes particular components, DESCRIPTION file, R/ directory containing .R files, . remaining chapters book dedicated detailing components.new package development, may never seen package source form! might even source packages computer. easiest way see package source form right away browse around code web.Many R packages developed open GitHub (GitLab similar). best case scenario visit package’s CRAN landing page, e.g.:forcats: https://cran.r-project.org/package=forcatsreadxl: https://cran.r-project.org/package=readxland one URLs links repository public hosting service, e.g.:forcats: https://github.com/tidyverse/forcatsreadxl: https://github.com/tidyverse/readxlSome maintainers forget list URL, even though package developed public repository, still might able discover via search.Even package developed public platform, can visit source unofficial, read-mirror maintained R-hub. Examples:MASS: https://github.com/cran/MASScar: https://github.com/cran/carNote exploring package’s true development venue, source evolution just reverse-engineered package’s CRAN releases. presents redacted view package history, , definition, includes everything essential.","code":""},{"path":"package-structure-state.html","id":"bundled-package","chapter":"4 Package structure and state","heading":"4.3 Bundled package","text":"bundled package package ’s compressed single file. convention (Linux), package bundles R use extension .tar.gz sometimes referred “source tarballs”. means multiple files reduced single file (.tar) compressed using gzip (.gz). bundle useful , ’s platform-agnostic, transportation-friendly intermediary source package installed package.rare case need make bundle package ’re developing locally, use devtools::build(). hood, calls pkgbuild::build() , ultimately, R CMD build, described Building package tarballs section Writing R Extensions.tip package bundle “source tarball” simply result making tar archive source files, compressing gzip. convention, R world, operations carried making .tar.gz file ’ve elected refer package bundle.Every CRAN package available bundled form, via “Package source” field individual landing pages. Continuing examples , download bundles forcats_0.4.0.tar.gz readxl_1.3.1.tar.gz (whatever current versions may ). unpack bundle shell (R console) like :decompress bundle, ’ll see looks almost source package. diagram summarises files present top-level directory source, bundled, binary versions devtools.TODO: Remake figure https://github.com/hadley/r-pkgs/issues/587.\nFIGURE 4.1: Side--side comparison source, bundled, binary package.\nmain differences source package uncompressed bundle :Vignettes built, rendered outputs, HTML, appear \ninst/doc/ vignette index appears build/ directory, usually\nalongside PDF package manual.Vignettes built, rendered outputs, HTML, appear \ninst/doc/ vignette index appears build/ directory, usually\nalongside PDF package manual.local source package might contain temporary files used save time \ndevelopment, like compilation artefacts src/. never found \nbundle.local source package might contain temporary files used save time \ndevelopment, like compilation artefacts src/. never found \nbundle.files listed .Rbuildignore included bundle. \ntypically files facilitate development process, \nexcluded distributed product.files listed .Rbuildignore included bundle. \ntypically files facilitate development process, \nexcluded distributed product.","code":"tar xvf forcats_0.4.0.tar.gz"},{"path":"package-structure-state.html","id":"rbuildignore","chapter":"4 Package structure and state","heading":"4.3.1 .Rbuildignore","text":"won’t need contemplate exact structure package .tar.gz files often, need understand .Rbuildignore file. controls files source package make downstream forms.line .Rbuildignore Perl-compatible regular expression matched, without regard case, path file source package.1 regular expression matches, file directory excluded. Note default exclusions implemented R , mostly relating classic version control systems editors, SVN, Git, Emacs.exclude specific file directory (common use case), MUST anchor regular expression. example, exclude directory called “notes”, use ^notes$. regular expression notes match file name containing notes, e.g. R/notes.R, man/important-notes.R, data/endnotes.Rdata, etc. safest way exclude specific file directory use usethis::use_build_ignore(\"notes\"), escaping ..Rbuildignore way resolve tension practices support development process CRAN’s requirements submission distribution. Even aren’t planning release CRAN, following conventions allow make best use R’s built-tooling package checking installation. affected files fall two broad, semi-overlapping classes:Files help generate package contents programmatically. Examples:\nUsing README.Rmd generate informative current README.md.\nStoring .R scripts create update internal exported data.\nUsing README.Rmd generate informative current README.md.Storing .R scripts create update internal exported data.Files drive package development, checking, documentation, outside\nCRAN’s purview. Examples:\nFiles relating RStudio IDE.\nUsing pkgdown package generate \nwebsite.\nConfiguration files related continuous integration/deployment \nmonitoring test coverage.\nFiles relating RStudio IDE.Using pkgdown package generate \nwebsite.Configuration files related continuous integration/deployment \nmonitoring test coverage.non-exhaustive list typical entries .Rbuildignore file package tidyverse:Note comments must appear actual .Rbuildignore file; included exposition.’ll mention need add files .Rbuildignore whenever ’s important. Remember usethis::use_build_ignore() attractive way manage file.","code":"^.*\\.Rproj$         # Designates the directory as an RStudio Project\n^\\.Rproj\\.user$     # Used by RStudio for temporary files\n^README\\.Rmd$       # An Rmd file used to generate README.md\n^LICENSE\\.md$       # Full text of the license\n^cran-comments\\.md$ # Comments for CRAN submission\n^data-raw$          # Code used to create data included in the package\n^pkgdown$           # Resources used for the package website\n^_pkgdown\\.yml$     # Configuration info for the package website\n^\\.github$          # Contributing guidelines, CoC, issue templates, etc."},{"path":"package-structure-state.html","id":"structure-binary","chapter":"4 Package structure and state","heading":"4.4 Binary package","text":"want distribute package R user doesn’t package development tools, ’ll need provide binary package. Like package bundle, binary package single file. Unlike bundled package, binary package platform specific two basic flavors: Windows macOS. (Linux users generally required tools necessary install .tar.gz files.)Binary packages macOS stored .tgz, whereas Windows binary packages end .zip. need make binary package, use devtools::build(binary = TRUE) relevant operating system. hood, calls pkgbuild::build(binary = TRUE) , ultimately, R CMD INSTALL --build, described Building binary packages section Writing R Extensions.clear, primary maker distributor binary packages CRAN, individual maintainers. package intended public use, effective way make broadly available release CRAN. submit package bundle CRAN makes distributes package binaries.CRAN packages usually available binary form, macOS Windows, current, previous, (possibly) development versions R. Continuing examples , download binary packages :forcats macOS: forcats_0.4.0.tgzreadxl Windows: readxl_1.3.1.zipand , indeed, part ’s usually going behind scenes call install.packages().uncompress binary package, ’ll see internal structure rather different source bundled package. Figure 4.1 includes comparison. notable differences:.R files R/ directory - instead three\nfiles store parsed functions efficient file format. \nbasically result loading R code saving \nfunctions save(). (process, adds little extra metadata \nmake things fast possible)..R files R/ directory - instead three\nfiles store parsed functions efficient file format. \nbasically result loading R code saving \nfunctions save(). (process, adds little extra metadata \nmake things fast possible).Meta/ directory contains number .rds files. files contain\ncached metadata package, like topics help files cover \nparsed version DESCRIPTION file. (can use readRDS() see\nexactly ’s files). files make package loading faster\ncaching costly computations.Meta/ directory contains number .rds files. files contain\ncached metadata package, like topics help files cover \nparsed version DESCRIPTION file. (can use readRDS() see\nexactly ’s files). files make package loading faster\ncaching costly computations.actual help content appears help/ html/ (longer man/).actual help content appears help/ html/ (longer man/).code src/ directory, now libs/\ndirectory contains results compiling code. Windows, \nsubdirectories 32 bit (i386/) 64 bit (x64/) environments.code src/ directory, now libs/\ndirectory contains results compiling code. Windows, \nsubdirectories 32 bit (i386/) 64 bit (x64/) environments.objects data/, now converted \nefficient form.objects data/, now converted \nefficient form.contents inst/ moved top-level directory. example,\nvignette files now doc/.contents inst/ moved top-level directory. example,\nvignette files now doc/.files folders dropped, README, build/, tests/,\nvignettes/.files folders dropped, README, build/, tests/,\nvignettes/.","code":""},{"path":"package-structure-state.html","id":"installed-package","chapter":"4 Package structure and state","heading":"4.5 Installed package","text":"installed package binary package ’s decompressed package library (described 4.7). following diagram illustrates many ways package can installed. diagram complicated! ideal world, installing package involve stringing together set simple steps: source -> bundle, bundle -> binary, binary -> installed. real world, ’s simple often (faster) shortcuts available.\nFIGURE 4.2: Many methods converting package states.\nbuilt-command line tool R CMD INSTALL powers package installation. can install package source files, bundle (.k.. source tarball), binary package. Details available Installing packages section R Installation Administration. Just like devtools::build(), devtools provides wrapper function, devtools::install(), makes tool available within R session.useRs understandably like install packages comfort R session directly CRAN. built-function install.packages() meets need. can download package, various forms, install , optionally attend installation dependencies.devtools exposes family install_*() functions address needs beyond reach install.packages() make existing capabilities easier access. functions actually maintained remotes package re-exported devtools.install_github() flagship example sub-family functions can download package remote location CRAN whatever necessary install . rest devtools/remotes install_*() functions aimed making things technically possible base tooling bit easier explicit, install_version() installs specific version CRAN package.Analogous .Rbuildignore, described section 4.3.1, .Rinstignore lets keep files present package bundle installed package. However, contrast .Rbuildignore, rather obscure rarely needed.TODO: Revisit section later respect pak https://pak.r-lib.org.","code":"\nlibrary(remotes)\n\nfuns <- as.character(lsf.str(\"package:remotes\"))\ngrep(\"^install_.+\", funs, value = TRUE)\n#>  [1] \"install_bioc\"      \"install_bitbucket\" \"install_cran\"     \n#>  [4] \"install_deps\"      \"install_dev\"       \"install_git\"      \n#>  [7] \"install_github\"    \"install_gitlab\"    \"install_local\"    \n#> [10] \"install_remote\"    \"install_svn\"       \"install_url\"      \n#> [13] \"install_version\""},{"path":"package-structure-state.html","id":"in-memory-package","chapter":"4 Package structure and state","heading":"4.6 In-memory package","text":"finally arrive command familiar everyone uses R:Assuming usethis installed, call makes functions available use, .e. now can :usethis package loaded memory , fact, also attached search path. distinction loading attaching packages important ’re writing scripts, ’s important ’re writing packages. ’ll learn difference ’s important search path.library() great way iteratively tweak test drive package ’re developing, works installed package. section 5.4, ’ll learn devtools::load_all() accelerates development allowing load source package directly memory.","code":"\nlibrary(usethis)\ncreate_package(\"/path/to/my/coolpackage\")"},{"path":"package-structure-state.html","id":"library","chapter":"4 Package structure and state","heading":"4.7 Package libraries","text":"just discussed library() function, whose name inspired . call library(foo), R looks current libraries installed package named “foo” , successful, makes foo available use.R, library directory containing installed packages, sort like library books. Unfortunately, R world, frequently encounter confused usage words “library” “package”. ’s common someone refer dplyr, example, library actually package. reasons confusion. First, R’s terminology arguably runs counter broader programming conventions, usual meaning “library” closer mean “package”. name library() function probably reinforces wrong associations. Finally, vocabulary error often harmless, ’s easy R users fall wrong habit people point mistake look like insufferable pedants. ’s bottom line:use library() function load2 package.distinction two important useful get involved package development.can multiple libraries computer. fact, many already , especially ’re Windows. can use .libPaths() see libraries currently active. ’s might look Windows:’s similar look macOS (results may vary):cases see two active libraries, consulted order:user libraryA system-level global libraryThis setup typical Windows, something usually need opt macOS.3 setup, add-packages installed CRAN (elsewhere) local development kept user library. , macOS system used primary development machine many packages (~1000), whereas Windows system used occasionally much spartan. core set base recommended packages ship R live system-level library macOS Windows. separation appeals many developers makes easy , example, clean add-packages without disturbing base R installation.’re macOS see one library, urgent need change anything. next time upgrade R, consider creating user-level library. default, R looks user library found path stored environment variable R_LIBS_USER, defaults ~/Library/R/x.y/library. install, R x.y.z prior installing add-packages, use dir.create(\"~/Library/R/x.y/library\") set user library. Now library setup seen . Alternatively, setup user library elsewhere tell R setting R_LIBS_USER environment variable .Renviron.filepaths libraries also make clear associated specific version R (3.6.x time writing), also typical. reflects enforces fact need reinstall add-packages update R , say, 3.5 3.6, change minor version. generally need re-install add-packages patch release, e.g., going R 3.6.0 3.6.1.R usage grows sophisticated, ’s common start managing package libraries intention. example, tools like renv (predecessor packrat) automate process managing project-specific libraries. can important making data products reproducible, portable, isolated one another. package developer might prepend library search path temporary library, containing set packages specific versions, order explore issues backwards forwards compatibility, without affecting day--day work. Reverse dependency checks another example explicitly manage library search path.main levers control libraries active, order scope persistence:Environment variables, like R_LIBS R_LIBS_USER, consulted\nstartup.Calling .libPaths() one filepaths.Executing small snippets code temporarily altered library search\npath via withr::with_libpaths().Arguments individual functions, like install.packages(lib =) \nlibrary(lib.loc =).Finally, ’s important note library() NEVER used inside package. Packages scripts rely different mechanisms declaring dependencies one biggest adjustments need make mental model habits. explore topic fully Chapter 13.","code":"\n# on Windows\n.libPaths()\n#> [1] \"C:/Users/jenny/Documents/R/win-library/3.6\"\n#> [2] \"C:/Program Files/R/R-3.6.0/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#> [[1]]\n#>   [1] \"abc\"           \"anytime\"       \"askpass\"       \"assertthat\"   \n#>  ...\n#> [145] \"zeallot\"      \n#> \n#> [[2]]\n#>  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#>  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#>  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#> [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#> [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#> [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#> [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#> [29] \"translations\" \"utils\"\n# on macOS\n.libPaths()\n#> [1] \"/Users/jenny/Library/R/3.6/library\"\n#> [2] \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#> [[1]]\n#>    [1] \"abc\"                  \"abc.data\"             \"abind\"                \n#>  ...\n#> [1033] \"Zelig\"                \"zip\"                  \"zoo\"                 \n#> \n#> [[2]]\n#>  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#>  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#>  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#> [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#> [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#> [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#> [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#> [29] \"translations\" \"utils\""},{"path":"workflows101.html","id":"workflows101","chapter":"5 Fundamental development workflows","heading":"5 Fundamental development workflows","text":"peeked hood R packages libraries Chapter 4, \nprovide basic workflows creating package moving different states come development.","code":""},{"path":"workflows101.html","id":"create-a-package","chapter":"5 Fundamental development workflows","heading":"5.1 Create a package","text":"","code":""},{"path":"workflows101.html","id":"survey-the-existing-landscape","chapter":"5 Fundamental development workflows","heading":"5.1.1 Survey the existing landscape","text":"Many packages born one person’s frustration common task easier. decide whether something package-worthy? ’s definitive answer, ’s helpful appreciate least two types payoff:Product: life better functionality implemented\nformally, package.Process: greater mastery R make effective work.care existence product, main goal navigate space existing packages. Silge, Nash, Graves organized survey sessions around useR! 2017 write R Journal (Silge, Nash, Graves 2018) provides comprehensive roundup resources.looking ways increase R mastery, still educate landscape. plenty good reasons make package, even relevant prior work. way experts got way actually building things, often basic things, deserve chance learn tinkering. ’re allowed work things never touched, ’re likely looking problems either obscure difficult.Finally, ’s also valid evaluate suitability existing tools basis user interface, defaults, edge case behaviour. package can technically need, ’s unergonomic use case, ’s fair say doesn’t meet needs. case, can still make sense develop implementation write wrapper functions hide sharp edges.work falls well-defined domain, educate existing R packages, even ’ve resolved create package. follow specific design patterns? specific data structures common primary input output? example, active R community around spatial data analysis (r-spatial.org) successfully self-organised promote greater consistency across packages different maintainers. modeling, hardhat package provides scaffolding creating modeling package plays well tidymodels ecosystem. package get usage need less documentation fits nicely surrounding landscape.","code":""},{"path":"workflows101.html","id":"naming","chapter":"5 Fundamental development workflows","heading":"5.1.2 Name your package","text":"“two hard things Computer Science: cache invalidation \nnaming things.”— Phil KarltonBefore can create package, need come name . can hardest part creating package! (least one can automate .)","code":""},{"path":"workflows101.html","id":"formal-requirements","chapter":"5 Fundamental development workflows","heading":"5.1.2.1 Formal requirements","text":"three formal requirements:name can consist letters, numbers, periods, .e., ..must start letter.end period.Unfortunately, means can’t use either hyphens underscores, .e., - _, package name. recommend using periods package names, due confusing associations file extensions S3 methods.","code":""},{"path":"workflows101.html","id":"pragmatic-advice","chapter":"5 Fundamental development workflows","heading":"5.1.2.2 Pragmatic advice","text":"plan share package others, ’s worth spending minutes come good name. things consider:Pick unique name ’s easy Google. makes easy potential\nusers find package (associated resources) see ’s\nusing .Pick unique name ’s easy Google. makes easy potential\nusers find package (associated resources) see ’s\nusing .Don’t pick name ’s already use CRAN Bioconductor. may\nalso want consider types name collision:\n-development package maturing , say, GitHub already\nhistory seems heading towards release?\nname already used another piece software library \nframework , e.g., Python JavaScript ecosystem?\nDon’t pick name ’s already use CRAN Bioconductor. may\nalso want consider types name collision:-development package maturing , say, GitHub already\nhistory seems heading towards release?name already used another piece software library \nframework , e.g., Python JavaScript ecosystem?Avoid using upper lower case letters: makes package name\nhard type even harder remember. example, ’s hard remember\n’s Rgtk2 RGTK2 RGtk2.Avoid using upper lower case letters: makes package name\nhard type even harder remember. example, ’s hard remember\n’s Rgtk2 RGTK2 RGtk2.Give preference names pronounceable, people comfortable\ntalking package way hear inside head.Give preference names pronounceable, people comfortable\ntalking package way hear inside head.Find word evokes problem modify ’s unique:\nlubridate makes dates times easier.\nrvest “harvests” content web pages.\nr2d3 provides utilities working D3 visualisations.\nforcats anagram factors, use categorical data.\nFind word evokes problem modify ’s unique:lubridate makes dates times easier.rvest “harvests” content web pages.r2d3 provides utilities working D3 visualisations.forcats anagram factors, use categorical data.Use abbreviations:\nRcpp = R + C++ (plus plus)\nbrms = Bayesian Regression Models using Stan\nUse abbreviations:Rcpp = R + C++ (plus plus)brms = Bayesian Regression Models using StanAdd extra R:\nstringr provides string tools.\nbeepr plays notification sounds.\ncallr calls R, R.\nAdd extra R:stringr provides string tools.beepr plays notification sounds.callr calls R, R.Don’t get sued.\n’re creating package talks commercial service, check \nbranding guidelines. example, rDrop isn’t called rDropbox \nDropbox prohibits applications using full trademarked name.\nDon’t get sued.’re creating package talks commercial service, check \nbranding guidelines. example, rDrop isn’t called rDropbox \nDropbox prohibits applications using full trademarked name.Nick Tierney presents fun typology package names Naming Things blog post; see inspiring examples. also experience renaming packages, post , ’ve decided change r package name good resource don’t get right first time.","code":""},{"path":"workflows101.html","id":"use-the-available-package","chapter":"5 Fundamental development workflows","heading":"5.1.2.3 Use the available package","text":"impossible abide suggestions simultaneously, obviously need make trade-offs. available package function called available() helps evaluate potential package name many angles:available::available() following:Checks validity.Checks availability CRAN, Bioconductor, beyond.Searches various websites help discover unintended meanings. \ninteractive session, URLs see opened browser tabs.Attempts report whether name positive negative sentiment.","code":"\nlibrary(available)\n\navailable(\"doofus\")\n#> Urban Dictionary can contain potentially offensive results,\n#>   should they be included? [Y]es / [N]o:\n#> 1: 1\n#> ── doofus ──────────────────────────────────────────────────────────────────\n#> Name valid: ✔\n#> Available on CRAN: ✔ \n#> Available on Bioconductor: ✔\n#> Available on GitHub:  ✔ \n#> Abbreviations: http://www.abbreviations.com/doofus\n#> Wikipedia: https://en.wikipedia.org/wiki/doofus\n#> Wiktionary: https://en.wiktionary.org/wiki/doofus\n#> Sentiment:???"},{"path":"workflows101.html","id":"creating","chapter":"5 Fundamental development workflows","heading":"5.1.3 Package creation","text":"’ve come name, two ways create package.Call usethis::create_package().RStudio, File > New Project > New Directory > R Package. \nultimately calls usethis::create_package(), really ’s just one\nway.TODO: revisit tackle usethis + RStudio project templates https://github.com/r-lib/usethis/issues/770. particular, contemplate whether reinstate screenshot-y coverage RStudio workflows .produces smallest possible working package, three components:R/ directory, ’ll learn R code.R/ directory, ’ll learn R code.basic DESCRIPTION file, ’ll learn \npackage metadata.basic DESCRIPTION file, ’ll learn \npackage metadata.basic NAMESPACE file, ’ll learn \nnamespace.basic NAMESPACE file, ’ll learn \nnamespace.may also include RStudio project file, pkgname.Rproj, makes package easy use RStudio, described . Basic .Rbuildignore .gitignore files also left behind.Don’t use package.skeleton() create package. function comes R, might tempted use , creates package immediately throws errors R CMD build. anticipates different development process use , repairing broken initial state just makes unnecessary work people use devtools (, especially, roxygen2). Use create_package().","code":""},{"path":"workflows101.html","id":"where-source-package","chapter":"5 Fundamental development workflows","heading":"5.1.4 Where should you create_package()?","text":"main required argument create_package() path new package live:Remember package lives source form (section 4.2), installed form (section 4.5). Installed packages live library discussed conventional setups libraries section 4.7.keep source packages? main principle location distinct installed packages live. absence external considerations, typical user designate directory inside home directory R (source) packages. discussed colleagues source favorite R packages lives inside directories like ~/rrr/, ~/documents/tidyverse/, ~/r/packages/, ~/pkg/. us use one directory , others divide source packages among directories based development role (contributor vs. ), GitHub organization (tidyverse vs r-lib), development stage (active vs. ), .probably reflects primarily tool-builders. academic researcher might organize files around individual publications, whereas data scientist might organize around data products reports. particular technical traditional reason one specific approach. long keep clear distinction source installed packages, just pick strategy works within overall system file organization, use consistently.","code":"\ncreate_package(\"path/to/package/pkgname\")"},{"path":"workflows101.html","id":"projects","chapter":"5 Fundamental development workflows","heading":"5.2 RStudio Projects","text":"devtools works hand--hand RStudio, believe best development environment R users. clear, can use devtools without using RStudio can develop packages RStudio without using devtools. special, two-way relationship makes rewarding use devtools RStudio together.RStudio Project, capital “P”, regular directory computer includes (mostly hidden) RStudio infrastructure facilitate work one projects, lowercase “p”. project might R package, data analysis, Shiny app, book, blog, etc.","code":""},{"path":"workflows101.html","id":"benefits-of-rstudio-projects","chapter":"5 Fundamental development workflows","heading":"5.2.1 Benefits of RStudio Projects","text":"section 4.2, already know source package lives directory computer. strongly recommend source package also RStudio Project. payoffs:Projects “launch-able”. ’s easy fire fresh instance \nRStudio Project, file browser working directory set exactly\nway need, ready work.Projects “launch-able”. ’s easy fire fresh instance \nRStudio Project, file browser working directory set exactly\nway need, ready work.Project isolated; code run one Project affect \nProject.\ncan several RStudio Projects open code\nexecuted Project effect R session \nworkspace Project B.\nProject isolated; code run one Project affect \nProject.can several RStudio Projects open code\nexecuted Project effect R session \nworkspace Project B.get handy code navigation tools like F2 jump function definition\nCtrl + . look functions files name.get handy code navigation tools like F2 jump function definition\nCtrl + . look functions files name.get useful keyboard shortcuts clickable interface common package\ndevelopment tasks, like generating documentation, running tests, checking\nentire package.\nget useful keyboard shortcuts clickable interface common package\ndevelopment tasks, like generating documentation, running tests, checking\nentire package.see useful keyboard shortcuts, press Alt + Shift + K use Help > Keyboard Shortcuts Help.Follow @rstudiotips Twitter regular dose RStudio tips tricks.","code":""},{"path":"workflows101.html","id":"how-to-get-an-rstudio-project","chapter":"5 Fundamental development workflows","heading":"5.2.2 How to get an RStudio Project","text":"follow recommendation create new packages create_package(), takes care . new package also RStudio Project, ’re working RStudio.various ways designate directory pre-existing source package RStudio Project:RStudio, File > New Project > Existing Directory.Call create_package() path pre-existing R source package.Call usethis::use_rstudio(), active usethis project set \nexisting R package. practice, probably means just need make\nsure working directory inside pre-existing package.","code":""},{"path":"workflows101.html","id":"what-makes-an-rstudio-project","chapter":"5 Fundamental development workflows","heading":"5.2.3 What makes an RStudio Project?","text":"directory RStudio Project contain .Rproj file. Typically, directory named “foo”, Project file foo.Rproj. directory also R package, package name usually also “foo”. path least resistance make names coincide nest package inside subdirectory inside Project. settle different workflow, just know may feel like fighting tools..Rproj file just text file. ’s default project file used usethis:don’t need modify file hand. Instead, use interface available via Tools > Project Options Project Options Projects menu top-right corner.TODO: update deal layout.","code":"Version: 1.0\n\nRestoreWorkspace: No\nSaveWorkspace: No\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nEncoding: UTF-8\n\nAutoAppendNewline: Yes\nStripTrailingWhitespace: Yes\n\nBuildType: Package\nPackageUseDevtools: Yes\nPackageInstallArgs: --no-multiarch --with-keep.source\nPackageRoxygenize: rd,collate,namespace"},{"path":"workflows101.html","id":"how-to-launch-an-rstudio-project","chapter":"5 Fundamental development workflows","heading":"5.2.4 How to launch an RStudio Project","text":"Double-click foo.Rproj file macOS’s Finder Windows Explorer launch foo Project RStudio.can also launch Projects within RStudio via File > Open Project (New Session) Projects menu top-right corner.use productivity launcher app, can probably configure something delightful .Rproj files. use Alfred ,4 macOS , similar tools exist Windows. fact, good reason use productivity app first place.normal – productive! – multiple Projects open .","code":""},{"path":"workflows101.html","id":"rstudio-project-vs.-active-usethis-project","chapter":"5 Fundamental development workflows","heading":"5.2.5 RStudio Project vs. active usethis project","text":"notice usethis functions don’t take path: operate files “active usethis project”. usethis package assumes 95% time coincide:current RStudio Project, using RStudio.active usethis project.Current working directory R process.things seem funky, call proj_sitrep() get “situation report”. identify peculiar situations propose ways get back happier state.","code":"\n# these should usually be the same (or unset)\nproj_sitrep()\n#> *   working_directory: '/Users/jenny/rrr/readxl'\n#> * active_usethis_proj: '/Users/jenny/rrr/readxl'\n#> * active_rstudio_proj: '/Users/jenny/rrr/readxl'"},{"path":"workflows101.html","id":"working-directory-and-filepath-discipline","chapter":"5 Fundamental development workflows","heading":"5.3 Working directory and filepath discipline","text":"develop package, executing R code. mix workflow calls (e.g., document() test()) ad hoc calls help write functions, examples, tests. strongly recommend leave working directory R process set top-level source package.’re totally new package development, don’t much basis supporting resisting proposal. experience may find somewhat upsetting. supposed express paths working subdirectories, like tests/? becomes relevant, ’ll show exploit path-building helpers, testthat::test_path(), determine paths execution time.basic idea leaving working directory alone, encouraged write paths convey intent explicitly (“read foo.csv test directory”) instead implicitly (“read foo.csv current working directory, think going test directory”). sure sign reliance implicit paths incessant fiddling working directory, ’re using setwd() manually fulfill assumptions implicit paths.mentality can design away whole class path headaches makes day--day development pleasant well. two reasons implicit paths hard get right:Recall different forms package can take development\ncycle (Chapter 4). states differ \nterms files folders exist relative\npositions within hierarchy. ’s tricky write relative paths \nwork across package states.Eventually, package processed built-tools like\nR CMD build, R CMD check, R CMD INSTALL, potentially\nCRAN. ’s hard keep track working directory \nevery stage processes.Path helpers like testthat::test_path(), fs::path_package(), rprojroot package extremely useful building resilient paths hold across whole range situations come development usage. Another way eliminate brittle paths rigorous use proper methods storing data inside package (Chapter 14) target session temp directory appropriate, ephemeral testing artefacts (Chapter 12).","code":""},{"path":"workflows101.html","id":"load-all","chapter":"5 Fundamental development workflows","heading":"5.4 Test drive with load_all()","text":"load_all() function arguably important part devtools workflow.load_all() key step “lather, rinse, repeat” cycle package development:Tweak function definition.load_all()Try change running small example tests.’re new package development devtools, ’s easy overlook importance load_all() fall awkward habits data analysis workflow.","code":"\n# with devtools attached and\n# working directory set to top-level of your source package ...\n\nload_all()\n\n# ... now experiment with the functions in your package"},{"path":"workflows101.html","id":"benefits-of-load_all","chapter":"5 Fundamental development workflows","heading":"5.4.1 Benefits of load_all()","text":"first start use development environment, like RStudio Emacs + ESS, biggest win ability send lines code .R script execution R console. fluidity makes tolerable follow best practice regarding source code real5 (opposed objects workspace) saving .R files (opposed saving reloading .Rdata).load_all() significance package development , ironically, requires test drive package code way script code. load_all() simulates fullblown process seeing effect source code change, clunky enough6 won’t want often. main benefits load_all():can iterate quickly, encourages exploration incremental\nprogress.\niterative speedup especially noticeable packages \ncompiled code.\niterative speedup especially noticeable packages \ncompiled code.get develop interactively namespace regime accurately\nmimics things someone uses installed package:\ncan call internal functions directly, without using :::\nwithout tempted temporarily define functions \nglobal workspace.\ncan also call functions packages ’ve imported \nNAMESPACE, without tempted attach dependencies via\nlibrary().\ncan call internal functions directly, without using :::\nwithout tempted temporarily define functions \nglobal workspace.can also call functions packages ’ve imported \nNAMESPACE, without tempted attach dependencies via\nlibrary().load_all() removes friction development workflow eliminates temptation use workarounds often lead mistakes around namespace dependency management.","code":""},{"path":"workflows101.html","id":"other-ways-to-call-load_all","chapter":"5 Fundamental development workflows","heading":"5.4.2 Other ways to call load_all()","text":"working Project package, RStudio offers several ways call load_all():Keyboard shortcut: Cmd+Shift+L (macOS), Ctrl+Shift+L (Windows, Linux)Build pane’s … menuBuild > Load Alldevtools::load_all() thin wrapper around pkgload::load_all() adds bit user-friendliness. unlikely use load_all() programatically inside another package, , probably use pkgload::load_all() directly.TODO: Decide update diagram reposition re-integrate prose. example, figure frame w.r.t. RStudio Install Restart vs. Clean Rebuild.","code":""},{"path":"package-within.html","id":"package-within","chapter":"6 The package within","heading":"6 The package within","text":"part book ends way started, development small toy package.\nwhole game chapter established basic mechanics, workflow, tooling package development, said practically nothing R code inside package.\ntotally different emphasis.\nchapter, focus primarily package’s R code differs R code script.start data analysis script show find package lurks within.\nisolate extract reusable data logic script, put R package, use package much simplified script.\nmake rookie mistakes along way, order highlight special considerations R code inside package.section headers incorporate NATO phonetic alphabet specific meaning.\njust convenient way mark progress towards working package.","code":""},{"path":"package-within.html","id":"alfa-a-script-that-works","chapter":"6 The package within","heading":"6.1 Alfa: a script that works","text":"fictional data analysis script data-cleaning.R group collects reports people went swim:swim hot outside?data usually comes CSV file, read data frame.classify observation using American (“US”) British (“UK”) English, based word chosen describe sandy place ocean land meet.\ncolumn used build new english column.Sadly, temperatures often reported mix Fahrenheit Celsius.\nabsence better information, guess Americans report temperatures Fahrenheit therefore observations converted Celsius.Finally, cleaned (cleaner?) data written back CSV file.\nlike capture timestamp filename this7.Even typical analytical tasks quite different, hopefully see familiar patterns .\n’s easy imagine group similar pre-processing many similar data files time.\nanalyses can efficient consistent make standard data maneuvers available functions package, instead inlining data logic dozens hundreds data ingest scripts.","code":"\ninfile <- \"swim.csv\"\n(dat <- read.csv(infile))\n#>   name    where temp\n#> 1 Adam    beach   95\n#> 2 Bess    coast   91\n#> 3 Cora seashore   28\n#> 4 Dale    beach   85\n#> 5 Evan  seaside   31\ndat$english[dat$where == \"beach\"] <- \"US\"\ndat$english[dat$where == \"coast\"] <- \"US\"\ndat$english[dat$where == \"seashore\"] <- \"UK\"\ndat$english[dat$where == \"seaside\"] <- \"UK\"\ndat$temp[dat$english == \"US\"] <- (dat$temp[dat$english == \"US\"] - 32) * 5/9\ndat\n#>   name    where temp english\n#> 1 Adam    beach 35.0      US\n#> 2 Bess    coast 32.8      US\n#> 3 Cora seashore 28.0      UK\n#> 4 Dale    beach 29.4      US\n#> 5 Evan  seaside 31.0      UK\nnow <- Sys.time()\ntimestamp <- format(now, \"%Y-%B-%d_%H-%M-%S\")\n(outfile <- paste0(timestamp, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile)))\n#> [1] \"2022-May-20_07-13-55_swim_clean.csv\"\nwrite.csv(dat, file = outfile, quote = FALSE, row.names = FALSE)"},{"path":"package-within.html","id":"bravo-a-better-script-that-works","chapter":"6 The package within","heading":"6.2 Bravo: a better script that works","text":"package lurks within original script actually pretty hard see!\n’s obscured suboptimal coding practices, use repetitive copy/paste-style code mixing code data.\nTherefore good first step refactor code, isolating much data logic possible proper objects functions, respectively.time, introduce use add-packages, several reasons.\nFirst, actually use tidyverse sort data wrangling.\nSecond, many people use add-packages scripts, good see add-packages handled create package.’s next version script.key features note :using functions tidyverse packages (specifically readr \ndplyr).map different “beach” words whether considered \nUS UK English now isolated lookup table, lets us create\nenglish column one go left_join(). also makes \neasier add new words futureThe f_to_c(), timestamp(), outfile_path() functions now hold \nlogic converting temperatures forming timestamped output file\nname.’s getting easier recognize reusable bits script, .e. bits nothing specific input file, like swim.csv.\nsort refactoring often happens naturally way creating package, , ’s good idea intentionally.","code":"\nlibrary(tidyverse)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\nlookup_table <- tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\ndat <- dat %>% \n  left_join(lookup_table)\n#> Joining, by = \"where\"\n\nf_to_c <- function(x) (x - 32) * 5/9\n\ndat <- dat %>% \n  mutate(temp = if_else(english == \"US\", f_to_c(temp), temp))\ndat\n#> # A tibble: 5 × 4\n#>   name  where     temp english\n#>   <chr> <chr>    <dbl> <chr>  \n#> 1 Adam  beach     35   US     \n#> 2 Bess  coast     32.8 US     \n#> 3 Cora  seashore  28   UK     \n#> 4 Dale  beach     29.4 US     \n#> 5 Evan  seaside   31   UK\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\nwrite_csv(dat, outfile_path(infile))"},{"path":"package-within.html","id":"charlie-external-helpers","chapter":"6 The package within","heading":"6.3 Charlie: external helpers","text":"typical next step move reusable data logic analysis script one separate files.\nconventional opening move, want use helper files multiple analyses.content beach-lookup-table.csv:content cleaning-helpers.R:’ve added high-level helper functions, localize_beach() celsify_temp(), pre-existing helpers (f_to_c(), timestamp(), outfile_path()).next version data cleaning script, now ’ve pulled helper functions (lookup table).’ll notice script getting shorter , hopefully, easier read modify, repetitive fussy clutter moved sight.\nWhether code actually easier work subjective depends natural “interface” feels people actually preprocess swimming data.\nsorts design decisions subject separate project: principles.tidyverse.org.Let’s assume group agrees design decisions promising, .e. seem making things better, worse.\nSure, existing code perfect, typical developmental stage ’re trying figure helper functions work.","code":"where,english\nbeach,US\ncoast,US\nseashore,UK\nseaside,UK\nlibrary(tidyverse)\n\nlocalize_beach <- function(dat) {\n  lookup_table <- read_csv(\n    \"beach-lookup-table.csv\",\n    col_types = cols(where = \"c\", english = \"c\")\n  )\n  left_join(dat, lookup_table)\n}\n\nf_to_c <- function(x) (x - 32) * 5/9\n\ncelsify_temp <- function(dat) {\n  mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp))\n}\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\nlibrary(tidyverse)\nsource(\"cleaning-helpers.R\")\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\n(dat <- dat %>% \n    localize_beach() %>% \n    celsify_temp())\n#> Joining, by = \"where\"\n#> # A tibble: 5 × 4\n#>   name  where     temp english\n#>   <chr> <chr>    <dbl> <chr>  \n#> 1 Adam  beach     35   US     \n#> 2 Bess  coast     32.8 US     \n#> 3 Cora  seashore  28   UK     \n#> 4 Dale  beach     29.4 US     \n#> 5 Evan  seaside   31   UK\n\nwrite_csv(dat, outfile_path(infile))"},{"path":"package-within.html","id":"delta-an-attempt-at-a-package","chapter":"6 The package within","heading":"6.4 Delta: an attempt at a package","text":"Let’s make package! ’s simplest thing might hope “just work”: make cleaning-helpers.R R package. Somehow.Concretely, :Use usethis::create_package() scaffold new R package.\ngood first step!\ngood first step!Copy cleaning-helpers.R new package, specifically, \nR/cleaning-helpers.R.\nmorally correct, mechanically wrong several ways, \nsoon see.\nmorally correct, mechanically wrong several ways, \nsoon see.Copy beach-lookup-table.csv new package. ? Let’s try\ntop-level source package.\ngoing end well. Shipping data package special\ntopic, covered chapter 14.\ngoing end well. Shipping data package special\ntopic, covered chapter 14.Install package.\nDespite problems identified , actually works! \ninteresting, can (try ) use see happens.\nDespite problems identified , actually works! \ninteresting, can (try ) use see happens.’s version script hope run successfully installing package.change previous script thathas replaced byHere’s actually happens try run :None helper functions actually available use, even though call library(delta)!\ncontrast source()ing file helper functions, attaching package dump functions global workspace.\ndefault, functions package internal use.\nneed export localize_beach(), celsify_temp(), outfile_path() users can call .\nbook, achieve putting @export special roxygen comment function (namespace management covered chapter 13).Let’s say , run devtools::document() (re)generate NAMESPACE file, re-install package.\nNow execute script, works!Correction: works sometimes.\nSpecifically, works working directory set top-level source package.\nworking directory, still get error:lookup table consulted inside localize_beach() found.\nOne simply dump CSV files source R package expect things “just work”.\nfix next iteration package (chapter 14 full coverage include data package).abandon initial experiment, let’s also marvel fact able install, attach, , certain extent, use fundamentally broken package.\nload_all() works fine, !\nsobering reminder running R CMD check, probably via check(), often development.\nquickly alert many problems simple installation usage reveal.Indeed, R CMD check fails package see this8:mean “package called ‘tidyverse’”?!?\n’re using , problems, main script!\nAlso, ’ve already installed used package, can’t R CMD check install ?error happens strictness R CMD check meets first line R/cleaning-helpers.R:declare package depends another package (tidyverse, case).\nmake functions another package available use .\nDependencies must declared DESCRIPTION (’s ).\nSince declared dependencies, R CMD check takes us word tries install package base packages available, means library(tidyverse) call fails.\n“regular” installation succeeds, simply tidyverse available regular library, hides particular mistake.review, copying cleaning-helpers.R R/cleaning-helpers.R, without modification, problematic (least) ways:account exported vs. non-exported functions.CSV file holding lookup table found installed\npackage.properly declare dependency add-packages.","code":"\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n\nwrite_csv(dat, outfile_path(infile))\nsource(\"cleaning-helpers.R\")\nlibrary(delta)\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n#> Error in localize_beach(.) : could not find function \"localize_beach\"\n\nwrite_csv(dat, outfile_path(infile))\n#> Error in outfile_path(infile) : could not find function \"outfile_path\"\n#' @export\ncelsify_temp <- function(dat) {\n  mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp))\n}\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n#> Error: 'beach-lookup-table.csv' does not exist in current working directory ('/Users/jenny/tmp').\n\nwrite_csv(dat, outfile_path(infile))* installing *source* package ‘delta’ ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\nError in library(tidyverse) : there is no package called ‘tidyverse’\nError: unable to load R code in package ‘delta’\nExecution halted\nERROR: lazy loading failed for package ‘delta’\n* removing ‘/Users/jenny/rrr/delta.Rcheck/delta’\nlibrary(tidyverse)"},{"path":"package-within.html","id":"echo-a-working-package","chapter":"6 The package within","heading":"6.5 Echo: a working package","text":"’re ready make minimal version package actually works.new version R/cleaning-helpers.R9:’ve gone back defining lookup_table R code, since initial attempt read CSV created sort filepath snafu.\nOK small, internal, static data, remember see chapter 14 general techniques storing data package.calls tidyverse functions now qualified name specific package actually provides function, e.g. dplyr::mutate().\nways access functions another package, explained chapter 13, recommended default.\nalso strong recommendation one depend tidyverse meta-package package10.\nInstead, better identify specific package(s) actually use.\ncase, package uses dplyr.library(tidyverse) call gone instead declare use dplyr Imports field DESCRIPTION:, together use namespace-qualified calls, like dplyr::left_join(), constitutes valid way use another package within .\nmetadata conveyed via DESCRIPTION covered chapter 8.user-facing functions @export tag roxygen comment, means devtools::document() adds correctly NAMESPACE file.\nNote f_to_c() currently used internally, inside celsify_temp(), exported (likewise timestamp()).version package can installed, used, technically passes R CMD check, though 1 note 1 warning.“visible binding” note peculiarity using dplyr unquoted variable names inside package, use bare variable names (english temp) looks suspicious.\nadd either lines file R/ eliminate note11:warning missing documentation haven’t properly documented exported functions.\nvalid concern something absolutely address real package.\n’ve already seen create help files roxygen comments whole game chapter cover topic thoroughly chapter 10.\nTherefore, won’t discuss .","code":"\nlookup_table <- dplyr::tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\n#' @export\nlocalize_beach <- function(dat) {\n  dplyr::left_join(dat, lookup_table)\n}\n\nf_to_c <- function(x) (x - 32) * 5/9\n\n#' @export\ncelsify_temp <- function(dat) {\n  dplyr::mutate(dat, temp = dplyr::if_else(english == \"US\", f_to_c(temp), temp))\n}\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\n\n#' @export\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}Package: echo\n(... other lines omitted ...)\nImports: \n    dplyr* checking R code for possible problems ... NOTE\ncelsify_temp: no visible binding for global variable ‘english’\ncelsify_temp: no visible binding for global variable ‘temp’\nUndefined global functions or variables:\n  english temp\n\n* checking for missing documentation entries ... WARNING\nUndocumented code objects:\n  ‘celsify_temp’ ‘localize_beach’ ‘outfile_path’\nAll user-level objects in a package should have documentation entries.\nSee chapter ‘Writing R documentation files’ in the ‘Writing R\nExtensions’ manual.\n# option 1 (then you should also put utils in Imports)\nutils::globalVariables(c(\"english\", \"temp\"))\n\n# option 2\nenglish <- temp <- NULL"},{"path":"package-within.html","id":"package-within-build-time-run-time","chapter":"6 The package within","heading":"6.6 Foxtrot: build time vs. run time","text":"package works, great, group members notice something odd timestamps:datetime timestamped filename doesn’t reflect time reported system.\nfact, users claim timestamp never seems change !\n?Recall form filepath output files:fact capture now <- Sys.time() outside definition outfile_path() probably vexing readers .\nnow reflects instant time execute now <- Sys.time().\ninitial approach, happened source()d cleaning-helpers.R.\n’s ideal, probably pretty harmless mistake, helper file source()d shortly wrote outfile.approach quite devastating context package.\nnow <- Sys.time() executed package built.\nnever .\neasy subconsciously assume package code re-evaluated package installed, attached, used.\n.\nYes, code inside functions absolutely run whenever called.\nfunctions – objects created top-level code R/ – defined exactly , build time.defining now top-level code R/, ’ve doomed package timestamp output files (wrong) time.\nfix make sure Sys.time() call happens runtime.Let’s look parts R/cleaning-helpers.R:four top-level <- assignments excerpt.\ntop-level definitions data frame lookup_table functions timestamp() outfile_path() correct.\nappropriate defined exactly , build time.\ntop-level definition now, used inside outfile_path(), regrettable.better versions outfile_path():illustrates need different mindset defining objects inside package.\nvast majority objects functions functions generally use data create passed via argument.\ntypes sloppiness fairly harmless function defined immediately use, can costly functions distributed package.","code":"\nSys.time()\n#> [1] \"2022-02-24 20:49:59 PST\"\n\noutfile_path(\"INFILE.csv\")\n#> [1] \"2020-September-03_11-06-33_INFILE_clean.csv\"\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\nlookup_table <- dplyr::tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n# always timestamp as \"now\"\noutfile_path <- function(infile) {\n  ts <- timestamp(Sys.time())\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\n# allow user to provide a time, but default to \"now\"\noutfile_path <- function(infile, time = Sys.time()) {\n  ts <- timestamp(time)\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}"},{"path":"package-within.html","id":"package-within-side-effects","chapter":"6 The package within","heading":"6.7 Golf: side effects","text":"timestamps now reflect current time, group raises new concern.\nstands, timestamps reflect done data cleaning part world ’re .\nheart timestamp strategy format string12:formats Sys.time() way includes month name (number) local time13.’s timestamp produced hypothetical colleagues cleaning data exactly instant time.see month names vary, time, even date!\nsafest choice form timestamps respect fixed locale time zone (presumably non-geographic choices represented “Computer World!” ).research learn can force certain locale via Sys.setlocale() force certain time zone setting TZ environment variable.\nSpecifically, set LC_TIME component locale “C” time zone “UTC” (Coordinated Universal Time).\n’s first attempt improve timestamp():Brazilian colleague notices datetimes print differently, uses outfile_path() package:::Notice month name switched Portuguese English time clearly reported different time zone.\ncalls Sys.setlocale() Sys.setenv() inside timestamp() made persistent (surprising) changes R session.\nsort side effect undesirable extremely difficult track debug, especially complicated settings.better versions timestamp():show various methods limit scope changes LC_TIME timezone.\ngood rule thumb make scope changes narrow possible practical.\ntz argument format() surgical way deal timezone, nothing similar exists LC_TIME.\nmake temporary locale modification using withr package, provides flexible toolkit temporary state changes.\n(base::.exit()) discussed section 7.5.underscores point previous section: need adopt different mindset defining functions inside package.\nTry avoid making changes user’s overall state.\nchanges unavoidable, make sure reverse (possible) document explicitly (related function’s primary purpose).","code":"\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n#> [1] \"2022-May-20_07-13-56\"\ntimestamp <- function(time = Sys.time()) {\n  Sys.setlocale(\"LC_TIME\", \"C\")\n  Sys.setenv(TZ = \"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")#> [1] \"2022-maio-20_04-13-56\"\noutfile_path(\"INFILE.csv\")\n#> [1] \"2022-May-20_07-13-56_INFILE_clean.csv\"\n\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n#> [1] \"2022-May-20_07-13-56\"\n# use withr::local_*() functions to keep the changes local to timestamp()\ntimestamp <- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  withr::local_timezone(\"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\n\n# use the tz argument to format.POSIXct()\ntimestamp <- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n}\n\n# put the format() call inside withr::with_*()\ntimestamp <- function(time = Sys.time()) {\n  withr::with_locale(\n    c(\"LC_TIME\" = \"C\"),\n    format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n  )\n}"},{"path":"r.html","id":"r","chapter":"7 R code","heading":"7 R code","text":"first principle making package R code goes R/ directory.\nchapter, ’ll learn organising functions files, maintaining consistent style, recognizing stricter requirements functions package (versus script).\n’ll also remind fundamental workflows test-driving formally checking -development package: load_all(), test(), check().","code":""},{"path":"r.html","id":"code-organising","chapter":"7 R code","heading":"7.1 Organise functions into files","text":"hard rule package store function definitions R scripts, .e. files extension .R, live R/ directory14.\nHowever, conventions can make source code package easier navigate relieve re-answering “name ?” time create new file.\nTidyverse Style Guide offers general advice file names also advice specifically applies files package.\nexpand .file name meaningful convey functions defined within.\n’re free arrange functions files wish, two extremes bad: don’t put functions one file don’t put function separate file.\nadvice inform general policy, exceptions every rule.\nspecific function large lots documentation, can make sense give file, named function.\noften, single .R file contain multiple function definitions: main function supporting helpers, family related functions, combination two.examples actual source tidyr package version 1.1.2.\ndepartures hard--fast rules given , illustrates ’s lot room judgment .Another file often see wild R/utils.R.\ncommon place define small utilities used inside multiple package functions.\nSince serve helpers multiple functions, placing R/utils.R makes easier re-discover return package long break.Bob Rudis assembled collection files analysis post Dissecting R Package “Utility Belts”.’s hard predict file function lives , suggests ’s time separate functions files reconsider naming functions /files.organisation functions within files less important RStudio, offers two ways jump definition function:Press Ctrl + . (period) start typing name. Keep typing narrow\nlist eventually pick function (file) visit. works \nfunctions files project.\nPress Ctrl + . (period) start typing name. Keep typing narrow\nlist eventually pick function (file) visit. works \nfunctions files project.cursor function name function name selected, press\nF2. works functions defined package another package.cursor function name function name selected, press\nF2. works functions defined package another package.","code":""},{"path":"r.html","id":"code-load-all","chapter":"7 R code","heading":"7.2 Fast feedback via load_all()","text":"add modify functions defined files R/, naturally want try .\nwant reiterate strong recommendation use devtools::load_all() make available interactive exploration instead , example, source()ing files R/.\nmain coverage load_all() workflows chapter load_all() also shows one natural development tasks whole game.\nCompared alternatives, load_all() helps iterate quickly provides excellent approximation namespace regime installed package.","code":""},{"path":"r.html","id":"code-style","chapter":"7 R code","heading":"7.3 Code style","text":"recommend following tidyverse style guide (https://style.tidyverse.org), goes much detail can .\nformat also allows dynamic document book.Although style guide explains “” “”, another important decision enforce specific code style.\nrecommend styler package (https://styler.r-lib.org); default behaviour enforces tidyverse style guide.\nmany ways apply styler code, depending context:styler::style_pkg() restyles entire R package.styler::style_dir() restyles files directory.usethis::use_tidy_style() wrapper applies one functions\ndepending whether current project R package .styler::style_file() restyles single file.styler::style_text() restyles character vector.styler installed, RStudio Addins menu offer several additional ways style code:active selectionthe active filethe active packageThe use Git another version control system optional, recommended practice long-term.\nexplain importance 18.\nexample, ’s nerve-wracking somewhat dangerous apply function like styler::style_pkg() without way see exactly changed accept/reject changes granular way.styler package can also integrated various platforms hosting source code continuous integration.\nexample, tidyverse packages use GitHub Action restyles package triggered special comment (/style) pull request.\nallows maintainers focus reviewing substance pull request, without nitpick small issues whitespace indentation1516.","code":""},{"path":"r.html","id":"understand-when-code-is-executed","chapter":"7 R code","heading":"7.4 Understand when code is executed","text":"now, ’ve probably writing scripts, R code saved file execute interactively, perhaps using IDE /source(), noninteractively via Rscript.\ntwo main differences code scripts packages:script, code run … run ! awkwardness \nstatement reflects ’s hard even think issue \nscript. However, must, order appreciate code package \nrun package built. big implications write\ncode R/: package code create objects, vast majority\nfunctions.script, code run … run ! awkwardness \nstatement reflects ’s hard even think issue \nscript. However, must, order appreciate code package \nrun package built. big implications write\ncode R/: package code create objects, vast majority\nfunctions.Functions package used situations didn’t imagine.\nmeans functions need thoughtful way interact\noutside world.Functions package used situations didn’t imagine.\nmeans functions need thoughtful way interact\noutside world.expand first point second next section.source() script, every line code executed results immediately made available.\nThings different package code, loaded two steps.\nbinary package built (often, CRAN) code R/ executed results saved.\nattach package library(), cached results re-loaded certain objects (mostly functions) made available use.\nfull details means package binary form given 4.4.\nrefer creation binary package (binary) “build time” , specifically, mean R CMD INSTALL --build run.\n(might think R CMD build , actually makes bundled package, .k.. “source tarball”.)\nmacOS Windows users CRAN packages, build time whenever CRAN built binary package OS.\ninstall packages source, build time essentially (built ) installed package.Consider assignment x <- Sys.time().\nput script, x tells script source()d.\nput code package, x tells package binary built.\nsection 6.6, show complete example context forming timestamps inside package.main takeaway :R code outside function suspicious carefully reviewed.explore real-world examples show easy get burned “build time vs. load time” issue.\nLuckily, diagnose problem, generally difficult fix.","code":""},{"path":"r.html","id":"a-path-returned-by-system.file","chapter":"7 R code","heading":"7.4.1 A path returned by system.file()","text":"shinybootstrap2 package code R/:dataTableDependency object defined top-level package code depends paths obtained via system.file().\ndescribed GitHub issue,works fine package built tested machine.\nHowever, package built one machine used another (case CRAN binary packages), fail – dependency point wrong directory host.heart solution make sure system.file() called function, run time.\nIndeed, fix made (commit 138db47) packages similar code related check added htmlDependency() .\nparticular problem now caught R CMD check, due changes came staged installation R 3.6.0.","code":"\ndataTableDependency <- list(\n  htmlDependency(\n    \"datatables\", \"1.10.2\",\n    c(file = system.file(\"www/datatables\", package = \"shinybootstrap2\")),\n    script = \"js/jquery.dataTables.min.js\"\n  ),\n  htmlDependency(\n    \"datatables-bootstrap\", \"1.10.2\",\n    c(file = system.file(\"www/datatables\", package = \"shinybootstrap2\")),\n    stylesheet = c(\"css/dataTables.bootstrap.css\", \"css/dataTables.extra.css\"),\n    script = \"js/dataTables.bootstrap.js\"\n  )\n)"},{"path":"r.html","id":"available-colours","chapter":"7 R code","heading":"7.4.2 Available colours","text":"crayon package function, crayon::show_ansi_colors(), displays ANSI colour table screen, basically show sort styling possible.\nearly version, function looked something like :ansi_colors_8 ansi_colors_256 character vectors exploring certain set colours, presumably styled via ANSI escapes.problem objects formed cached binary package built.\nSince often happens headless server, likely happens conditions terminal colours might enabled even available.\nUsers installed package still call show_ansi_colors() num_colors() detect number colours supported system (256 modern computers).\nun-coloured object print screen (original GitHub issue r-lib/crayon#37).solution compute display objects function run time (commit e2b368a:Literally, code used, simply pushed body function taking arguments (similar shinybootstrap2 example).\nreference , e.g., ansi_colors_8 object replaced call ansi_colors_8() function.main takeaway functions assess expose capabilities package user’s system must fully execute user’s system.\n’s fairly easy accidentally rely results cached build time, quite possibly different machine.","code":"show_ansi_colors <- function(colors = num_colors()) {\n  if (colors < 8) {\n    cat(\"Colors are not supported\")\n  } else if (colors < 256) {\n    cat(ansi_colors_8, sep = \"\")\n    invisible(ansi_colors_8)\n  } else {\n    cat(ansi_colors_256, sep = \"\")\n    invisible(ansi_colors_256)\n  }\n}\n\nansi_colors_8 <- # code to generate a vector covering basic terminal colors\n  \nansi_colors_256 <- # code to generate a vector covering 256 colors\nshow_ansi_colors <- function(colors = num_colors()) {\n  if (colors < 8) {\n    cat(\"Colors are not supported\")\n  } else if (colors < 256) {\n    cat(ansi_colors_8(), sep = \"\")\n    invisible(ansi_colors_8())\n  } else {\n    cat(ansi_colors_256(), sep = \"\")\n    invisible(ansi_colors_256())\n  }\n}\n\nansi_colors_8 <- function() {\n  # code to generate a vector covering basic terminal colors\n}\n  \nansi_colors_256 <- function() {\n  # code to generate a vector covering 256 colors\n}"},{"path":"r.html","id":"aliasing-a-function","chapter":"7 R code","heading":"7.4.3 Aliasing a function","text":"One last example shows , even careful define functions R/, still subtleties consider.\nImagine want function foo() package basically alias function blah() package, e.g. pkgB.\nmight tempted :However, cause foo() package reflect definition pkgB::blah() version present machine binary package built (often CRAN), moment time.\nbug discovered pkgB::blah() subsequently fixed, package still use older, buggy version, package rebuilt (often CRAN) users upgrade, completely control.\nalternative approach protects :Now, user calls foo(), effectively calling pkgB::blah(), version installed machine moment.real example affected older version knitr, related default “evaluate” hook set evaluate::evaluate() (original issue yihui/knitr#1441, resolved commit d6b53e0).","code":"\nfoo <- pkgB::blah\nfoo <- function(...) pkgB::blah(...)"},{"path":"r.html","id":"code-r-landscape","chapter":"7 R code","heading":"7.5 Respect the R landscape","text":"Another big difference script package people going use package, ’re going use situations never imagined.\nmeans need pay attention R landscape, includes just available functions objects, global settings.changed R landscape ’ve loaded package library(), changed global option options(), modified working directory setwd().\nbehaviour functions differs running function, ’ve modified landscape.\nside effects section “package within” chapter concrete example involving time zones locale-specific printing datetimes.\nChanging landscape bad makes code much harder understand.functions modify global settings never use better alternatives:Don’t use library() require(). modify search path,\naffecting functions available global environment.\nInstead, use DESCRIPTION specify package’s\nrequirements, described chapter 8. also makes sure\npackages installed package installed.Don’t use library() require(). modify search path,\naffecting functions available global environment.\nInstead, use DESCRIPTION specify package’s\nrequirements, described chapter 8. also makes sure\npackages installed package installed.Never use source() load code file. source() modifies \ncurrent environment, inserting results executing code. \nreason use source() inside package, .e. file R/.\nSometimes people source() files R/ package development, \n’ve explained 5.4 7.2, load_all()\nmuch better way load current code exploration. ’re\nusing source() create dataset, better use methods \n14 including data package.Never use source() load code file. source() modifies \ncurrent environment, inserting results executing code. \nreason use source() inside package, .e. file R/.\nSometimes people source() files R/ package development, \n’ve explained 5.4 7.2, load_all()\nmuch better way load current code exploration. ’re\nusing source() create dataset, better use methods \n14 including data package.non-exhaustive list functions used caution:options()par()setwd()Sys.setenv()Sys.setlocale()set.seed() (anything changes state random number\ngenerator) TODO: maybe tell one scary stories \nhttps://github.com/hadley/r-pkgs/issues/447If must use , make sure clean .\nshow using functions withr package base R.flip side coin avoid relying user’s landscape, might different .\nexample, functions like read.csv() dangerous value stringsAsFactors argument comes global option stringsAsFactors.\nexpect TRUE (default), user set FALSE, code might fail.TODO: update replace example light stringsAsFactors changes.","code":""},{"path":"r.html","id":"manage-state-with-withr","chapter":"7 R code","heading":"7.5.1 Manage state with withr","text":"withr package inspired base::.exit() provides flexible .exit()-like toolkit (.exit() covered next section).\nwithr::defer() can used drop-replacement .exit(), real reason use get default “stack-like” behaviour use envir argument (advanced usage).general pattern capture original state, schedule eventual restoration “exit”, make state change.\nsetters, options() par(), return old value provide new value, leading usage looks like :Certain state changes, modifying session options, come often withr offers pre-made helpers.\nstate change helpers withr likely find useful:’ll notice helper comes two forms useful different situations:with_*() functions best executing small snippets code \ntemporarily modified state. (functions inspired \nbase::() works.)\n\nf <- function(x, sig_digits) {\n  # imagine lots code \n  withr::with_options(\n    list(digits = sig_digits),\n    print(x)\n  )\n  # ... lot code \n}with_*() functions best executing small snippets code \ntemporarily modified state. (functions inspired \nbase::() works.)local_*() functions best modifying state “now \nfunction exits”.\n\ng <- function(x, sig_digits) {\n  withr::local_options(list(digits = sig_digits))\n  print(x)\n  # imagine lots code \n}local_*() functions best modifying state “now \nfunction exits”.Developing code interactively withr pleasant, deferred actions can scheduled even global environment.\ncleanup actions can executed withr::deferred_run() cleared without execution withr::deferred_clear().\nWithout feature, can tricky experiment code needs cleanup “exit”, behaves differently executed console versus arm’s length inside function.-depth coverage given withr vignette Changing restoring state withr also prove useful talk testing chapter 12.","code":"\nf <- function(x, y, z) {\n  ...\n  old <- options(mfrow = c(2, 2), pty = \"s\")\n  defer(options(old))\n  ...\n}\nf <- function(x, sig_digits) {\n  # imagine lots of code here\n  withr::with_options(\n    list(digits = sig_digits),\n    print(x)\n  )\n  # ... and a lot more code here\n}\ng <- function(x, sig_digits) {\n  withr::local_options(list(digits = sig_digits))\n  print(x)\n  # imagine lots of code here\n}"},{"path":"r.html","id":"restore-state-with-baseon.exit","chapter":"7 R code","heading":"7.5.2 Restore state with base::on.exit()","text":"general “save, schedule restoration, change” pattern looks using base::.exit().state changes aren’t available sort setter must implement .Note specify .exit(..., add = TRUE), almost always want behaviour, .e. add list deferred cleanup tasks rather replace entirely.\n(default value ) related preference withr::defer(), ’re willing take dependency withr.\nissues explored withr vignette.","code":"\nf <- function(x, y, z) {\n  ...\n  old <- options(mfrow = c(2, 2), pty = \"s\")\n  on.exit(options(old), add = TRUE)\n  ...\n}\ng <- function(a, b, c) {\n  ...\n  scratch_file <- tempfile()\n  on.exit(unlink(scratch_file), add = TRUE)\n  file.create(scratch_file)\n  ...\n}"},{"path":"r.html","id":"isolate-side-effects","chapter":"7 R code","heading":"7.5.3 Isolate side effects","text":"Creating plots printing output console two ways affecting global R environment.\nOften can’t avoid (’re important!) ’s good practice isolate functions produce output.\nalso makes easier people repurpose work new uses.\nexample, separate data preparation plotting two functions, others can use data prep work (often hardest part!) create new visualisations.","code":""},{"path":"r.html","id":"when-you-do-need-side-effects","chapter":"7 R code","heading":"7.5.4 When you do need side-effects","text":"Occasionally, packages need side-effects.\ncommon package talks external system — might need initial setup package loads.\n, can use two special functions: .onLoad() .onAttach().\ncalled package loaded attached.\n’ll learn distinction two Namespaces.\nnow, always use .onLoad() unless explicitly directed otherwise.common uses .onLoad() .onAttach() :display informative message package loads. might make\nusage conditions clear display package capabilities based current\nsystem conditions. Startup messages one place use\n.onAttach() instead .onLoad(). display startup messages, always\nuse packageStartupMessage(), message(). (allows\nsuppressPackageStartupMessages() selectively suppress package startup\nmessages).\n\n.onAttach <- function(libname, pkgname) {\n  packageStartupMessage(\"Welcome package\")\n}display informative message package loads. might make\nusage conditions clear display package capabilities based current\nsystem conditions. Startup messages one place use\n.onAttach() instead .onLoad(). display startup messages, always\nuse packageStartupMessage(), message(). (allows\nsuppressPackageStartupMessages() selectively suppress package startup\nmessages).set custom options package options(). avoid conflicts\npackages, ensure prefix option names name\npackage. Also careful override options user\nalready set.\nTODO: update reflect current usethis options.\nuse following code devtools set useful options:\n\n.onLoad <- function(libname, pkgname) {\n  op <- options()\n  op.devtools <- list(\n    devtools.path = \"~/R-dev\",\n    devtools.install.args = \"\",\n    devtools.name = \"name goes \",\n    devtools.desc.author = \"First Last <first.last@example.com> [aut, cre]\",\n    devtools.desc.license = \"license ?\",\n    devtools.desc.suggests = NULL,\n    devtools.desc = list()\n  )\n  toset <- !(names(op.devtools) %% names(op))\n  ((toset)) options(op.devtools[toset])\n\n  invisible()\n}\ndevtools functions can use e.g. getOption(\"devtools.name\") \nget name package author, know sensible default value\nalready set.set custom options package options(). avoid conflicts\npackages, ensure prefix option names name\npackage. Also careful override options user\nalready set.TODO: update reflect current usethis options.\nuse following code devtools set useful options:devtools functions can use e.g. getOption(\"devtools.name\") \nget name package author, know sensible default value\nalready set.register vignette engines tools::vignetteEngine().\nTODO: update / remove ?register vignette engines tools::vignetteEngine().\nTODO: update / remove ?can see examples, .onLoad() .onAttach() called two arguments: libname pkgname.\n’re rarely used (’re holdover days needed use library.dynam() load compiled code).\ngive path package installed (“library”), name package.use .onLoad(), consider using .onUnload() clean side effects.\nconvention, .onLoad() friends usually saved file called R/zzz.R.\n(Note .First.lib() .Last.lib() old versions .onLoad() .onUnload() longer used.)","code":"\n.onAttach <- function(libname, pkgname) {\n  packageStartupMessage(\"Welcome to my package\")\n}\n.onLoad <- function(libname, pkgname) {\n  op <- options()\n  op.devtools <- list(\n    devtools.path = \"~/R-dev\",\n    devtools.install.args = \"\",\n    devtools.name = \"Your name goes here\",\n    devtools.desc.author = \"First Last <first.last@example.com> [aut, cre]\",\n    devtools.desc.license = \"What license is it under?\",\n    devtools.desc.suggests = NULL,\n    devtools.desc = list()\n  )\n  toset <- !(names(op.devtools) %in% names(op))\n  if(any(toset)) options(op.devtools[toset])\n\n  invisible()\n}"},{"path":"r.html","id":"constant-health-checks","chapter":"7 R code","heading":"7.6 Constant health checks","text":"typical sequence calls using devtools package development:Edit one files R/.document() (’ve made changes impact help files NAMESPACE)load_all()Run examples interactively.test() (test_file())check()interesting question frequently rapidly move development cycle.\noften find running sequence several times hour day adding modifying single function.newer package development might comfortable slinging R code much less comfortable writing compiling documentation, simulating package build & installation, testing, running R CMD check.\nhuman nature embrace familiar postpone unfamiliar.\noften leads dysfunctional workflow full sequence unfolds infrequently, maybe per month every couple months, slowly often great pain:Edit one files R/.Build, install, use package. Iterate occasionally previous step.Write documentation (code “done”).Write tests (code “done”).Run R CMD check right submitting CRAN releasing \nway.’ve already talked value fast feedback, context load_all().\nalso applies running document(), test(), check().\ndefects just can’t detect using load_all() running interactive examples immediately revealed formal checks.\nFinding fixing 5 bugs, one time, right created one much easier troubleshooting 5 (possibly interacting ), weeks months last touched code.","code":""},{"path":"r.html","id":"code-cran","chapter":"7 R code","heading":"7.7 CRAN notes","text":"(chapter finish hints submitting package CRAN.\ndon’t plan submitting package CRAN, feel free ignore !)’re planning submitting package CRAN, must use ASCII characters .R files.\npractice, means limited digits 0 9, lowercase letters ‘’ ‘z’, uppercase letters ‘’ ‘Z’, common punctuation.sometimes need inline small bit character data includes, e.g., Greek letter (µ), accented character (ü), symbol (30°).\ncan use Unicode character long specify special Unicode escape \"\\u1234\" format.\neasiest way find correct code point use stringi::stri_escape_unicode():Sometimes opposite problem.\ndon’t intentionally non-ASCII characters R code, automated checks reveal .common offenders “curly” “smart” single double quotes sneak copy/paste.\nfunctions tools::showNonASCII() tools::showNonASCIIfile(file) help find offending file(s) line(s).","code":"\nx <- \"This is a bullet •\"\ny <- \"This is a bullet \\u2022\"\nidentical(x, y)\n#> [1] TRUE\ncat(stringi::stri_escape_unicode(x))\n#> This is a bullet \\u2022W  checking R files for non-ASCII characters ...\n   Found the following file with non-ASCII characters:\n     foo.R\n   Portable packages must use only ASCII characters in their R code,\n   except perhaps in comments.\n   Use \\uxxxx escapes for other characters.\ntools::showNonASCIIfile(\"R/foo.R\")\n#> 666: #' If you<e2><80><99>ve copy/pasted quotes, watch out!"},{"path":"description.html","id":"description","chapter":"8 Package metadata","heading":"8 Package metadata","text":"job DESCRIPTION file store important metadata package.\nfirst start writing packages, ’ll mostly use metadata record packages needed run package.\nHowever, time goes , aspects metadata file become useful , revealing package (via Title Description) contact (!) problems.Every package must DESCRIPTION.\nfact, ’s defining feature package (RStudio devtools consider directory containing DESCRIPTION package)17.\nget started, usethis::create_package(\"mypackage\") automatically adds bare-bones DESCRIPTION file.\nallow start writing package without worry metadata need .\nminimal DESCRIPTION vary bit depending settings, look something like :create lot packages, can customize default content new DESCRIPTION files setting global option usethis.description named list.\ncan pre-configure preferred name, email, license, etc.\nSee article usethis setup details.DESCRIPTION uses simple file format called DCF, Debian control format.\ncan see structure examples chapter.\nline consists field name value, separated colon.\nvalues span multiple lines, need indented:ever need work DESCRIPTION file programmatically, take look desc package, usethis uses heavily --hood.chapter show use important DESCRIPTION fields.\nImports , lesser extent, Suggests key fields declaring dependencies.\nTitle Description provide concise information package, suitable inclusion package lists.\ndiscuss useful fields, sufficiently important merit dedicated treatment elsewhere book, licensing (covered Chapter 9).","code":"Package: mypackage\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.0Description: The description of a package is usually long,\n    spanning multiple lines. The second and subsequent lines\n    should be indented, usually with four spaces."},{"path":"description.html","id":"description-dependencies","chapter":"8 Package metadata","heading":"8.1 Dependencies: What does your package need?","text":"’s job DESCRIPTION list packages package needs work.\nR rich set ways describe different types dependencies.\nkey point whether dependency needed regular users needed development tasks optional functionality.Packages listed Imports needed users runtime.\nfollowing lines indicate package absolutely needs dplyr tidyr work.Packages listed Suggests either needed development tasks might unlock optional functionality users.\nlines indicate , package can take advantage ggplot2 testthat, ’re absolutely required:example, withr package useful writing tests clean .\nusage compatible listing withr Suggests, since regular users don’t need run tests.\nsometimes package might also use withr functions, perhaps offer with_*() local_*() functions.\ncase, withr listed Imports.Imports Suggests take comma-separated list package names.\nrecommend putting one package line, keeping alphabetical order.\nnon-haphazard order makes easier humans parse field appreciate changes.\neasiest way add package Imports Suggests usethis::use_package().\ndependencies already alphabetical order, use_package() keep way.\ngeneral, can nice run usethis::use_tidy_description() regularly, orders formats DESCRIPTION fields according fixed standard.Imports Suggests differ strength nature dependency:Imports: packages listed must present package work.\ntime package installed, packages also installed, \nalready present.\ndevtools::load_all() also checks packages Imports \ninstalled.\nAdding package Imports ensures installed, \nmean attached along package, .e. \nequivalent library(otherpkg)18.\nInside package, best practice explicitly refer external\nfunctions using syntax package::function().\nmakes easy identify functions live outside \npackage.\nespecially useful read code future.\nuse lot functions another package, rather verbose.\n’s also minor performance penalty associated :: (order \n5µs, matter call function millions times).\n’ll learn alternative ways make functions packages\navailable inside package section 13.6.Imports: packages listed must present package work.\ntime package installed, packages also installed, \nalready present.\ndevtools::load_all() also checks packages Imports \ninstalled.Adding package Imports ensures installed, \nmean attached along package, .e. \nequivalent library(otherpkg)18.\nInside package, best practice explicitly refer external\nfunctions using syntax package::function().\nmakes easy identify functions live outside \npackage.\nespecially useful read code future.use lot functions another package, rather verbose.\n’s also minor performance penalty associated :: (order \n5µs, matter call function millions times).\n’ll learn alternative ways make functions packages\navailable inside package section 13.6.Suggests: package can use packages, doesn’t require .\nmight use suggested packages example datasets, run tests, build\nvignettes, maybe ’s one function needs package.\nPackages listed Suggests automatically installed along \npackage.\nmeans can’t assume package available unconditionally.\nshow various ways handle checks.Suggests: package can use packages, doesn’t require .\nmight use suggested packages example datasets, run tests, build\nvignettes, maybe ’s one function needs package.Packages listed Suggests automatically installed along \npackage.\nmeans can’t assume package available unconditionally.\nshow various ways handle checks.add packages DESCRIPTION usethis::use_package(), also remind recommended way call .","code":"Imports:\n    dplyr,\n    tidyrSuggests:\n    ggplot2,\n    testthat\nusethis::use_package(\"dplyr\") # Default is \"Imports\"\n#> ✔ Adding 'dplyr' to Imports field in DESCRIPTION\n#> • Refer to functions with `dplyr::fun()`\n\nusethis::use_package(\"ggplot2\", \"Suggests\")\n#> ✔ Adding 'ggplot2' to Suggests field in DESCRIPTION\n#> • Use `requireNamespace(\"ggplot2\", quietly = TRUE)` to test if package is installed\n#> • Then directly refer to functions with `ggplot2::fun()`"},{"path":"description.html","id":"guarding-the-use-of-a-suggested-package","chapter":"8 Package metadata","heading":"8.1.1 Guarding the use of a suggested package","text":"Inside function package, check availability suggested package requireNamespace(\"pkg\", quietly = TRUE).\ntwo basic scenarios:rlang package useful functions checking package availability.\n’s checks around suggested package look use rlang:rlang functions handy features programming, vectorization pkg, classed errors data payload, , check_installed(), offer install needed package interactive session.Suggests isn’t terribly relevant packages user base approximately equal development team packages used predictable context.\ncase, ’s reasonable just use Imports everything.\nUsing Suggests mostly courtesy external users accommodate lean installations.\ncan free users downloading rarely needed packages (especially tricky install) lets get started package quickly possible.Another common place use suggested package example often guard require() (’ll also see requireNamespace() used ).\nexample ggplot2::coord_map().example basically place use require() inside package.Another place might use suggested package vignette.\ntidyverse team generally writes vignettes suggested packages available.\nchoose use suggested packages conditionally vignettes, knitr chunk options purl eval may useful achieving .\nSee Chapter 11 discussion vignettes.","code":"\n# the suggested package is required \nmy_fun <- function(a, b) {\n  if (!requireNamespace(\"pkg\", quietly = TRUE)) {\n    stop(\n      \"Package \\\"pkg\\\" must be installed to use this function.\",\n      call. = FALSE\n    )\n  }\n  # code that includes calls such as pkg::f()\n}\n\n# the suggested package is optional; a fallback method is available\nmy_fun <- function(a, b) {\n  if (requireNamespace(\"pkg\", quietly = TRUE)) {\n    pkg::f()\n  } else {\n    g()\n  }\n}\n# the suggested package is required \nmy_fun <- function(a, b) {\n  rlang::check_installed(\"pkg\", reason = \"to use `my_fun()`\")\n  # code that includes calls such as pkg::f()\n}\n\n# the suggested package is optional; a fallback method is available\nmy_fun <- function(a, b) {\n  if (rlang::is_installed(\"pkg\")) {\n    pkg::f()\n  } else {\n    g()\n  }\n}\n#' @examples\n#' if (require(\"maps\")) {\n#'   nz <- map_data(\"nz\")\n#'   # Prepare a map of NZ\n#'   nzmap <- ggplot(nz, aes(x = long, y = lat, group = group)) +\n#'     geom_polygon(fill = \"white\", colour = \"black\")\n#'  \n#'   # Plot it in cartesian coordinates\n#'   nzmap\n#' }"},{"path":"description.html","id":"whether-and-how-to-guard-in-a-test","chapter":"8 Package metadata","heading":"8.1.1.1 Whether and how to guard in a test","text":"vignettes, tidyverse team usually guard use suggested package test.\ngeneral, vignettes tests, assume suggested packages available.\nmotivation posture self-consistency pragmatism.\nkey packages needed run tests build vignettes (e.g. testthat knitr) appear Suggests, Imports Depends.\nTherefore, tests actually executing vignettes built, implies expansive notion package dependencies applied.\nAlso, empirically, every important scenario running R CMD check, suggested packages installed.\ngenerally true CRAN ensure ’s true automated checks.\nHowever, ’s important note package maintainers take different stance choose protect usage suggested packages tests vignettes.Sometimes even tidyverse team makes exception guards use suggested package test.\n’s test ggplot2, uses testthat::skip_if_not_installed() skip execution suggested sf package available.might justify use skip_if_not_installed()?\ncase, sf package can nontrivial install conceivable contributor want run remaining tests, even sf available.Finally, note testthat::skip_if_not_installed(pkg, minimum_version = \"x.y.z\") can used conditionally skip test based version package.","code":"\ntest_that(\"basic plot builds without error\", {\n  skip_if_not_installed(\"sf\")\n\n  nc_tiny_coords <- matrix(\n    c(-81.473, -81.741, -81.67, -81.345, -81.266, -81.24, -81.473,\n      36.234, 36.392, 36.59, 36.573, 36.437, 36.365, 36.234),\n    ncol = 2\n  )\n\n  nc <- sf::st_as_sf(\n    data_frame(\n      NAME = \"ashe\",\n      geometry = sf::st_sfc(sf::st_polygon(list(nc_tiny_coords)), crs = 4326)\n    )\n  )\n\n  expect_doppelganger(\"sf-polygons\", ggplot(nc) + geom_sf() + coord_sf())\n})"},{"path":"description.html","id":"minimum-versions","chapter":"8 Package metadata","heading":"8.1.2 Minimum versions","text":"need specific version package, specify parentheses package name:always want specify minimum version (dplyr (>= 1.0.0)) rather exact version (dplyr (== 1.0.0)).\nSince R can’t multiple versions package loaded time, specifying exact dependency dramatically increases chance conflicting versions19.Versioning important release package use others.\nUsually people don’t exactly versions packages installed .\nsomeone older package doesn’t function package needs, ’ll get unhelpful error message package advertise minimum version needs.\nHowever, state minimum version, ’ll learn problem clearly, probably time installing package.Think carefully declare minimum version dependency.\nsense, safest thing require version greater equal package’s current version.\npublic work, naturally defined current CRAN version package; private personal projects may adopt convention.\n’s important appreciate implications people try install package: local installation doesn’t fulfill requirements around versions, installation either fail force upgrades dependencies.\ndesirable minimum version requirements genuine, .e. package broken otherwise.\nstated requirements less solid rationale, may unnecessarily conservative inconvenient.absence clear, hard requirements, set minimum versions () based expected user base, package versions likely , cost-benefit analysis lax versus conservative.\nde facto policy tidyverse team specify minimum version using known new feature someone encounters version problem authentic use.\nisn’t perfect, don’t currently tooling better, seems work fairly well practice.","code":"Imports:\n    dplyr (>= 1.0.0),\n    tidyr (>= 1.1.0)"},{"path":"description.html","id":"other-dependencies","chapter":"8 Package metadata","heading":"8.1.3 Other dependencies","text":"three fields allow express specialised dependencies:Depends: Prior roll-namespaces R 2.14.0 2011, Depends\nway “depend” another package.\nNow, despite name, almost always use Imports, Depends.\n’ll learn , still use Depends, \nnamespaces.\ncan also use Depends state minimum version R , e.g.\nDepends: R (>= 4.0.0).\n, think carefully .\nraises issues setting minimum version package \ndepend , except stakes much higher comes R .\nUsers can’t simply consent necessary upgrade, , packages\ndepend , minimum version requirement R can cause cascade \npackage installation failures.\nbackports package \nuseful want use function like tools::R_user_dir(), \nintroduced 4.0.0 2020, still supporting older R versions.\ntidyverse packages officially support current R version, devel\nversion, four previous versions.\nproactively test support standard build matrix use \ncontinuous integration.\nPackages lower level use may need level rigour.\nmain takeaway : state minimum R, reason\ntake reasonable measures test claim regularly.\nDepends: Prior roll-namespaces R 2.14.0 2011, Depends\nway “depend” another package.\nNow, despite name, almost always use Imports, Depends.\n’ll learn , still use Depends, \nnamespaces.can also use Depends state minimum version R , e.g.\nDepends: R (>= 4.0.0).\n, think carefully .\nraises issues setting minimum version package \ndepend , except stakes much higher comes R .\nUsers can’t simply consent necessary upgrade, , packages\ndepend , minimum version requirement R can cause cascade \npackage installation failures.backports package \nuseful want use function like tools::R_user_dir(), \nintroduced 4.0.0 2020, still supporting older R versions.tidyverse packages officially support current R version, devel\nversion, four previous versions.\nproactively test support standard build matrix use \ncontinuous integration.Packages lower level use may need level rigour.\nmain takeaway : state minimum R, reason\ntake reasonable measures test claim regularly.LinkingTo: packages listed rely C C++ code another package.\n’ll learn LinkingTo Chapter 15.LinkingTo: packages listed rely C C++ code another package.\n’ll learn LinkingTo Chapter 15.Enhances: packages listed “enhanced” package.\nTypically, means provide methods classes defined another\npackage (sort reverse Suggests).\n’s hard define means, don’t recommend using\nEnhances.Enhances: packages listed “enhanced” package.\nTypically, means provide methods classes defined another\npackage (sort reverse Suggests).\n’s hard define means, don’t recommend using\nEnhances.can also list things package needs outside R SystemRequirements field.\njust plain text field automatically checked.\nThink quick reference; ’ll also need include detailed system requirements (install ) README.","code":""},{"path":"description.html","id":"an-r-version-gotcha","chapter":"8 Package metadata","heading":"8.1.3.1 An R version gotcha","text":"leave topic, give concrete example easily R version dependency can creep broader impact might expect.\nsaveRDS() function writes single R object .rds file, R-specific format.\nalmost 20 years, .rds files used “version 2” serialization format.\n“Version 3” became new default R 3.6.0 (released April 2019) read R versions prior 3.5.0 (released April 2018).Many R packages least one .rds file lurking within , gets re-generated modern R version, default, new .rds file “version 3” format.\nR package next built, CRAN submission, required R version automatically bumped 3.5.0, signaled message:Literally, DESCRIPTION file bundled package says Depends: R (>= 3.5.0), even DESCRIPTION source package says differently20.package released CRAN, new minimum R version viral, sense packages listing original package Imports even Suggests , varying degrees, inherited new dependency R >= 3.5.0.immediate take-away deliberate version .rds files R versions prior 3.5.0 fallen edge intend support.\nparticular .rds issue won’t us forever, similar issues crop elsewhere, standards implicit compiled C C++ source code.\nbroader message reverse dependencies package , thought need give package’s stated minimum versions, especially R .","code":"NB: this package now depends on R (>= 3.5.0)\n  WARNING: Added dependency on R >= 3.5.0 because serialized objects in\n  serialize/load version 3 cannot be read in older versions of R.\n  File(s) containing such objects:\n    'path/to/some_file.rds'"},{"path":"description.html","id":"nonstandard-dependencies","chapter":"8 Package metadata","heading":"8.1.4 Nonstandard dependencies","text":"packages developed devtools, may see DESCRIPTION files use couple nonstandard fields package dependencies specific development tasks.Remotes field can used need install dependency nonstandard place, .e. somewhere besides CRAN Bioconductor.\nOne common example ’re developing development version one dependencies.\ntime, ’ll want install dependency development repository, often GitHub.\nway specify various remote sources described devtools vignette.dependency minimum version requirement still need declared normal way , e.g., Imports.\nusethis::use_dev_package() helps make necessary changes DESCRIPTION.\npackage temporarily relies development version usethis, affected DESCRIPTION fields might evolve like :’s important note submit package CRAN intermediate state, meaning Remotes field dependency required version ’s available CRAN Bioconductor.\nCRAN packages, can temporary development state, eventually resolved dependency updates CRAN can bump minimum version accordingly.may also see devtools-developed packages packages listed DESCRIPTION fields form Config/Needs/*.\npattern takes advantage fact fields prefixed Config/ ignored CRAN also trigger NOTE “Unknown, possibly mis-spelled, fields DESCRIPTION”.use Config/Needs/* directly related devtools.\n’s accurate say ’s associated continuous integration workflows made available community https://github.com/r-lib/actions/ exposed via functions usethis::use_github_actions().\nConfig/Needs/* field tells setup-r-dependencies GitHub Action extra packages need installed.Config/Needs/website common provides place specify packages aren’t formal dependency, must present order build package’s website.\nleft example might appear DESCRIPTION package uses various tidyverse packages non-vignette articles website, also formatted styling lives tidyverse/template GitHub repo.\nright corresponding excerpt configuration workflow builds deploys website.Continuous integration package websites discussed ?? ??, respectively.\nchapters yet---(re)written task 2nd edition.Config/Needs/* convention handy allows developer use DESCRIPTION definitive record package dependencies, maintaining clean distinction true runtime dependencies versus needed specialized development tasks.","code":"Stable -->               Dev -->                       Stable again\n----------------------   ---------------------------   ----------------------\nPackage: yourpkg         Package: yourpkg              Package: yourpkg\nVersion: 1.0.0           Version: 1.0.0.9000           Version: 1.1.0\nImports:                 Imports:                      Imports: \n    usethis (>= 2.1.3)       usethis (>= 2.1.3.9000)       usethis (>= 2.2.0)\n                         Remotes:   \n                             r-lib/usethis in DESCRIPTION                  in .github/workflows/pkgdown.yaml\n--------------------------      ---------------------------------\nConfig/Needs/website:           - uses: r-lib/actions/setup-r-dependencies@v1\n    tidyverse,                    with:\n    tidyverse/tidytemplate          extra-packages: pkgdown\n                                    needs: website"},{"path":"description.html","id":"description-title-description","chapter":"8 Package metadata","heading":"8.2 Title and description: What does your package do?","text":"title description fields describe package .\ndiffer length:Title one line description package, often shown \npackage listing.\nplain text (markup), capitalised like title, end \nperiod.\nKeep short: listings often truncate title 65 characters.Description detailed title.\ncan use multiple sentences, limited one paragraph.\ndescription spans multiple lines (!), line must \n80 characters wide.\nIndent subsequent lines 4 spaces.Title Description ggplot2 :good title description important, especially plan release package CRAN, appear CRAN download page follows:\nFIGURE 8.1: CRAN page ggplot2, highlighting Title Description.\nplan submit package CRAN, Title Description frequent source rejections reasons covered automated R CMD check.\naddition basics , tips:Put names R packages, software, APIs inside single quotes.\ngoes Title Description.\nSee ggplot2 example .need use acronym, try Description, Title.\neither case, explain acronym Description, .e. fully expand .Don’t include package name, especially Title, often\nprefixed package name.start “package …” “package …”.\nrule makes sense look list CRAN packages name.\ninformation density listing much higher without universal\nprefix like “package …”.constraints give writer’s block, often helps spend minutes reading Title Description packages already CRAN.\nread couple dozen, can usually find way say want say package also likely pass CRAN’s human-enforced checks.’ll notice Description gives small amount space describe package .\n’s important also include README.md file goes much depth shows examples.\n’ll learn section 20.5.1.","code":"Title: Create Elegant Data Visualisations Using the Grammar of Graphics\nDescription: A system for 'declaratively' creating graphics,\n    based on \"The Grammar of Graphics\". You provide the data, tell 'ggplot2'\n    how to map variables to aesthetics, what graphical primitives to use,\n    and it takes care of the details."},{"path":"description.html","id":"description-authors","chapter":"8 Package metadata","heading":"8.3 Author: who are you?","text":"identify package’s author, contact something goes wrong, use Authors@R field.\nfield unusual contains executable R code rather plain text. ’s example:command says Hadley Wickham maintainer (cre) author (aut) email address hadley@rstudio.com.\nperson() function four main inputs:name, specified first two arguments, given family (\nnormally supplied position, name).\nEnglish cultures, given (first name) comes family (last name).\nmany cultures, convention hold.\nnon-person entity, “R Core Team” “RStudio”, use given\nargument (omit family).name, specified first two arguments, given family (\nnormally supplied position, name).\nEnglish cultures, given (first name) comes family (last name).\nmany cultures, convention hold.\nnon-person entity, “R Core Team” “RStudio”, use given\nargument (omit family).email address.\n’s important note address CRAN uses let know\npackage needs fixed order stay CRAN.\nMake sure use email address ’s likely around .\nCRAN policy requires person, opposed , e.g., \nmailing list.email address.\n’s important note address CRAN uses let know\npackage needs fixed order stay CRAN.\nMake sure use email address ’s likely around .\nCRAN policy requires person, opposed , e.g., \nmailing list.One three letter codes specifying role.\nimportant roles know :\ncre: creator maintainer, person bother\nproblems. Despite short “creator”, \ncorrect role use current maintainer, even \ninitial creator package.\naut: authors, made significant contributions \npackage.\nctb: contributors, made smaller contributions, like\npatches.\ncph: copyright holder. used copyright held someone\nauthor, typically company (.e. author’s employer).\nfnd: funder, people organizations provided financial\nsupport development package.\n(full list roles\nextremely comprehensive.\npackage woodcutter (wdc), lyricist (lyr) costume\ndesigner (cst), rest comfortably can correctly describe \nrole creating package.\nHowever, note packages destined CRAN must limit \nsubset MARC roles listed documentation person().)One three letter codes specifying role.\nimportant roles know :cre: creator maintainer, person bother\nproblems. Despite short “creator”, \ncorrect role use current maintainer, even \ninitial creator package.cre: creator maintainer, person bother\nproblems. Despite short “creator”, \ncorrect role use current maintainer, even \ninitial creator package.aut: authors, made significant contributions \npackage.aut: authors, made significant contributions \npackage.ctb: contributors, made smaller contributions, like\npatches.ctb: contributors, made smaller contributions, like\npatches.cph: copyright holder. used copyright held someone\nauthor, typically company (.e. author’s employer).cph: copyright holder. used copyright held someone\nauthor, typically company (.e. author’s employer).fnd: funder, people organizations provided financial\nsupport development package.fnd: funder, people organizations provided financial\nsupport development package.(full list roles\nextremely comprehensive.\npackage woodcutter (wdc), lyricist (lyr) costume\ndesigner (cst), rest comfortably can correctly describe \nrole creating package.\nHowever, note packages destined CRAN must limit \nsubset MARC roles listed documentation person().)optional comment argument become relevant, since person() \nCRAN landing pages gained nice features around\nORCID identifiers.\n’s example usage (note auto-generated URI):\n\nperson(\n  \"Jennifer\", \"Bryan\",\n  email = \"jenny@rstudio.com\",\n  role = c(\"aut\", \"cre\"),\n  comment = c(ORCID = \"0000-0002-6983-2759\")\n)\n#> [1] \"Jennifer Bryan <jenny@rstudio.com> [aut, cre] (<https://orcid.org/0000-0002-6983-2759>)\"optional comment argument become relevant, since person() \nCRAN landing pages gained nice features around\nORCID identifiers.\n’s example usage (note auto-generated URI):can list multiple authors c():Every package must least one author (aut) one maintainer (cre) (might person).\nmaintainer (cre) must email address.\nfields used generate basic citation package (e.g. citation(\"pkgname\")).\npeople listed authors included auto-generated citation.\nextra details ’re including code people written.\nSince typically occurs ’re wrapping C library, ’s discussed Chapter 15.older, still valid approach separate Maintainer Author fields DESCRIPTION.\nHowever, strongly recommend modern approach Authors@R person() function, offers richer metadata various downstream uses.","code":"Authors@R: person(\"Hadley\", \"Wickham\", email = \"hadley@rstudio.com\",\n  role = c(\"aut\", \"cre\"))\nperson(\"Hadley\", \"Wickham\", email = \"hadley@rstudio.com\", \n  role = c(\"aut\", \"cre\"))\n#> [1] \"Hadley Wickham <hadley@rstudio.com> [aut, cre]\"\nperson(\n  \"Jennifer\", \"Bryan\",\n  email = \"jenny@rstudio.com\",\n  role = c(\"aut\", \"cre\"),\n  comment = c(ORCID = \"0000-0002-6983-2759\")\n)\n#> [1] \"Jennifer Bryan <jenny@rstudio.com> [aut, cre] (<https://orcid.org/0000-0002-6983-2759>)\"Authors@R: c(\n    person(\"Hadley\", \"Wickham\", email = \"hadley@rstudio.com\", role = \"cre\"),\n    person(\"Winston\", \"Chang\", email = \"winston@rstudio.com\", role = \"aut\"),\n    person(\"RStudio\", role = c(\"cph\", \"fnd\")))"},{"path":"description.html","id":"description-license","chapter":"8 Package metadata","heading":"8.4 License: Who can use your package?","text":"Licensing big enough topic dedicated chapter (Chapter 9).\nplans share package, may able ignore licensing.\nplan share, even putting code others can see , really specify license.maintainers settle permissive license like MIT, one GPL copyleft licenses, CC0.\n() can configured usethis, via functions like use_mit_license(), use_gpl_license(), use_cc0_license().\nhelpers populate License field DESCRIPTION , necessary, setup additional files complete license.\nRead licensing chapter (Chapter 9) learn .","code":""},{"path":"description.html","id":"description-version","chapter":"8 Package metadata","heading":"8.5 Version","text":"Formally, R package version sequence least two integers separated either . -.\nexample, 1.0 0.9.1-10 valid versions, 1 1.0-devel .\ncan parse version number numeric_version().example, package might version 1.9.\nversion number considered R 1.9.0, less version 1.9.2, less version 1.10 (version “one point ten”, “one point one zero”).\nR uses version numbers determine whether package dependencies satisfied.\npackage might, example, import package devtools (>= 1.9.2), case version 1.9 1.9.0 wouldn’t work.recommended framework managing package version number:Always use . separator, never -.Always use . separator, never -.released version number consists three numbers, <major>.<minor>.<patch>.\nversion number 1.9.2, 1 major number, 9 minor number, \n2 patch number.\nNever use versions like 1.0, instead always spell three components,\n1.0.0.released version number consists three numbers, <major>.<minor>.<patch>.\nversion number 1.9.2, 1 major number, 9 minor number, \n2 patch number.\nNever use versions like 1.0, instead always spell three components,\n1.0.0.-development package fourth component: development version.\nstart 9000.\nexample, first version package 0.0.0.9000.\ntwo reasons recommendation:\nFirst, makes easy see package released -development.\nAlso, use fourth place means ’re limited \nnext version .\n0.0.1, 0.1.0, 1.0.0 greater 0.0.0.9000.\nIncrement development version, e.g. 9000 9001, ’ve\nadded important feature another development package needs depend\n.-development package fourth component: development version.\nstart 9000.\nexample, first version package 0.0.0.9000.\ntwo reasons recommendation:\nFirst, makes easy see package released -development.\nAlso, use fourth place means ’re limited \nnext version .\n0.0.1, 0.1.0, 1.0.0 greater 0.0.0.9000.Increment development version, e.g. 9000 9001, ’ve\nadded important feature another development package needs depend\n.advice inspired part Semantic Versioning X.Org versioning schemes.\nRead ’d like understand standards versioning used many open source projects.\nFinally, know maintainers follow different philosophies manage package version number.version number package increases subsequent releases package, ’s just incrementing counter – way number changes release can convey information kind changes package.\ndiscuss Section 20.1.\nnow, just remember first version package 0.0.0.9000.\nusethis::create_package() , default.\nusethis::use_version() increments package version; called interactively, argument, presents helpful menu:","code":"\nnumeric_version(\"1.9\") == numeric_version(\"1.9.0\")\n#> [1] TRUE\nnumeric_version(\"1.9.0\") < numeric_version(\"1.10.0\")\n#> [1] TRUE\nusethis::use_version()\n#> Current version is 0.1.\n#> What should the new version be? (0 to exit) \n#> \n#> 1: major --> 1.0\n#> 2: minor --> 0.2\n#> 3: patch --> 0.1.1\n#> 4:   dev --> 0.1.0.9000\n#> \n#> Selection: "},{"path":"description.html","id":"description-other-fields","chapter":"8 Package metadata","heading":"8.6 Other fields","text":"DESCRIPTION fields heavily used worth knowing .well maintainer’s email address, ’s good idea list places people can learn package.\nURL field commonly used advertise package’s website link public source repository, development happens.\nMultiple URLs separated comma.\nBugReports URL bug reports submitted, e.g., GitHub issues.\nexample, devtools :use usethis::use_github() connect local package remote GitHub repository, automatically populate URL BugReports .\npackage already connected remote GitHub repository, usethis::use_github_links() can called just add relevant links DESCRIPTION.Encoding field required DESCRIPTION consist entirely ASCII characters.\nspecified, Encoding interpreted applying broadly throughout package.\ndefault, create_package() uses Encoding: UTF-8, interpreted strong recommendation use UTF-8 encoding.number fields described elsewhere book:Collate controls order R files sourced. \nmatters code side-effects; commonly ’re\nusing S4. described depth Section 10.7.2.Collate controls order R files sourced. \nmatters code side-effects; commonly ’re\nusing S4. described depth Section 10.7.2.LazyData relevant package makes data available user.\nspecify LazyData: true, datasets lazy-loaded, \nmakes immediately available, .e. users don’t use data().\naddition LazyData: true handled automatically \nusethis::use_data().\ndetail given talk external data Chapter 14.LazyData relevant package makes data available user.\nspecify LazyData: true, datasets lazy-loaded, \nmakes immediately available, .e. users don’t use data().\naddition LazyData: true handled automatically \nusethis::use_data().\ndetail given talk external data Chapter 14.actually many rarely, ever, used fields.\ncomplete list can found “DESCRIPTION file” section R extensions manual.also flexibility create fields add additional metadata.\nnarrowest sense, restriction shouldn’t re-purpose official field names used R.\npractice, plan submit CRAN, constraints.\nFirst, use valid English words, field names aren’t flagged spell-check.\nBeyond , custom fields follow one two patterns:Config/ prefix: featured example earlier, \nConfig/Needs/website used record additional packages needed build\npackage’s website.Note suffix: can add Note standard field name, e.g.,\nSuggestsNote.\nalso permitted use Note, alone, field name.default, create_package() writes two fields haven’t discussed yet, relating use roxygen2 package documentation:learn Chapter 10.","code":"URL: https://devtools.r-lib.org/, https://github.com/r-lib/devtools\nBugReports: https://github.com/r-lib/devtools/issuesRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.1.2"},{"path":"license.html","id":"license","chapter":"9 Licensing","heading":"9 Licensing","text":"goal chapter give basic tools manage licensing R package.\nSoftware licensing large complicated field, made particularly complex lies intersection programming law.\nFortunately, don’t need expert right thing: respecting author wants code treated indicated license ’ve picked.understand author’s wishes, ’s useful understand two major camps open source licenses:Permissive licenses easy going.\nCode permissive license can freely copied, modified, published, restriction license must preserved.\nMIT Apache licenses common modern permissive licenses; older permissive licenses include various forms BSD license.Permissive licenses easy going.\nCode permissive license can freely copied, modified, published, restriction license must preserved.\nMIT Apache licenses common modern permissive licenses; older permissive licenses include various forms BSD license.Copyleft licenses stricter.\ncommon copyleft license GPL allows freely copy modify code personal use, publish modified versions bundle code, modified version complete bundle must also licensed GPL.Copyleft licenses stricter.\ncommon copyleft license GPL allows freely copy modify code personal use, publish modified versions bundle code, modified version complete bundle must also licensed GPL.get high-level view open source licensing space, details individual licenses, highly recommend https://choosealicense.com, ’ve used links .look across programming languages, permissive licenses common.\nexample, 2015 survey GitHub repositories found ~55% used permissive license ~20% used copyleft license.\nR community little different: 2020, analysis (following Sean Kross’s blog post) found ~70% CRAN packages use copyleft license ~15% use permissive license.chapter start licensing code, cover important details receiving code people (e.g. PR) bundling people’s code package.\nNote simply using package R doesn’t require comply license; can write proprietary R code R packages can license choose.details licensing R packages, recommend Licensing R Colin Fay.(run code chapter, please make sure ’re using usethis 2.0.0 greater; writing chapter prompted number changes package.)","code":""},{"path":"license.html","id":"code-you-write","chapter":"9 Licensing","heading":"9.1 Code you write","text":"’ll start talking code write, license make clear want people treat .\nbrief:want permissive license people can use code minimal restrictions, choose MIT license use_mit_license().want permissive license people can use code minimal restrictions, choose MIT license use_mit_license().want copyleft license derivatives bundles code also open source, choose GPLv3 license use_gpl_license().want copyleft license derivatives bundles code also open source, choose GPLv3 license use_gpl_license().package primarily contains data, code, want minimal restrictions, choose CC0 license use_cc0_license().\nwant require attribution data used, choose CC license calling use_ccby_license().package primarily contains data, code, want minimal restrictions, choose CC0 license use_cc0_license().\nwant require attribution data used, choose CC license calling use_ccby_license().don’t want make code open source call use_proprietary_license().\npackages can distributed CRAN.don’t want make code open source call use_proprietary_license().\npackages can distributed CRAN.’ll come back details present licenses Section 9.2.2It’s important use license don’t default copyright laws apply mean one allowed make copy code without express permission.(possible license CRAN package non-open source license like ACM license don’t recommend .)","code":""},{"path":"license.html","id":"copyright-holder","chapter":"9 Licensing","heading":"9.2 Copyright holder","text":"go , ’s important introduce important term: copyright holder.\ncopyright holder (holders) people underlying copyright code, hence people allowed choose (later change) license.\nthree main cases21:wrote code time, ’re copyright holder.wrote code time, ’re copyright holder.wrote code employer, employer copyright holder.wrote code employer, employer copyright holder.wrote code contract work, ’re copyright holder unless contract specifically describes otherwise.wrote code contract work, ’re copyright holder unless contract specifically describes otherwise.means ’re writing package job, ’ll need get employer approve open source license use.\nemployers (particularly universities) standard policies don’t need ask permission every time; ’ll need investigate company’s policy .Note multiple people contributed package, multiple copyright holders: person company hold copyright specific contribution.\n’ll come back topic Section 9.4.","code":""},{"path":"license.html","id":"key-files","chapter":"9 Licensing","heading":"9.2.1 Key files","text":"three key files used record licensing decision:Every license sets License field DESCRIPTION.\ncontains name license standard form R CMD check CRAN can automatically verify .\ncomes four main forms:\nname version specification, e.g.\nGPL (>= 2), Apache License (= 2.0).\nstandard abbreviation, e.g.\nGPL-2, LGPL-2.1, Artistic-2.0.\nname license “template” file containing specific variables.\ncommon case MIT + file LICENSE, LICENSE file needs contain two fields: year copyright holder.\nPointer full text non-standard license, file LICENSE.\ncomplicated licensing structures possible outside scope text.\nSee Licensing section R-exts details.Every license sets License field DESCRIPTION.\ncontains name license standard form R CMD check CRAN can automatically verify .\ncomes four main forms:name version specification, e.g.\nGPL (>= 2), Apache License (= 2.0).name version specification, e.g.\nGPL (>= 2), Apache License (= 2.0).standard abbreviation, e.g.\nGPL-2, LGPL-2.1, Artistic-2.0.standard abbreviation, e.g.\nGPL-2, LGPL-2.1, Artistic-2.0.name license “template” file containing specific variables.\ncommon case MIT + file LICENSE, LICENSE file needs contain two fields: year copyright holder.name license “template” file containing specific variables.\ncommon case MIT + file LICENSE, LICENSE file needs contain two fields: year copyright holder.Pointer full text non-standard license, file LICENSE.Pointer full text non-standard license, file LICENSE.complicated licensing structures possible outside scope text.\nSee Licensing section R-exts details.described , LICENSE file used one two ways.\nlicenses templates require additional details complete LICENSE file.\nLICENSE file can also contain full text non-standard non-open source licenses.\npermitted include full text standard licenses.described , LICENSE file used one two ways.\nlicenses templates require additional details complete LICENSE file.\nLICENSE file can also contain full text non-standard non-open source licenses.\npermitted include full text standard licenses.LICENSE.md includes copy full text license.\nopen source licenses require copy license included, CRAN permit include copy standard licenses package, also use .Rbuildignore make sure file sent CRAN.LICENSE.md includes copy full text license.\nopen source licenses require copy license included, CRAN permit include copy standard licenses package, also use .Rbuildignore make sure file sent CRAN.one file ’ll come back Section 9.4.2: LICENSE.note.\nused bundled code written people, parts package permissive licenses whole.","code":""},{"path":"license.html","id":"more-licenses","chapter":"9 Licensing","heading":"9.2.2 More licenses","text":"gave absolute minimum need know .\n’s worth mentioning important licenses roughly ordered permissive least permissive:use_mit_license(): MIT license permissive license requiring keep copyright license notice.use_mit_license(): MIT license permissive license requiring keep copyright license notice.use_apache_license(): Apache License similar MIT license also includes explicit patent grant.\nPatents another component intellectual property distinct copyrights, organisations also care protection patent claims.use_apache_license(): Apache License similar MIT license also includes explicit patent grant.\nPatents another component intellectual property distinct copyrights, organisations also care protection patent claims.use_lgpl_license(): LGPL little weaker GPL, allowing bundle LPGL code using license larger work.use_lgpl_license(): LGPL little weaker GPL, allowing bundle LPGL code using license larger work.use_gpl_license(): ’ve discussed GPL already, ’s one important wrinkle note — GPL two major versions, GPLv2 GPLv3, ’re compatible (.e. can’t bundle GPLv2 GPLv3 code project).\navoid problem ’s generally recommended license package GPL >=2 GPL >= 3 future versions GPL license also apply code.\nuse_gpl_license() default.use_gpl_license(): ’ve discussed GPL already, ’s one important wrinkle note — GPL two major versions, GPLv2 GPLv3, ’re compatible (.e. can’t bundle GPLv2 GPLv3 code project).\navoid problem ’s generally recommended license package GPL >=2 GPL >= 3 future versions GPL license also apply code.\nuse_gpl_license() default.use_agpl_license(): AGPL defines distribution include providing service network, use AGPL code provide web service, bundled code must also open-sourced.\nconsiderably broader claim GPL, many companies expressly forbid use AGPL software.use_agpl_license(): AGPL defines distribution include providing service network, use AGPL code provide web service, bundled code must also open-sourced.\nconsiderably broader claim GPL, many companies expressly forbid use AGPL software.many licenses available.\ncan see list popular https://choosealicense.com/licenses/ full list https://opensource.org/licenses/alphabetical.\nprimary downside choosing license bullet list fewer R users understand means.","code":""},{"path":"license.html","id":"relicensing","chapter":"9 Licensing","heading":"9.2.3 Relicensing","text":"’s important spend little time thinking initial license can hard change later requires permission copyright holders.\nUnless ’ve done something special (’ll discuss Section 9.3), copyright holders include everyone contributed non-trivial amount code.need re-license package, recommend following steps:Check Authors@R field DESCRIPTION confirm package doesn’t contain bundled code (’ll talk Section 4.3).Check Authors@R field DESCRIPTION confirm package doesn’t contain bundled code (’ll talk Section 4.3).Find contributors looking Git history contributors display GitHub.Find contributors looking Git history contributors display GitHub.Optionally, inspect specific contributions remove people contributed typo fixes similar22.Optionally, inspect specific contributions remove people contributed typo fixes similar22.Ask every contributor ’re OK changing license.\nevery contributor GitHub, easiest way create issue list contributors ask confirm ’re OK change.\nTwo examples tidyverse team relicensed code include generics covr.Ask every contributor ’re OK changing license.\nevery contributor GitHub, easiest way create issue list contributors ask confirm ’re OK change.\nTwo examples tidyverse team relicensed code include generics covr.copyright holders approved, make change calling appropriate license function.copyright holders approved, make change calling appropriate license function.","code":""},{"path":"license.html","id":"license-data","chapter":"9 Licensing","heading":"9.2.4 Data","text":"Open source licenses designed specifically apply source code, ’re releasing package primarily contains data, use different type license.\nrecommend one two Creative Commons licenses:want make data freely available possible, use CC0 license use_cc0_license().\npermissive license ’s equivalent MIT license (applies data, code).want make data freely available possible, use CC0 license use_cc0_license().\npermissive license ’s equivalent MIT license (applies data, code).want require attribution someone else uses data, can use CC-license, use_ccby_license().want require attribution someone else uses data, can use CC-license, use_ccby_license().","code":""},{"path":"license.html","id":"code-given-to-you","chapter":"9 Licensing","heading":"9.3 Code given to you","text":"Many packages include code written author.\ntwo main ways happens: people might choose contribute package using pull request similar, might find code choose bundle .\nsection discuss code others give , next section discuss code bundle.someone contributes code package using pull request similar, can assume author happy code use license.\nexplicit GitHub terms service, generally considered true regardless code contributed23.Note, however, author retains copyright code, unless use “contributor license agreement” CLA short.\nprimary advantage CLA makes copyright code simple, hence makes easy relicense code needed.\nimportant dual open-source/commercial projects easily allows dual licensing code made available world copyleft license, made available paying customers different, permissive, license.’s also important acknowledge contribution, ’s good practice generous thanks attribution.\ntidyverse, ask code contributors include bullet NEWS.md GitHub username, thank contributors release announcements.\nadd core developers24 DESCRIPTION file; projects choose add contributors matter small.","code":""},{"path":"license.html","id":"code-you-bundle","chapter":"9 Licensing","heading":"9.4 Code you bundle","text":"three common reasons might choose bundle code written someone else:’re including someone else’s CSS JS library order create useful attractive web page HTML widgets.’re including someone else’s CSS JS library order create useful attractive web page HTML widgets.’re providing R wrapper simple C C++ library.\n(complex C/C++ libraries, don’t usually bundle code package, instead link copy installed elsewhere system).’re providing R wrapper simple C C++ library.\n(complex C/C++ libraries, don’t usually bundle code package, instead link copy installed elsewhere system).’ve copied small amount R code another package avoid taking dependency.\nGenerally, taking dependency another package right thing don’t need worry licensing, ’ll automatically get bug fixes.\nsometimes need small amount code big package, copying pasting package right thing .’ve copied small amount R code another package avoid taking dependency.\nGenerally, taking dependency another package right thing don’t need worry licensing, ’ll automatically get bug fixes.\nsometimes need small amount code big package, copying pasting package right thing .Note R rather different languages like C common way code bundled together compiling single executable.","code":""},{"path":"license.html","id":"license-compatibility","chapter":"9 Licensing","heading":"9.4.1 License compatibility","text":"bundle someone else’s code package, need first check bundled license compatible license.\ndistributing code, can add additional restrictions, can remove restrictions, means license compatibility symmetric.\nexample, can bundle MIT licensed code GPL licensed package, can bundle GPL licensed code MIT licensed package.five main cases consider:license license : ’s OK bundle.license license : ’s OK bundle.license MIT BSD, ’s OK bundle.license MIT BSD, ’s OK bundle.code copyleft license code permissive license, can’t bundle code.\n’ll need consider alternative approach, either looking code permissive license, putting external code separate package.code copyleft license code permissive license, can’t bundle code.\n’ll need consider alternative approach, either looking code permissive license, putting external code separate package.code comes Stack Overflow, ’s licensed25 Creative Common CC -SA license, compatible GPLv326\n. means need take extra care using Stack Overflow code open source packages\n. Learn https://empirical-software.engineering/blog/-snippets--gh-projects.code comes Stack Overflow, ’s licensed25 Creative Common CC -SA license, compatible GPLv326\n. means need take extra care using Stack Overflow code open source packages\n. Learn https://empirical-software.engineering/blog/-snippets--gh-projects.Otherwise, ’ll need little research.\nWikipedia useful diagram Google friend.\n’s important note different versions license necessarily compatible, e.g.\nGPLv2 GPLv3 compatible.Otherwise, ’ll need little research.\nWikipedia useful diagram Google friend.\n’s important note different versions license necessarily compatible, e.g.\nGPLv2 GPLv3 compatible.package isn’t open source, things complicated.\nPermissive licenses still easy, copyleft licenses generally don’t restrict use long don’t distribute package outside company.\ncomplex issue opinions differ, check legal department first.","code":""},{"path":"license.html","id":"how-to-include","chapter":"9 Licensing","heading":"9.4.2 How to include","text":"’ve determined licenses compatible, can bring code package.\n, need preserve existing license copyright statements, make easy possible future readers understanding licensing situation:’re including fragment another project, generally best put file ensure file copyright statements license description top.’re including fragment another project, generally best put file ensure file copyright statements license description top.’re including multiple files, put directory, put LICENSE file directory.’re including multiple files, put directory, put LICENSE file directory.also need include standard metadata Authors@R.\nuse role = \"cph\" declare author copyright holder, comment describing ’re author .’re submitting CRAN bundled code different (compatible) license, also need include LICENSE.note file describes overall license package, specific licenses individual component.\nexample, diffviewer package bundles six javascript libraries use permissive license.\nDESCRIPTION lists copyright holders, LICENSE.note describes licenses.\n(packages use techniques, think simplest approach fly CRAN.)","code":""},{"path":"man.html","id":"man","chapter":"10 Object documentation","heading":"10 Object documentation","text":"Documentation one important aspects good package. Without , users won’t know use package. Documentation also useful future-(remember functions supposed ), developers extending package.multiple forms documentation. chapter, ’ll learn object documentation, accessed ? help(). Object documentation type reference documentation. works like dictionary: dictionary helpful want know word means, won’t help find right word new situation. Similarly, object documentation helpful already know name object, doesn’t help find object need solve given problem. ’s one jobs vignettes, ’ll learn next chapter.R provides standard way documenting objects package: write .Rd files man/ directory. files use custom syntax, loosely based LaTeX, rendered HTML, plain text pdf viewing. Instead writing files hand, ’re going use roxygen2 turns specially formatted comments .Rd files. goal roxygen2 make documenting code easy possible. number advantages writing .Rd files hand:Code documentation intermingled modify code,\n’re reminded also update documentation.Code documentation intermingled modify code,\n’re reminded also update documentation.Roxygen2 dynamically inspects objects documents, \ncan skip boilerplate ’d otherwise need write hand.Roxygen2 dynamically inspects objects documents, \ncan skip boilerplate ’d otherwise need write hand.abstracts differences documenting different types objects,\nneed learn fewer details.abstracts differences documenting different types objects,\nneed learn fewer details.well generating .Rd files, roxygen2 can also manage NAMESPACE Collate field DESCRIPTION. chapter discusses .Rd files collate field. NAMESPACE describes can use roxygen2 manage NAMESPACE, care.","code":""},{"path":"man.html","id":"man-workflow","chapter":"10 Object documentation","heading":"10.1 The documentation workflow","text":"section, ’ll first go rough outline complete documentation workflow. , ’ll dive step individually. four basic steps:Add roxygen comments .R files.Add roxygen comments .R files.Run devtools::document() (press Ctrl/Cmd + Shift + D RStudio) \nconvert roxygen comments .Rd files. (devtools::document() calls\nroxygen2::roxygenise() hard work.)Run devtools::document() (press Ctrl/Cmd + Shift + D RStudio) \nconvert roxygen comments .Rd files. (devtools::document() calls\nroxygen2::roxygenise() hard work.)Preview documentation ?.Preview documentation ?.Rinse repeat documentation looks way want.Rinse repeat documentation looks way want.process starts add roxygen comments source file: roxygen comments start #' distinguish regular comments. ’s documentation simple function:Pressing Ctrl/Cmd + Shift + D (running devtools::document()) generate man/add.Rd looks like:’re familiar LaTeX, look familiar since .Rd format loosely based . can read Rd format R extensions manual. Note comment top file: generated code shouldn’t modified. Indeed, use roxygen2, ’ll rarely need look files.use ?add, help(\"add\"), example(\"add\"), R looks .Rd file containing \\alias{\"add\"}. parses file, converts HTML displays . ’s result looks like RStudio:(Note can preview development documentation devtools overrides usual help functions teach work source packages. documentation doesn’t appear, make sure ’re using devtools ’ve loaded package devtools::load_all().)","code":"\n#' Add together two numbers\n#' \n#' @param x A number.\n#' @param y A number.\n#' @return The sum of \\code{x} and \\code{y}.\n#' @examples\n#' add(1, 1)\n#' add(10, 1)\nadd <- function(x, y) {\n  x + y\n}% Generated by roxygen2 (4.0.0): do not edit by hand\n\\name{add}\n\\alias{add}\n\\title{Add together two numbers}\n\\usage{\nadd(x, y)\n}\n\\arguments{\n  \\item{x}{A number.}\n\n  \\item{y}{A number.}\n}\n\\value{\nThe sum of \\code{x} and \\code{y}\n}\n\\description{\nAdd together two numbers\n}\n\\examples{\nadd(1, 1)\nadd(10, 1)\n}"},{"path":"man.html","id":"man-workflow-2","chapter":"10 Object documentation","heading":"10.2 Alternative documentation workflow","text":"first documentation workflow fast, one limitation: preview documentation pages show links pages. ’d like also see links, use workflow:Add roxygen comments .R files.Add roxygen comments .R files.Click \nbuild pane press Ctrl/Cmd + Shift + B. completely rebuilds \npackage, including updating documentation, installs \nregular library, restarts R reloads package. \nslow thorough.Preview documentation ?.Preview documentation ?.Rinse repeat documentation looks way want.Rinse repeat documentation looks way want.workflow doesn’t seem working, check project options RStudio. Old versions devtools RStudio automatically update documentation package rebuilt:","code":""},{"path":"man.html","id":"roxygen-comments","chapter":"10 Object documentation","heading":"10.3 Roxygen comments","text":"Roxygen comments start #' come function. roxygen lines preceding function called block. line wrapped way code, normally 80 characters.Blocks broken tags, look like @tagName details. content tag extends end tag name start next tag (end block). @ special meaning roxygen, need write @@ want add literal @ documentation (mostly important email addresses accessing slots S4 objects).block includes text first tag.27 called introduction, parsed specially:first sentence becomes title documentation. ’s \nsee look help(package = mypackage) shown top \nhelp file. fit one line, written sentence case, \nend full stop.first sentence becomes title documentation. ’s \nsee look help(package = mypackage) shown top \nhelp file. fit one line, written sentence case, \nend full stop.second paragraph description: comes first \ndocumentation briefly describe function .second paragraph description: comes first \ndocumentation briefly describe function .third subsequent paragraphs go details: \n(often long) section shown argument description \ngo detail function works.third subsequent paragraphs go details: \n(often long) section shown argument description \ngo detail function works.objects must title description. Details optional.’s example showing introduction sum() might look like written roxygen:\\code{} \\link{} formatting commands ’ll learn formatting. ’ve careful wrap roxygen block ’s less 80 characters wide. can automatically Rstudio Ctrl/Cmd + Shift + / (menu, code | re-flow comment).can add arbitrary sections documentation @section tag. useful way breaking long details section multiple chunks useful headings. Section titles sentence case, must followed colon, can one line long.two tags make easier people navigate help files:@seealso allows point useful resources, either web,\n\\url{https://www.r-project.org}, package \\code{\\link{functioname}},\nanother package \\code{\\link[packagename]{functioname}}.@seealso allows point useful resources, either web,\n\\url{https://www.r-project.org}, package \\code{\\link{functioname}},\nanother package \\code{\\link[packagename]{functioname}}.family related functions every function link\nevery function family, use @family. value @family\nplural.family related functions every function link\nevery function family, use @family. value @family\nplural.sum, components might look like:Two tags make easier user find documentation:@aliases alias1 alias2 ... adds additional aliases topic.\nalias another name topic can used ?.@aliases alias1 alias2 ... adds additional aliases topic.\nalias another name topic can used ?.@keywords keyword1 keyword2 ... adds standardised keywords. Keywords \noptional, present, must taken predefined list found \nfile.path(R.home(\"doc\"), \"KEYWORDS\").\nGenerally, keywords useful except @keywords internal.\nUsing internal keyword removes function package\nindex disables automated tests. ’s common use\n@keywords internal functions interest \ndevelopers extending package, users.@keywords keyword1 keyword2 ... adds standardised keywords. Keywords \noptional, present, must taken predefined list found \nfile.path(R.home(\"doc\"), \"KEYWORDS\").Generally, keywords useful except @keywords internal.\nUsing internal keyword removes function package\nindex disables automated tests. ’s common use\n@keywords internal functions interest \ndevelopers extending package, users.tags situational: vary based type object ’re documenting. following sections describe commonly used tags functions, packages various methods, generics objects used R’s three OO systems.","code":"\n#' Sum of vector elements\n#' \n#' \\code{sum} returns the sum of all the values present in its arguments.\n#' \n#' This is a generic function: methods can be defined for it directly or via the\n#' \\code{\\link{Summary}} group generic. For this to work properly, the arguments\n#' \\code{...} should be unnamed, and dispatch is on the first argument.\nsum <- function(..., na.rm = TRUE) {}\n#' @section Warning:\n#' Do not operate heavy machinery within 8 hours of using this function.\n#' @family aggregate functions\n#' @seealso \\code{\\link{prod}} for products, \\code{\\link{cumsum}} for cumulative\n#'   sums, and \\code{\\link{colSums}}/\\code{\\link{rowSums}} marginal sums over\n#'   high-dimensional arrays."},{"path":"man.html","id":"man-functions","chapter":"10 Object documentation","heading":"10.4 Documenting functions","text":"Functions commonly documented object. well introduction block, functions three tags: @param, @examples @return.@param name description describes function’s inputs parameters.\ndescription provide succinct summary type \nparameter (e.g., string, numeric vector) , obvious \nname, parameter .\ndescription start capital letter end full stop.\ncan span multiple lines (even paragraphs) necessary. \nparameters must documented.\ncan document multiple arguments one place separating\nnames commas (spaces). example, document \nx y, can write @param x,y Numeric vectors..@param name description describes function’s inputs parameters.\ndescription provide succinct summary type \nparameter (e.g., string, numeric vector) , obvious \nname, parameter .description start capital letter end full stop.\ncan span multiple lines (even paragraphs) necessary. \nparameters must documented.can document multiple arguments one place separating\nnames commas (spaces). example, document \nx y, can write @param x,y Numeric vectors..@examples provides executable R code showing use function \npractice. important part documentation \nmany people look examples first. Example code must work without\nerrors run automatically part R CMD check.\npurpose illustration, ’s often useful include code\ncauses error. \\dontrun{} allows include code \nexample run. (used able use \\donttest{} \nsimilar purpose, ’s longer recommended actually\ntested.)\nInstead including examples directly documentation, can\nput separate files use @example path/relative//package/root\ninsert documentation. (Note @example tag ‘s’.)@examples provides executable R code showing use function \npractice. important part documentation \nmany people look examples first. Example code must work without\nerrors run automatically part R CMD check.purpose illustration, ’s often useful include code\ncauses error. \\dontrun{} allows include code \nexample run. (used able use \\donttest{} \nsimilar purpose, ’s longer recommended actually\ntested.)Instead including examples directly documentation, can\nput separate files use @example path/relative//package/root\ninsert documentation. (Note @example tag ‘s’.)@return description describes output function. \nalways necessary, good idea function returns different\ntypes output depending input, ’re returning S3, S4 \nRC object.@return description describes output function. \nalways necessary, good idea function returns different\ntypes output depending input, ’re returning S3, S4 \nRC object.use new tags improve documentation sum() follows:Indent second subsequent lines tag scanning documentation ’s easy see one tag ends next begins. Tags always span multiple lines (like @examples) start new line don’t need indented.","code":"\n#' Sum of vector elements\n#'\n#' \\code{sum} returns the sum of all the values present in its arguments.\n#'\n#' This is a generic function: methods can be defined for it directly\n#' or via the \\code{\\link{Summary}} group generic. For this to work properly,\n#' the arguments \\code{...} should be unnamed, and dispatch is on the\n#' first argument.\n#'\n#' @param ... Numeric, complex, or logical vectors.\n#' @param na.rm A logical scalar. Should missing values (including NaN)\n#'   be removed?\n#' @return If all inputs are integer and logical, then the output\n#'   will be an integer. If integer overflow\n#'   \\url{https://en.wikipedia.org/wiki/Integer_overflow} occurs, the output\n#'   will be NA with a warning. Otherwise it will be a length-one numeric or\n#'   complex vector.\n#'\n#'   Zero-length vectors have sum 0 by definition. See\n#'   \\url{https://en.wikipedia.org/wiki/Empty_sum} for more details.\n#' @examples\n#' sum(1:10)\n#' sum(1:5, 6:10)\n#' sum(F, F, F, T, T)\n#'\n#' sum(.Machine$integer.max, 1L)\n#' sum(.Machine$integer.max, 1)\n#'\n#' \\dontrun{\n#' sum(\"a\")\n#' }\nsum <- function(..., na.rm = TRUE) {}"},{"path":"man.html","id":"man-data","chapter":"10 Object documentation","heading":"10.5 Documenting datasets","text":"See documenting data.","code":""},{"path":"man.html","id":"man-packages","chapter":"10 Object documentation","heading":"10.6 Documenting packages","text":"can use roxygen provide help page package whole. accessed package?foo, can used describe important components package. ’s useful supplement vignettes, described next chapter.’s object corresponds package, need document NULL, manually label @docType package @name <package-name>. also excellent place use @section tag divide page useful categories.usually put documentation file called <package-name>.R. ’s also good place put package level import statements ’ll learn imports.","code":"\n#' foo: A package for computating the notorious bar statistic\n#'\n#' The foo package provides three categories of important functions:\n#' foo, bar and baz.\n#' \n#' @section Foo functions:\n#' The foo functions ...\n#'\n#' @docType package\n#' @name foo\nNULL\n#> NULL"},{"path":"man.html","id":"man-classes","chapter":"10 Object documentation","heading":"10.7 Documenting classes, generics and methods","text":"’s relatively straightforward document classes, generics methods. details vary based object system ’re using. following sections give details S3, S4 RC object systems.","code":""},{"path":"man.html","id":"man-s3","chapter":"10 Object documentation","heading":"10.7.1 S3","text":"S3 generics regular functions, document . S3 classes formal definition, document constructor function. choice whether document S3 methods. don’t need document methods simple generics like print(). method complicated includes additional arguments, document people know works. base R, can see examples documentation complex methods like predict.lm(), predict.glm(), anova.glm().Older versions roxygen required explicit @method generic class tags S3 methods. version 3.0.0 onward, longer needed roxygen2 figure automatically. upgrading, make sure remove old tags. Automatic method detection fail generic class ambiguous. example, .equal.data.frame() equal.data.frame method , data.frame method .equal? happens, can disambiguate e.g. @method .equal data.frame.","code":""},{"path":"man.html","id":"man-s4","chapter":"10 Object documentation","heading":"10.7.2 S4","text":"Document S4 classes adding roxygen block setClass(). Use @slot document slots class way use @param describe parameters function. ’s simple example:S4 generics also functions, document . S4 methods little complicated, however. Unlike S3, S4 methods must documented. document like regular function, probably don’t want method documentation page. Instead, put method documentation one three places:class. appropriate corresponding generic uses single\ndispatch created class.class. appropriate corresponding generic uses single\ndispatch created class.generic. appropriate generic uses multiple dispatch\nwritten generic method.generic. appropriate generic uses multiple dispatch\nwritten generic method.file. appropriate method complex, \n’ve written method class generic.file. appropriate method complex, \n’ve written method class generic.Use either @rdname @describeIn control method documentation goes. See documenting multiple objects one file details.Another consideration S4 code often needs run certain order. example, define method setMethod(\"foo\", c(\"bar\", \"baz\"), ...) must already created foo generic two classes. default, R code loaded alphabetical order, won’t always work situation. Rather relying alphabetic ordering, roxygen2 provides explicit way saying one file must loaded another: @include. @include tag gives space separated list file names loaded current file:Often, ’s easiest put top file. make clear tag applies whole file, specific object, document NULL.Roxygen uses @include tags compute topological sort ensures dependencies loaded ’re needed. sets Collate field DESCRIPTION, overrides default alphabetic ordering. simpler alternative @include define classes methods aaa-classes.R aaa-generics.R, rely coming first since ’re alphabetical order. main disadvantage can’t organise components files naturally might want.Older versions roxygen2 required explicit @usage, @alias @docType tags documenting S4 objects. However, version 3.0.0, roxygen2 generates correct values automatically longer need use . ’re upgrading old version, can delete tags.","code":"\n#' An S4 class to represent a bank account.\n#'\n#' @slot balance A length-one numeric vector\nAccount <- setClass(\"Account\",\n  slots = list(balance = \"numeric\")\n)\n#' @include class-a.R\nsetClass(\"B\", contains = \"A\")\n#' @include foo.R bar.R baz.R\nNULL\n\nsetMethod(\"foo\", c(\"bar\", \"baz\"), ...)"},{"path":"man.html","id":"man-rc","chapter":"10 Object documentation","heading":"10.7.3 RC","text":"Reference classes different S3 S4 methods associated classes, generics. RC also special convention documenting methods: docstring. docstring string placed inside definition method briefly describes . makes documenting RC simpler S4 need one roxygen block per class.Methods doc strings included “Methods” section class documentation. documented method listed automatically generated usage statement doc string. Also note use @field instead @slot.","code":"\n#' A Reference Class to represent a bank account.\n#'\n#' @field balance A length-one numeric vector.\nAccount <- setRefClass(\"Account\",\n  fields = list(balance = \"numeric\"),\n  methods = list(\n    withdraw = function(x) {\n      \"Withdraw money from account. Allows overdrafts\"\n      balance <<- balance - x\n    }\n  )\n)"},{"path":"man.html","id":"man-special","chapter":"10 Object documentation","heading":"10.8 Special characters","text":"three special characters need special handling want appear final documentation:@, usually marks start roxygen tag. Use @@ insert \nliteral @ final documentation.@, usually marks start roxygen tag. Use @@ insert \nliteral @ final documentation.%, usually marks start latex comment continues \nend line. Use \\% insert literal % output document.\nescape needed examples.%, usually marks start latex comment continues \nend line. Use \\% insert literal % output document.\nescape needed examples.\\, usually marks start latex escaping. Use \\\\ \ninsert literal \\ documentation.\\, usually marks start latex escaping. Use \\\\ \ninsert literal \\ documentation.","code":""},{"path":"man.html","id":"dry2","chapter":"10 Object documentation","heading":"10.9 Do repeat yourself","text":"tension DRY (don’t repeat ) principle programming need documentation self-contained. ’s frustrating navigate multiple help files order pull together pieces need. Roxygen2 provides two ways avoid repetition source, still assembling everything one documentation file:ability reuse parameter documentation @inheritParams.ability reuse parameter documentation @inheritParams.ability document multiple functions place \n@describeIn @rdnameThe ability document multiple functions place \n@describeIn @rdname","code":""},{"path":"man.html","id":"inheriting-parameters-from-other-functions","chapter":"10 Object documentation","heading":"10.9.1 Inheriting parameters from other functions","text":"can inherit parameter descriptions functions using @inheritParams source_function. tag bring documentation parameters undocumented current function, documented source function. source can function current package, via @inheritParams function, another package, via @inheritParams package::function. example following documentation:equivalent toNote inheritance works recursively, can inherit documentation function inherited elsewhere.","code":"\n#' @param a This is the first argument.\nfoo <- function(a) a + 10\n\n#' @param b This is the second argument.\n#' @inheritParams foo\nbar <- function(a, b) {\n  foo(a) * 10\n}\n#' @param a This is the first argument.\n#' @param b This is the second argument.\nbar <- function(a, b) {\n  foo(a) * 10\n}"},{"path":"man.html","id":"multiple-man","chapter":"10 Object documentation","heading":"10.9.2 Documenting multiple functions in the same file","text":"can document multiple functions file using either @rdname @describeIn. However, ’s technique best used caution: documenting many functions one place leads confusing documentation. use functions similar arguments, complementary effects (e.g., open() close() methods).@describeIn designed common cases:Documenting methods generic.Documenting methods class.Documenting functions (similar) arguments.generates new section, named either “Methods (class)”, “Methods (generic)” “Functions”. section contains bulleted list describing function. ’re labelled know function method ’s talking . ’s example, documenting imaginary new generic:alternative @describeIn @rdname. overrides default file name generated roxygen merges documentation multiple objects one file. gives complete freedom combine documentation see fit.two ways use @rdname. can add documentation existing function:, can create dummy documentation file documenting NULL setting informative @name.","code":"\n#' Foo bar generic\n#'\n#' @param x Object to foo.\nfoobar <- function(x) UseMethod(\"foobar\")\n\n#' @describeIn foobar Difference between the mean and the median\nfoobar.numeric <- function(x) abs(mean(x) - median(x))\n\n#' @describeIn foobar First and last values pasted together in a string.\nfoobar.character <- function(x) paste0(x[1], \"-\", x[length(x)])\n#' Basic arithmetic\n#'\n#' @param x,y numeric vectors.\nadd <- function(x, y) x + y\n\n#' @rdname add\ntimes <- function(x, y) x * y\n#' Basic arithmetic\n#'\n#' @param x,y numeric vectors.\n#' @name arith\nNULL\n#> NULL\n\n#' @rdname arith\nadd <- function(x, y) x + y\n\n#' @rdname arith\ntimes <- function(x, y) x * y"},{"path":"man.html","id":"text-formatting","chapter":"10 Object documentation","heading":"10.10 Text formatting reference sheet","text":"Within roxygen tags, use .Rd syntax format text. vignette shows examples important commands. full details described R extensions.Note \\ % special characters Rd format. insert literal % \\, escape backslash \\\\, \\%.","code":""},{"path":"man.html","id":"character-formatting","chapter":"10 Object documentation","heading":"10.10.1 Character formatting","text":"\\emph{italics}: italics.\\emph{italics}: italics.\\strong{bold}: bold.\\strong{bold}: bold.\\code{r_function_call(= \"arguments\")}:\nr_function_call(= \"arguments\") (format inline code)\\code{r_function_call(= \"arguments\")}:\nr_function_call(= \"arguments\") (format inline code)\\preformatted{}: format text -, can used multi-line code\\preformatted{}: format text -, can used multi-line code","code":""},{"path":"man.html","id":"links","chapter":"10 Object documentation","heading":"10.10.2 Links","text":"documentation:\\code{\\link{function}}: function package.\\code{\\link{function}}: function package.\\code{\\link[MASS]{abbey}}: function another package.\\code{\\link[MASS]{abbey}}: function another package.\\link[=dest]{name}: link dest, show name.\\link[=dest]{name}: link dest, show name.\\code{\\link[MASS:abbey]{name}}: link function another package, show name.\\code{\\link[MASS:abbey]{name}}: link function another package, show name.\\linkS4class{abc}: link S4 class.\\linkS4class{abc}: link S4 class.web:\\url{http://rstudio.com}: url.\\url{http://rstudio.com}: url.\\href{http://rstudio.com}{Rstudio}:, url custom link text.\\href{http://rstudio.com}{Rstudio}:, url custom link text.\\email{hadley@@rstudio.com} (note doubled @): email address.\\email{hadley@@rstudio.com} (note doubled @): email address.","code":""},{"path":"man.html","id":"lists","chapter":"10 Object documentation","heading":"10.10.3 Lists","text":"Ordered (numbered) lists:\n\n#' \\enumerate{\n#'   \\item First item\n#'   \\item Second item\n#' }Ordered (numbered) lists:Unordered (bulleted) lists:\n\n#' \\itemize{\n#'   \\item First item\n#'   \\item Second item\n#' }Unordered (bulleted) lists:Definition (named) lists:\n\n#' \\describe{\n#'   \\item{One}{First item}\n#'   \\item{Two}{Second item}\n#' }Definition (named) lists:","code":"\n#' \\enumerate{\n#'   \\item First item\n#'   \\item Second item\n#' }\n#' \\itemize{\n#'   \\item First item\n#'   \\item Second item\n#' }\n#' \\describe{\n#'   \\item{One}{First item}\n#'   \\item{Two}{Second item}\n#' }"},{"path":"man.html","id":"mathematics","chapter":"10 Object documentation","heading":"10.10.4 Mathematics","text":"can use standard LaTeX math (extensions). Choose either inline block display:\\eqn{+ b}: inline equation.\\eqn{+ b}: inline equation.\\deqn{+ b}: display (block) equation.\\deqn{+ b}: display (block) equation.","code":""},{"path":"man.html","id":"tables","chapter":"10 Object documentation","heading":"10.10.5 Tables","text":"Tables created \\tabular{}. two arguments:Column alignment, specified letter column (l = left, r = right,\nc = centre.)Column alignment, specified letter column (l = left, r = right,\nc = centre.)Table contents, columns separated \\tab rows \\cr.Table contents, columns separated \\tab rows \\cr.following function turns R data frame correct format. ignores column row names, get started.","code":"\ntabular <- function(df, ...) {\n  stopifnot(is.data.frame(df))\n\n  align <- function(x) if (is.numeric(x)) \"r\" else \"l\"\n  col_align <- vapply(df, align, character(1))\n\n  cols <- lapply(df, format, ...)\n  contents <- do.call(\"paste\",\n    c(cols, list(sep = \" \\\\tab \", collapse = \"\\\\cr\\n  \")))\n\n  paste(\"\\\\tabular{\", paste(col_align, collapse = \"\"), \"}{\\n  \",\n    contents, \"\\n}\\n\", sep = \"\")\n}\n\ncat(tabular(mtcars[1:5, 1:5]))\n#> \\tabular{rrrrr}{\n#>   21.0 \\tab 6 \\tab 160 \\tab 110 \\tab 3.90\\cr\n#>   21.0 \\tab 6 \\tab 160 \\tab 110 \\tab 3.90\\cr\n#>   22.8 \\tab 4 \\tab 108 \\tab  93 \\tab 3.85\\cr\n#>   21.4 \\tab 6 \\tab 258 \\tab 110 \\tab 3.08\\cr\n#>   18.7 \\tab 8 \\tab 360 \\tab 175 \\tab 3.15\n#> }"},{"path":"man.html","id":"notes","chapter":"10 Object documentation","heading":"10.10.6 Notes","text":"","code":""},{"path":"vignettes.html","id":"vignettes","chapter":"11 Vignettes: long-form documentation","heading":"11 Vignettes: long-form documentation","text":"vignette long-form guide package. Function documentation great know name function need, ’s useless otherwise. vignette like book chapter academic paper: can describe problem package designed solve, show reader solve . vignette divide functions useful categories, demonstrate coordinate multiple functions solve problems. Vignettes also useful want explain details package. example, implemented complex statistical algorithm, might want describe details vignette users package can understand ’s going hood, confident ’ve implemented algorithm correctly.Many existing packages vignettes. can see installed vignettes browseVignettes(). see vignette specific package, use argument, browseVignettes(\"packagename\"). vignette provides three things: original source file, readable HTML page PDF, file R code. can read specific vignette vignette(x), see code edit(vignette(x)). see vignettes package haven’t installed, look CRAN page, e.g., https://cran.r-project.org/web/packages/dplyr.R 3.0.0, way create vignette Sweave. challenging Sweave worked LaTeX, LaTeX hard learn slow compile. Now, package can provide vignette engine, standard interface turning input files HTML PDF vignettes. chapter, ’re going use R Markdown vignette engine provided knitr. recommend engine :write Markdown, plain text formatting system. Markdown limited\ncompared LaTeX, limitation good forces \nfocus content.write Markdown, plain text formatting system. Markdown limited\ncompared LaTeX, limitation good forces \nfocus content.can intermingle text, code results (textual visual).can intermingle text, code results (textual visual).life simplified rmarkdown package,\ncoordinates Markdown knitr using pandoc\nconvert Markdown HTML providing many useful templates.life simplified rmarkdown package,\ncoordinates Markdown knitr using pandoc\nconvert Markdown HTML providing many useful templates.Switching Sweave R Markdown profound impact use vignettes. Previously, making vignette painful slow rarely . Now, vignettes essential part packages. use whenever need explain complex topic, show solve problem multiple steps.Currently, easiest way get R Markdown use RStudio. RStudio automatically install needed prerequisites. don’t use RStudio, ’ll need :Install rmarkdown package install.packages(\"rmarkdown\").Install rmarkdown package install.packages(\"rmarkdown\").Install pandoc.Install pandoc.","code":""},{"path":"vignettes.html","id":"vignette-workflow","chapter":"11 Vignettes: long-form documentation","heading":"11.1 Vignette workflow","text":"create first vignette, run::Create vignettes/ directory.Create vignettes/ directory.Add necessary dependencies DESCRIPTION (.e. adds knitr \nSuggests VignetteBuilder fields).Add necessary dependencies DESCRIPTION (.e. adds knitr \nSuggests VignetteBuilder fields).Draft vignette, vignettes/-vignette.Rmd.Draft vignette, vignettes/-vignette.Rmd.draft vignette designed remind important parts R Markdown file. serves useful reference ’re creating new vignette.file, workflow straightforward:Modify vignette.Modify vignette.Press Ctrl/Cmd + Shift + K (click\n) knit \nvignette preview output.three important components R Markdown vignette:initial metadata block.Markdown formatting text.Knitr intermingling text, code results.described following sections.","code":"\nusethis::use_vignette(\"my-vignette\")"},{"path":"vignettes.html","id":"vignette-metadata","chapter":"11 Vignettes: long-form documentation","heading":"11.2 Metadata","text":"first lines vignette contain important metadata. default template contains following information:metadata written yaml, format designed human computer readable. basics syntax much like DESCRIPTION file, line consists field name, colon, value field. one special YAML feature ’re using >. indicates following lines text plain text shouldn’t use special YAML features.fields :Title, author date: put vignette’s title, author \ndate. ’ll want fill (can delete \ndon’t want title block top page). date filled\ndefault: uses special knitr syntax (explained ) insert\ntoday’s date.Title, author date: put vignette’s title, author \ndate. ’ll want fill (can delete \ndon’t want title block top page). date filled\ndefault: uses special knitr syntax (explained ) insert\ntoday’s date.Output: tells rmarkdown output formatter use.\nmany options useful regular reports (including\nhtml, pdf, slideshows, …) rmarkdown::html_vignette \nspecifically designed work well inside packages. See\n?rmarkdown::html_vignette details.Output: tells rmarkdown output formatter use.\nmany options useful regular reports (including\nhtml, pdf, slideshows, …) rmarkdown::html_vignette \nspecifically designed work well inside packages. See\n?rmarkdown::html_vignette details.Vignette: contains special block metadata needed R. , can\nsee legacy LaTeX vignettes: metadata looks like LaTeX commands.\n’ll need modify \\VignetteIndexEntry provide title \nvignette ’d like appear vignette index. Leave \ntwo lines . tell R use knitr process file, \nfile encoded UTF-8 (encoding ever use write\nvignettes).Vignette: contains special block metadata needed R. , can\nsee legacy LaTeX vignettes: metadata looks like LaTeX commands.\n’ll need modify \\VignetteIndexEntry provide title \nvignette ’d like appear vignette index. Leave \ntwo lines . tell R use knitr process file, \nfile encoded UTF-8 (encoding ever use write\nvignettes).","code":"---\ntitle: \"Vignette Title\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---"},{"path":"vignettes.html","id":"markdown","chapter":"11 Vignettes: long-form documentation","heading":"11.3 Markdown","text":"R Markdown vignettes written Markdown, light weight markup language. John Gruber, author Markdown, summarises goals philosophy Markdown:Markdown intended easy--read easy--write feasible.Readability, however, emphasized else. Markdown-formatted\ndocument publishable -, plain text, without looking like\n’s marked tags formatting instructions. Markdown’s\nsyntax influenced several existing text--HTML filters —\nincluding Setext, atx, Textile, reStructuredText, Grutatext, EtText —\nsingle biggest source inspiration Markdown’s syntax format\nplain text email.end, Markdown’s syntax comprised entirely punctuation\ncharacters, punctuation characters carefully chosen \nlook like mean. E.g., asterisks around word actually look\nlike emphasis. Markdown lists look like, well, lists. Even blockquotes\nlook like quoted passages text, assuming ’ve ever used email.Markdown isn’t powerful LaTeX, reStructuredText docbook, ’s simple, easy write, easy read even ’s rendered. find Markdown’s constraints helpful writing lets focus content, prevents messing around styling.’ve never used Markdown , good place start John Gruber’s Markdown syntax documentation. Pandoc’s implementation Markdown rounds rough edges adds number new features, also recommend familiarising pandoc manual. editing Markdown document, RStudio presents drop-menu via question mark icon, offers Markdown reference card.sections show think important features pandoc’s Markdown dialect. able learn basics 15 minutes.","code":""},{"path":"vignettes.html","id":"sections","chapter":"11 Vignettes: long-form documentation","heading":"11.3.1 Sections","text":"Headings identified #:Create horizontal rule three hyphens (asterisks):","code":"# Heading 1\n## Heading 2\n### Heading 3--------\n********"},{"path":"vignettes.html","id":"lists-1","chapter":"11 Vignettes: long-form documentation","heading":"11.3.2 Lists","text":"Basic unordered lists use *:want multiparagraph lists, second subsequent paragraphs need additional indenting:Ordered lists use: 1.:can intermingle ordered bulleted lists, long adhere four space rule:Definition lists use :","code":"* Bulleted list\n* Item 2\n    * Nested bullets need a 4-space indent.\n    * Item 2b  * It's possible to put multiple paragraphs of text in a list item. \n\n    But to do that, the second and subsequent paragraphs must be\n    indented by four or more spaces. It looks better if the first\n    bullet is also indented.1. Item 1\n1. Item 2\n1. Items are numbered automatically, even though they all start with 1.1.  Item 1.\n    *  Item a\n    *  Item b\n1.  Item 2.Definition\n  : a statement of the exact meaning of a word, especially in a dictionary.\nList \n  : a number of connected items or names written or printed consecutively, \n    typically one below the other. \n  : barriers enclosing an area for a jousting tournament."},{"path":"vignettes.html","id":"inline-formatting","chapter":"11 Vignettes: long-form documentation","heading":"11.3.3 Inline formatting","text":"Inline format similarly simple:","code":"_italic_ or *italic*\n__bold__ or **bold**    \n[link text](destination)\n<http://this-is-a-raw-url.com>"},{"path":"vignettes.html","id":"tables-1","chapter":"11 Vignettes: long-form documentation","heading":"11.3.4 Tables","text":"four types tables. recommend using pipe table looks like :Notice use : spacer heading. determines alignment column.data underlying table exists R, don’t lay hand. Instead use knitr::kable(), look printr pander.","code":"| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |"},{"path":"vignettes.html","id":"code","chapter":"11 Vignettes: long-form documentation","heading":"11.3.5 Code","text":"inline code use `code`.bigger blocks code, use ```. known “fenced” code blocks:add syntax highlighting code, put language name backtick:(time printing, languages supported pandoc : actionscript, ada, apache, asn1, asp, awk, bash, bibtex, boo, c, changelog, clojure, cmake, coffee, coldfusion, commonlisp, cpp, cs, css, curry, d, diff, djangotemplate, doxygen, doxygenlua, dtd, eiffel, email, erlang, fortran, fsharp, gnuassembler, go, haskell, haxe, html, ini, java, javadoc, javascript, json, jsp, julia, latex, lex, literatecurry, literatehaskell, lua, makefile, mandoc, matlab, maxima, metafont, mips, modula2, modula3, monobasic, nasm, noweb, objectivec, objectivecpp, ocaml, octave, pascal, perl, php, pike, postscript, prolog, python, r, relaxngcompact, rhtml, ruby, rust, scala, scheme, sci, sed, sgml, sql, sqlmysql, sqlpostgresql, tcl, texinfo, verilog, vhdl, xml, xorg, xslt, xul, yacc, yaml. Syntax highlighting done haskell package skylighting; see website current list.)include R code vignette, usually won’t use ```r. Instead, ’ll use ```{r}, specially processed knitr, described next.","code":"```\n# A comment\nadd <- function(a, b) a + b\n``````c\nint add(int a, int b) {\n  return a + b;\n}\n```"},{"path":"vignettes.html","id":"knitr","chapter":"11 Vignettes: long-form documentation","heading":"11.4 Knitr","text":"Knitr allows intermingle code, results text. Knitr takes R code, runs , captures output, translates formatted Markdown. Knitr captures printed output, messages, warnings, errors (optionally) plots (basic graphics, lattice & ggplot ).Consider simple example . Note knitr block looks similar fenced code block, instead using r, using {r}.generates following Markdown:, turn, rendered :start using knitr, ’ll never look back. code always run build vignette, can rest assured knowing code works. ’s way input output sync.","code":"```{r}\n# Add two numbers together\nadd <- function(a, b) a + b\nadd(10, 20)\n``````r\n# Add two numbers together\nadd <- function(a, b) a + b\nadd(10, 20)\n## [1] 30\n```\n# Add two numbers together\nadd <- function(a, b) a + b\nadd(10, 20)\n## 30"},{"path":"vignettes.html","id":"options","chapter":"11 Vignettes: long-form documentation","heading":"11.4.1 Options","text":"can specify additional options control rendering:affect single block, add block settings:\n  `​``{r, opt1 = val1, opt2 = val2}\n  # code\n  ```affect single block, add block settings:affect blocks, call knitr::opts_chunk$set() knitr block:\n  `​``{r, echo = FALSE}\n  knitr::opts_chunk$set(\n    opt1 = val1,\n    opt2 = val2\n  )\n  ```affect blocks, call knitr::opts_chunk$set() knitr block:important options :eval = FALSE prevents evaluation code. useful want\nshow code take long time run. careful \nuse : since code run, ’s easy introduce bugs.\n(Also, users puzzled copy & paste code doesn’t\nwork.)eval = FALSE prevents evaluation code. useful want\nshow code take long time run. careful \nuse : since code run, ’s easy introduce bugs.\n(Also, users puzzled copy & paste code doesn’t\nwork.)echo = FALSE turns printing code input (output\nstill printed). Generally, shouldn’t use vignettes\nunderstanding code important. ’s useful\nwriting reports since code typically less important \noutput.echo = FALSE turns printing code input (output\nstill printed). Generally, shouldn’t use vignettes\nunderstanding code important. ’s useful\nwriting reports since code typically less important \noutput.results = \"hide\" turns printing code output.results = \"hide\" turns printing code output.warning = FALSE message = FALSE suppress display warnings\nmessages.warning = FALSE message = FALSE suppress display warnings\nmessages.error = TRUE captures errors block shows inline.\nuseful want demonstrate happens code throws error.\nWhenever use error = TRUE, also need use purl = FALSE. \nevery vignette accompanied file code contains \ncode vignette. R must able source file without errors,\npurl = FALSE prevents code inserted document.error = TRUE captures errors block shows inline.\nuseful want demonstrate happens code throws error.\nWhenever use error = TRUE, also need use purl = FALSE. \nevery vignette accompanied file code contains \ncode vignette. R must able source file without errors,\npurl = FALSE prevents code inserted document.collapse = TRUE comment = \"#>\" preferred way displaying\ncode output. usually set globally putting following knitr\nblock start document.\n  `​``{r, echo = FALSE}\n  knitr::opts_chunk$set(collapse = TRUE, comment = \"#>\")\n  ```collapse = TRUE comment = \"#>\" preferred way displaying\ncode output. usually set globally putting following knitr\nblock start document.results = \"asis\" treats output R code literal Markdown.\nuseful want generate text R code. example,\nwant generate table using pander package, ’d :\n`​``{r, results = \"asis\"}\npander::pandoc.table(iris[1:3, 1:4])\n```\ngenerates Markdown table looks like:\n--------------------------------------------------------\n Sepal.Length   Sepal.Width   Petal.Length   Petal.Width \n-------------- ------------- -------------- -------------\n     5.1            3.5           1.4            0.2     \n\n     4.9             3            1.4            0.2     \n\n     4.7            3.2           1.3            0.2     \n---------------------------------------------------------\nmakes table looks like:\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\n5.1\n3.5\n1.4\n0.2\n4.9\n3\n1.4\n0.2\n4.7\n3.2\n1.3\n0.2\nresults = \"asis\" treats output R code literal Markdown.\nuseful want generate text R code. example,\nwant generate table using pander package, ’d :generates Markdown table looks like:makes table looks like:fig.show = \"hold\" holds figures end code block.fig.show = \"hold\" holds figures end code block.fig.width = 5 fig.height = 5 set height width figures\n(inches).fig.width = 5 fig.height = 5 set height width figures\n(inches).Many options described https://yihui.name/knitr/options.","code":"  `​``{r, opt1 = val1, opt2 = val2}\n  # code\n  ```  `​``{r, echo = FALSE}\n  knitr::opts_chunk$set(\n    opt1 = val1,\n    opt2 = val2\n  )\n  ```  `​``{r, echo = FALSE}\n  knitr::opts_chunk$set(collapse = TRUE, comment = \"#>\")\n  ````​``{r, results = \"asis\"}\npander::pandoc.table(iris[1:3, 1:4])\n```--------------------------------------------------------\n Sepal.Length   Sepal.Width   Petal.Length   Petal.Width \n-------------- ------------- -------------- -------------\n     5.1            3.5           1.4            0.2     \n\n     4.9             3            1.4            0.2     \n\n     4.7            3.2           1.3            0.2     \n---------------------------------------------------------"},{"path":"vignettes.html","id":"vignette-workflow-2","chapter":"11 Vignettes: long-form documentation","heading":"11.5 Development cycle","text":"Run one code chunk time using Cmd + Alt + C. Re-run entire document fresh R session using Knit (Ctrl/Cmd + Shift + K).can build vignettes console devtools::build_vignettes(), rarely useful. Instead use devtools::build() create package bundle vignettes included. RStudio’s “Build & reload” build vignettes save time. Similarly, devtools::install_github() (friends) build vignettes default ’re time consuming may require additional packages. can force building devtools::install_github(build_vignettes = TRUE). also install suggested packages.","code":""},{"path":"vignettes.html","id":"vignette-advice","chapter":"11 Vignettes: long-form documentation","heading":"11.6 Advice for writing vignettes","text":"’re thinking without writing, think ’re thinking.\n— Leslie LamportWhen writing vignette, ’re teaching someone use package. need put readers’ shoes, adopt “beginner’s mind”. can difficult ’s hard forget knowledge ’ve already internalised. reason, find teaching -person really useful way get feedback vignettes. get feedback straight away ’s also much easier way learn people already know.useful side effect approach helps improve code. forces re-see initial onboarding process appreciate parts hard. Every time ’ve written text describes initial experience, ’ve realised ’ve missed important functions. Adding functions helps users, often also helps ! (one reasons like writing books).strongly recommend literally anything written Kathy Sierra. old blog,\nCreating passionate users full advice\nprogramming, teaching, create valuable tools. thoroughly\nrecommend reading older content. new blog,\nSerious Pony, doesn’t much content,\ngreat articles.strongly recommend literally anything written Kathy Sierra. old blog,\nCreating passionate users full advice\nprogramming, teaching, create valuable tools. thoroughly\nrecommend reading older content. new blog,\nSerious Pony, doesn’t much content,\ngreat articles.’d like learn write better, highly recommend\nStyle: Lessons Clarity Grace \nJoseph M. Williams Joseph Bizup. helps understand structure \nwriting ’ll better able recognise fix bad writing.’d like learn write better, highly recommend\nStyle: Lessons Clarity Grace \nJoseph M. Williams Joseph Bizup. helps understand structure \nwriting ’ll better able recognise fix bad writing.Writing vignette also makes nice break coding. experience, writing uses different part brain programming, ’re sick programming, try writing bit. (related idea structured procrastination.).","code":""},{"path":"vignettes.html","id":"organisation","chapter":"11 Vignettes: long-form documentation","heading":"11.6.1 Organisation","text":"simpler packages, one vignette often sufficient. complicated packages may actually need one. fact, can many vignettes like. tend think like chapters book – self-contained, still link together cohesive whole.Although ’s slight hack, can link various vignettes taking advantage files stored disk: link vignette abc.Rmd, just make link abc.html.","code":""},{"path":"vignettes.html","id":"vignette-cran","chapter":"11 Vignettes: long-form documentation","heading":"11.7 CRAN notes","text":"Note since build vignettes locally, CRAN receives html/pdf source code. However, CRAN re-build vignette. checks code runnable (running ). means packages used vignette must declared DESCRIPTION. also means can use Rmarkdown (uses pandoc) even though CRAN doesn’t pandoc installed.Common problems:vignette builds interactively, checking, fails error\nmissing package know installed. means ’ve\nforgotten declare dependency DESCRIPTION (usually \ngo Suggests).vignette builds interactively, checking, fails error\nmissing package know installed. means ’ve\nforgotten declare dependency DESCRIPTION (usually \ngo Suggests).Everything works interactively, vignette doesn’t show \n’ve installed package. One following may occurred. First,\nRStudio’s “build reload” doesn’t build vignettes, may need\nrun devtools::install() instead. Next check:\ndirectory called vignettes/ vignette/.\nCheck haven’t inadvertently excluded vignettes \n.Rbuildignore\nEnsure necessary vignette metadata.\nEverything works interactively, vignette doesn’t show \n’ve installed package. One following may occurred. First,\nRStudio’s “build reload” doesn’t build vignettes, may need\nrun devtools::install() instead. Next check:directory called vignettes/ vignette/.directory called vignettes/ vignette/.Check haven’t inadvertently excluded vignettes \n.RbuildignoreCheck haven’t inadvertently excluded vignettes \n.RbuildignoreEnsure necessary vignette metadata.Ensure necessary vignette metadata.use error = TRUE, must use purl = FALSE.use error = TRUE, must use purl = FALSE.’ll need watch file size. include lot graphics, ’s easy create large file. hard fast rules, large vignette prepared either justify file size, make smaller.","code":""},{"path":"vignettes.html","id":"where-next","chapter":"11 Vignettes: long-form documentation","heading":"11.8 Where next","text":"’d like control appearance vignette, ’ll need learn Rmarkdown. website, https://rmarkdown.rstudio.com, great place start. can learn alternative output formats (like LaTeX pdf) can incorporate raw HTML LaTeX need additional control.write nice vignette, consider submitting Journal Statistical Software R Journal. journals electronic peer-reviewed. Comments reviewers can helpful improving quality vignette related software.","code":""},{"path":"tests.html","id":"tests","chapter":"12 Testing","heading":"12 Testing","text":"Testing vital part package development.\nensures code want .\nTesting, however, adds additional step development workflow.\ngoal chapter show make task easier effective formal automated testing using testthat package.now, workflow probably looks like :Write function.Load Ctrl/Cmd + Shift + L devtools::load_all().Experiment console see works.Rinse repeat.testing code workflow, ’re informally.\nproblem approach come back code 3 months time add new feature, ’ve probably forgotten informal tests ran first time around.\nmakes easy break code used work.started using automated tests discovered spending much time re-fixing bugs ’d already fixed .\nwriting code fixing bugs, ’d perform interactive tests make sure code worked.\nnever system store tests re-run needed.\nthink common practice among R programmers.\n’s don’t test code, ’s don’t automate tests.chapter ’ll learn graduate using informal ad hoc testing, done command line, formal automated testing (aka unit testing).\nturning casual interactive tests reproducible scripts requires little work front, pays four ways:Fewer bugs.\n’re explicit code behave fewer\nbugs.\nreason bit like reason double entry book-keeping works:\ndescribe behaviour code two places, \ncode tests, able check one .\nfollowing approach testing, can sure bugs ’ve\nfixed past never come back haunt .Fewer bugs.\n’re explicit code behave fewer\nbugs.\nreason bit like reason double entry book-keeping works:\ndescribe behaviour code two places, \ncode tests, able check one .\nfollowing approach testing, can sure bugs ’ve\nfixed past never come back haunt .Better code structure.\nCode ’s easy test usually better designed.\nwriting tests forces break complicated parts \ncode separate functions can work isolation.\nreduces duplication code.\nresult, functions easier test, understand work (’ll\neasier combine new ways).Better code structure.\nCode ’s easy test usually better designed.\nwriting tests forces break complicated parts \ncode separate functions can work isolation.\nreduces duplication code.\nresult, functions easier test, understand work (’ll\neasier combine new ways).Easier restarts.\nalways finish coding session creating failing test (e.g. \nnext feature want implement), testing makes easier pick\nleft : tests let know next.Easier restarts.\nalways finish coding session creating failing test (e.g. \nnext feature want implement), testing makes easier pick\nleft : tests let know next.Robust code.\nknow major functionality package associated\ntest, can confidently make big changes without worrying accidentally\nbreaking something.\n, particularly useful think simpler way \naccomplish task (usually reason solution simpler ’ve\nforgotten important use case!).Robust code.\nknow major functionality package associated\ntest, can confidently make big changes without worrying accidentally\nbreaking something.\n, particularly useful think simpler way \naccomplish task (usually reason solution simpler ’ve\nforgotten important use case!).’re familiar unit testing languages, note fundamental differences testthat.\nR , heart, functional programming language object oriented programming language.\ninstance, R’s main OO systems (S3 S4) based generic functions (.e., methods belong functions classes), testing approaches built around objects methods don’t make much sense.","code":""},{"path":"tests.html","id":"test-workflow","chapter":"12 Testing","heading":"12.1 Test workflow","text":"set package use testthat, run::Create tests/testthat directory.Create tests/testthat directory.Add testthat Suggests field DESCRIPTION.Add testthat Suggests field DESCRIPTION.Create file tests/testthat.R runs tests \nR CMD check runs. (’ll learn \nautomated checking.)Create file tests/testthat.R runs tests \nR CMD check runs. (’ll learn \nautomated checking.)’re set workflow simple:Modify code tests.Modify code tests.Test package Ctrl/Cmd + Shift + T devtools::test().Test package Ctrl/Cmd + Shift + T devtools::test().Repeat tests pass.Repeat tests pass.testing output looks like :test failure looks something like :failure gives description test (e.g., “get_release_data() works file found”), location (e.g., “test-release.R:108:3”), reason failure (e.g., “res$Version (actual) equal ”0.0.0.9000\" (expected)\").\ngoal pass tests.","code":"\nusethis::use_testthat()devtools::test()\nℹ Loading usethis\nℹ Testing usethis\n✓ | F W S  OK | Context\n✓ |         1 | addin [0.1s]\n✓ |         6 | badge [0.5s]\n   ...\n✓ |        27 | github-actions [4.9s]\n   ...\n✓ |        44 | write [0.6s]\n\n══ Results ═════════════════════════════════════════════════════════════════\nDuration: 31.3 s\n\n── Skipped tests  ──────────────────────────────────────────────────────────\n• Not on GitHub Actions, Travis, or Appveyor (3)\n\n[ FAIL 1 | WARN 0 | SKIP 3 | PASS 728 ]Failure (test-release.R:108:3): get_release_data() works if no file found\nres$Version (`actual`) not equal to \"0.0.0.9000\" (`expected`).\n\n`actual`:   \"0.0.0.1234\"\n`expected`: \"0.0.0.9000\""},{"path":"tests.html","id":"test-structure","chapter":"12 Testing","heading":"12.2 Test structure","text":"test file lives tests/testthat/.\nname must start test.\n’s example test file stringr package:Tests organised hierarchically: expectations grouped tests organised files:expectation atom testing.\ndescribes expected result computation:\nright value right class?\nproduce error messages ?\nexpectation automates visual checking results console.\nExpectations functions start expect_.expectation atom testing.\ndescribes expected result computation:\nright value right class?\nproduce error messages ?\nexpectation automates visual checking results console.\nExpectations functions start expect_.test groups together multiple expectations test output \nsimple function, range possibilities single parameter \ncomplicated function, tightly related functionality across multiple\nfunctions.\nsometimes called unit tests, test one unit \nfunctionality.\ntest created test_that().test groups together multiple expectations test output \nsimple function, range possibilities single parameter \ncomplicated function, tightly related functionality across multiple\nfunctions.\nsometimes called unit tests, test one unit \nfunctionality.\ntest created test_that().file groups together multiple related tests.\nFiles given human readable name context().\nprocess revising chapter 2nd edition.\nLet known use testthat::context() now discouraged.\nDon’t use context() new code remove context() come across\npackage maintenance.file groups together multiple related tests.\nFiles given human readable name context().\nprocess revising chapter 2nd edition.\nLet known use testthat::context() now discouraged.\nDon’t use context() new code remove context() come across\npackage maintenance.described detail .","code":"\n# In an actual test file, in a package, you will NOT include `library(stringr)`!\n# The various ways you run your tests will take care of making the\n# functions in the package you are testing available.\n# But we must do it here.\nlibrary(stringr)\n\ntest_that(\"str_length is number of characters\", {\n  expect_equal(str_length(\"a\"), 1)\n  expect_equal(str_length(\"ab\"), 2)\n  expect_equal(str_length(\"abc\"), 3)\n})\n#> Test passed 🥇\n\ntest_that(\"str_length of factor is length of level\", {\n  expect_equal(str_length(factor(\"a\")), 1)\n  expect_equal(str_length(factor(\"ab\")), 2)\n  expect_equal(str_length(factor(\"abc\")), 3)\n})\n#> Test passed 🌈\n\ntest_that(\"str_length of missing is missing\", {\n  expect_equal(str_length(NA), NA_integer_)\n  expect_equal(str_length(c(NA, 1)), c(NA, 1))\n  expect_equal(str_length(\"NA\"), 2)\n})\n#> Test passed 🥇"},{"path":"tests.html","id":"expectations","chapter":"12 Testing","heading":"12.2.1 Expectations","text":"expectation finest level testing.\nmakes binary assertion whether function call expect.\nexpectations similar structure:start expect_.start expect_.two arguments: first actual result, second \nexpect.two arguments: first actual result, second \nexpect.actual expected results don’t agree, testthat throws error.actual expected results don’t agree, testthat throws error.’ll normally put expectations inside tests inside files, can also run directly.\nmakes easy explore expectations interactively.\nalmost 20 expectations testthat package.\nimportant discussed .passage still revised 2nd edition R Packages book.\nmeantime, please note :\nthird edition testthat, expect_equal() expect_identical() powered waldo package.\npast / second edition testthat, expect_equal() wraps .equal() expect_identical() wraps identical().two basic ways test equality: expect_equal(),\nexpect_identical(). expect_equal() commonly used: \nchecks equality within numerical tolerance:\n\nexpect_equal(10, 10)\nexpect_equal(10, 10 + 1e-7)\nexpect_equal(10, 11)\nwant test exact equivalence, need compare \nexotic object like environment, use expect_identical().\n\nexpect_equal(10, 10 + 1e-7)\nexpect_identical(10, 10 + 1e-7)two basic ways test equality: expect_equal(),\nexpect_identical(). expect_equal() commonly used: \nchecks equality within numerical tolerance:want test exact equivalence, need compare \nexotic object like environment, use expect_identical().expect_match() matches character vector regular expression.\noptional argument controls whether elements just one\nelement needs match.\npowered grepl() (additional arguments like\nignore.case = FALSE fixed = TRUE passed ).\n\nstring <- \"Testing fun!\"\n\nexpect_match(string, \"Testing\") \n\n# Fails, match case-sensitive\nexpect_match(string, \"testing\")\n\n# Additional arguments passed grepl:\nexpect_match(string, \"testing\", ignore.case = TRUE)expect_match() matches character vector regular expression.\noptional argument controls whether elements just one\nelement needs match.\npowered grepl() (additional arguments like\nignore.case = FALSE fixed = TRUE passed ).Four variations expect_match() let check types \nresult: expect_output(), inspects printed output; expect_message(),\nmessages; expect_warning(), warnings; expect_error() errors.\n\n<- list(1:10, letters)\n\nexpect_output(str(), \"List 2\")\nexpect_output(str(), \"int [1:10]\", fixed = TRUE)\n\nexpect_message(library(mgcv), \"mgcv\")\nexpect_message(), expect_warning(), expect_error() can\nleave second argument blank just want see message,\nwarning error created. However, ’s normally better explicit,\nprovide text message.\n\nexpect_warning(log(-1))\nexpect_error(1 / \"\") \n\n# always better explicit\nexpect_warning(log(-1), \"NaNs produced\")\nexpect_error(1 / \"\", \"non-numeric argument\")\n\n# Failure produce warning error error expected\nexpect_warning(log(0))\nexpect_error(1 / 2) Four variations expect_match() let check types \nresult: expect_output(), inspects printed output; expect_message(),\nmessages; expect_warning(), warnings; expect_error() errors.expect_message(), expect_warning(), expect_error() can\nleave second argument blank just want see message,\nwarning error created. However, ’s normally better explicit,\nprovide text message.expect_is() checks object inherit()s specified class.\n\nmodel <- lm(mpg ~ wt, data = mtcars)\nexpect_is(model, \"lm\")\nexpect_is(model, \"glm\")expect_is() checks object inherit()s specified class.expect_true() expect_false() useful catchalls none \nexpectations need.expect_true() expect_false() useful catchalls none \nexpectations need.Sometimes don’t know exactly result , ’s \ncomplicated easily recreate code.\ncase best can check result \nlast time.\nexpect_equal_to_reference() caches result first time run, \ncompares subsequent runs.\nreason result change, just delete cache (*) file\nre-test.Sometimes don’t know exactly result , ’s \ncomplicated easily recreate code.\ncase best can check result \nlast time.\nexpect_equal_to_reference() caches result first time run, \ncompares subsequent runs.\nreason result change, just delete cache (*) file\nre-test.Running sequence expectations useful ensures code behaves expected.\neven use expectation within function check inputs expect.\nHowever, ’re useful something goes wrong.\nknow something expected.\ndon’t know goal expectation.\nTests, described next, organise expectations coherent blocks describe overall goal set expectations.","code":"\nexpect_equal(10, 10)\nexpect_equal(10, 10 + 1e-7)\nexpect_equal(10, 11)\nexpect_equal(10, 10 + 1e-7)\nexpect_identical(10, 10 + 1e-7)\nstring <- \"Testing is fun!\"\n\nexpect_match(string, \"Testing\") \n\n# Fails, match is case-sensitive\nexpect_match(string, \"testing\")\n\n# Additional arguments are passed to grepl:\nexpect_match(string, \"testing\", ignore.case = TRUE)\na <- list(1:10, letters)\n\nexpect_output(str(a), \"List of 2\")\nexpect_output(str(a), \"int [1:10]\", fixed = TRUE)\n\nexpect_message(library(mgcv), \"This is mgcv\")\nexpect_warning(log(-1))\nexpect_error(1 / \"a\") \n\n# But always better to be explicit\nexpect_warning(log(-1), \"NaNs produced\")\nexpect_error(1 / \"a\", \"non-numeric argument\")\n\n# Failure to produce a warning or error when an error is expected\nexpect_warning(log(0))\nexpect_error(1 / 2) \nmodel <- lm(mpg ~ wt, data = mtcars)\nexpect_is(model, \"lm\")\nexpect_is(model, \"glm\")"},{"path":"tests.html","id":"test-tests","chapter":"12 Testing","heading":"12.3 Writing tests","text":"test informative name cover single unit functionality.\nidea test fails, ’ll know ’s wrong code look problem.\ncreate new test using test_that(), test name code block arguments.\ntest name complete sentence “Test …”.\ncode block collection expectations.’s organise expectations tests.\nmain thing message associated test informative can quickly narrow source problem.\nTry avoid putting many expectations one test - ’s better smaller tests fewer larger tests.test run environment self-contained.\nHowever, testthat doesn’t know cleanup actions affect R landscape:filesystem: creating deleting files, changing working directory,\netc.filesystem: creating deleting files, changing working directory,\netc.search path: library(), attach().search path: library(), attach().Global options, like options() par().Global options, like options() par().use actions tests, ’ll need clean .\nmany testing packages set-teardown methods run automatically test, important testthat can create objects outside tests can rely R’s copy--modify semantics keep unchanged test runs.\nclean actions can use regular R functions.","code":""},{"path":"tests.html","id":"what-to-test","chapter":"12 Testing","heading":"12.3.1 What to test","text":"Whenever tempted type something print statement \ndebugger expression, write test instead.\n— Martin FowlerThere fine balance writing tests.\ntest write makes code less likely change inadvertently;\nalso can make harder change code purpose.\n’s hard give good general advice writing tests, might find points helpful:Focus testing external interface functions - test \ninternal interface, ’s harder change implementation \nfuture well modifying code, ’ll also need update \ntests.Focus testing external interface functions - test \ninternal interface, ’s harder change implementation \nfuture well modifying code, ’ll also need update \ntests.Strive test behaviour one one test.\nbehaviour later changes need update single test.Strive test behaviour one one test.\nbehaviour later changes need update single test.Avoid testing simple code ’re confident work.\nInstead focus time code ’re sure , fragile, \ncomplicated interdependencies.\nsaid, often find make mistakes falsely assume \nproblem simple doesn’t need tests.Avoid testing simple code ’re confident work.\nInstead focus time code ’re sure , fragile, \ncomplicated interdependencies.\nsaid, often find make mistakes falsely assume \nproblem simple doesn’t need tests.Always write test discover bug.\nmay find helpful adopt test-first philosophy.\nalways start writing tests, write code \nmakes pass.\nreflects important problem solving strategy:\nstart establishing success criteria, know ’ve solved \nproblem.Always write test discover bug.\nmay find helpful adopt test-first philosophy.\nalways start writing tests, write code \nmakes pass.\nreflects important problem solving strategy:\nstart establishing success criteria, know ’ve solved \nproblem.","code":""},{"path":"tests.html","id":"skipping-a-test","chapter":"12 Testing","heading":"12.3.2 Skipping a test","text":"Sometimes ’s impossible perform test - may internet connection may missing important file.\nUnfortunately, another likely reason follows simple rule:\nmachines use write code, likely won’t able run tests.\nshort, times , instead getting failure, just want skip test.\n, can use skip() function - rather throwing error simply prints S output.","code":"\ncheck_api <- function() {\n  if (not_working()) {\n    skip(\"API not available\")\n  }\n}\n\ntest_that(\"foo api returns bar when given baz\", {\n  check_api()\n  ...\n})"},{"path":"tests.html","id":"building-your-own-testing-tools","chapter":"12 Testing","heading":"12.3.3 Building your own testing tools","text":"start write tests, might notice duplication code.\nexample, following code shows one test floor_date() function library(lubridate).\nseven expectations check results rounding date nearest second, minute, hour, etc.\n’s lot duplication (increases chance bugs), might want extract common behaviour new function.’d start defining couple helper functions make expectation concise.\nallows test fit one line, can line actual expected values make easier see differences:go step create custom expectation function:However, expectation fails doesn’t give informative output:Instead can use little non-standard evaluation produce something informative.\nkey use bquote() eval().\nbquote() call , note use .(x) - contents () inserted call.sort refactoring often worthwhile removing redundant code makes easier see ’s changing.\nReadable tests give confidence ’re correct.","code":"\nlibrary(lubridate)\n#> \n#> Attaching package: 'lubridate'\n#> The following objects are masked from 'package:base':\n#> \n#>     date, intersect, setdiff, union\ntest_that(\"floor_date works for different units\", {\n  base <- as.POSIXct(\"2009-08-03 12:01:59.23\", tz = \"UTC\")\n\n  expect_equal(floor_date(base, \"second\"), \n    as.POSIXct(\"2009-08-03 12:01:59\", tz = \"UTC\"))\n  expect_equal(floor_date(base, \"minute\"), \n    as.POSIXct(\"2009-08-03 12:01:00\", tz = \"UTC\"))\n  expect_equal(floor_date(base, \"hour\"),   \n    as.POSIXct(\"2009-08-03 12:00:00\", tz = \"UTC\"))\n  expect_equal(floor_date(base, \"day\"),    \n    as.POSIXct(\"2009-08-03 00:00:00\", tz = \"UTC\"))\n  expect_equal(floor_date(base, \"week\"),   \n    as.POSIXct(\"2009-08-02 00:00:00\", tz = \"UTC\"))\n  expect_equal(floor_date(base, \"month\"),  \n    as.POSIXct(\"2009-08-01 00:00:00\", tz = \"UTC\"))\n  expect_equal(floor_date(base, \"year\"),   \n    as.POSIXct(\"2009-01-01 00:00:00\", tz = \"UTC\"))\n})\n#> Test passed 🎉\ntest_that(\"floor_date works for different units\", {\n  base <- as.POSIXct(\"2009-08-03 12:01:59.23\", tz = \"UTC\")\n  floor_base <- function(unit) floor_date(base, unit)\n  as_time <- function(x) as.POSIXct(x, tz = \"UTC\")\n\n  expect_equal(floor_base(\"second\"), as_time(\"2009-08-03 12:01:59\"))\n  expect_equal(floor_base(\"minute\"), as_time(\"2009-08-03 12:01:00\"))\n  expect_equal(floor_base(\"hour\"),   as_time(\"2009-08-03 12:00:00\"))\n  expect_equal(floor_base(\"day\"),    as_time(\"2009-08-03 00:00:00\"))\n  expect_equal(floor_base(\"week\"),   as_time(\"2009-08-02 00:00:00\"))\n  expect_equal(floor_base(\"month\"),  as_time(\"2009-08-01 00:00:00\"))\n  expect_equal(floor_base(\"year\"),   as_time(\"2009-01-01 00:00:00\"))\n})\n#> Test passed 🥳\nbase <- as.POSIXct(\"2009-08-03 12:01:59.23\", tz = \"UTC\")\n\nexpect_floor_equal <- function(unit, time) {\n  expect_equal(floor_date(base, unit), as.POSIXct(time, tz = \"UTC\"))\n}\nexpect_floor_equal(\"year\", \"2009-01-01 00:00:00\")\nexpect_floor_equal(\"year\", \"2008-01-01 00:00:00\")\nexpect_floor_equal <- function(unit, time) {\n  as_time <- function(x) as.POSIXct(x, tz = \"UTC\")\n  eval(bquote(expect_equal(floor_date(base, .(unit)), as_time(.(time)))))\n}\nexpect_floor_equal(\"year\", \"2008-01-01 00:00:00\")\ntest_that(\"floor_date works for different units\", {\n  as_time <- function(x) as.POSIXct(x, tz = \"UTC\")\n  expect_floor_equal <- function(unit, time) {\n    eval(bquote(expect_equal(floor_date(base, .(unit)), as_time(.(time)))))\n  }\n\n  base <- as_time(\"2009-08-03 12:01:59.23\")\n  expect_floor_equal(\"second\", \"2009-08-03 12:01:59\")\n  expect_floor_equal(\"minute\", \"2009-08-03 12:01:00\")\n  expect_floor_equal(\"hour\",   \"2009-08-03 12:00:00\")\n  expect_floor_equal(\"day\",    \"2009-08-03 00:00:00\")\n  expect_floor_equal(\"week\",   \"2009-08-02 00:00:00\")\n  expect_floor_equal(\"month\",  \"2009-08-01 00:00:00\")\n  expect_floor_equal(\"year\",   \"2009-01-01 00:00:00\")\n})\n#> Test passed 🌈"},{"path":"tests.html","id":"test-files","chapter":"12 Testing","heading":"12.4 Test files","text":"highest-level structure tests file.\nfile contain single context() call provides brief description contents.\nprocess revising chapter 2nd edition.\nLet known use testthat::context() now discouraged.\nDon’t use context() new code remove context() come across package maintenance.\nJust like files R/ directory, free organise tests way like.\n, two extremes clearly bad (tests one file, one file per test).\nneed find happy medium works .\ngood starting place one file tests complicated function.","code":""},{"path":"tests.html","id":"test-cran","chapter":"12 Testing","heading":"12.5 CRAN notes","text":"CRAN run tests CRAN platforms: Windows, Mac, Linux Solaris.\nthings bear mind:Tests need run relatively quickly - aim minute.\nPlace skip_on_cran() beginning long-running tests shouldn’t\nrun CRAN - ’ll still run locally, CRAN.Tests need run relatively quickly - aim minute.\nPlace skip_on_cran() beginning long-running tests shouldn’t\nrun CRAN - ’ll still run locally, CRAN.Note tests always run English language (LANGUAGE=EN) \nC sort order (LC_COLLATE=C).\nminimises spurious differences platforms.Note tests always run English language (LANGUAGE=EN) \nC sort order (LC_COLLATE=C).\nminimises spurious differences platforms.careful testing things likely variable CRAN\nmachines.\n’s risky test long something takes (CRAN machines often\nheavily loaded) test parallel code (CRAN runs multiple package\ntests parallel, multiple cores always available).\nNumerical precision can also vary across platforms (’s often less precise \n32-bit versions R) use expect_equal() rather \nexpect_identical().careful testing things likely variable CRAN\nmachines.\n’s risky test long something takes (CRAN machines often\nheavily loaded) test parallel code (CRAN runs multiple package\ntests parallel, multiple cores always available).\nNumerical precision can also vary across platforms (’s often less precise \n32-bit versions R) use expect_equal() rather \nexpect_identical().","code":""},{"path":"namespace.html","id":"namespace","chapter":"13 Namespace","heading":"13 Namespace","text":"package namespace (recorded NAMESPACE file) one confusing parts building package. ’s fairly advanced topic, --large, important ’re developing packages . However, understanding namespaces vital plan submit package CRAN. CRAN requires package plays nicely packages.first start using namespaces, ’ll seem like lot work little gain. However, high quality namespace helps encapsulate package makes self-contained. ensures packages won’t interfere code, code won’t interfere packages, package works regardless environment ’s run.","code":""},{"path":"namespace.html","id":"namespace-motivation","chapter":"13 Namespace","heading":"13.1 Motivation","text":"name suggests, namespaces provide “spaces” “names”. provide context looking value object associated name.Without knowing , ’ve probably already used namespaces. example, ever used :: operator? disambiguates functions name. example, plyr Hmisc provide summarize() function. load plyr, Hmisc, summarize() refer Hmisc version. load packages opposite order, summarize() refer plyr version. can confusing. Instead, can explicitly refer specific functions: Hmisc::summarize() plyr::summarize(). order packages loaded won’t matter.Namespaces make packages self-contained two ways: imports exports. imports defines function one package finds function another. illustrate, consider happens someone changes definition function rely : example, simple nrow() function base R:’s defined terms dim(). happen override dim()\ndefinition? nrow() break?Surprisingly, ! ’s nrow() looks object\ncalled dim(), uses package namespace, finds dim() \nbase environment, dim() created global environment.exports helps avoid conflicts packages specifying functions available outside package (internal functions available within package can’t easily used another package). Generally, want export minimal set functions; fewer export, smaller chance conflict. conflicts aren’t end world can always use :: disambiguate, ’re best avoided possible makes lives users easier.","code":"\nnrow\n#> function (x) \n#> dim(x)[1L]\n#> <bytecode: 0x55ec6a1f8fc8>\n#> <environment: namespace:base>\ndim <- function(x) c(1, 1)\ndim(mtcars)\n#> [1] 1 1\nnrow(mtcars)\n#> [1] 32"},{"path":"namespace.html","id":"search-path","chapter":"13 Namespace","heading":"13.2 Search path","text":"understand namespaces important, need solid understanding search paths. call function, R first find . R first looking global environment. R doesn’t find , looks search path, list packages attached. can see list running search(). example, ’s search path code book:’s important difference loading attaching package. Normally talk loading package think library(), actually attaches package.package installed,Loading load code, data DLLs; register S3 \nS4 methods; run .onLoad() function. loading, \npackage available memory, ’s search\npath, won’t able access components without using ::.\nConfusingly, :: also load package automatically \nisn’t already loaded. ’s rare load package explicitly, \ncan requireNamespace() loadNamespace().Loading load code, data DLLs; register S3 \nS4 methods; run .onLoad() function. loading, \npackage available memory, ’s search\npath, won’t able access components without using ::.\nConfusingly, :: also load package automatically \nisn’t already loaded. ’s rare load package explicitly, \ncan requireNamespace() loadNamespace().Attaching puts package search path. can’t attach \npackage without first loading , library() require() load\nattach package. can see currently attached packages \nsearch().Attaching puts package search path. can’t attach \npackage without first loading , library() require() load\nattach package. can see currently attached packages \nsearch().package isn’t installed, loading (hence attaching) fail error.see differences clearly, consider two ways running expect_that() testthat package. use library(), testthat attached search path. use ::, ’s .four functions make package available. differ based whether load attach, happens package found (.e., throws error returns FALSE).four, ever use two:Use library(x) data analysis scripts. throw error \npackage installed, terminate script. want attach\npackage save typing. Never use library() package.Use library(x) data analysis scripts. throw error \npackage installed, terminate script. want attach\npackage save typing. Never use library() package.Use requireNamespace(\"x\", quietly = TRUE) inside package want \nspecific action (e.g. throw error) depending whether \nsuggested package installed.Use requireNamespace(\"x\", quietly = TRUE) inside package want \nspecific action (e.g. throw error) depending whether \nsuggested package installed.never need use require() (requireNamespace() almost always better), loadNamespace() (needed internal R code). never use require() library() package: instead, use Depends Imports fields DESCRIPTION.Now’s good time come back important issue glossed earlier. ’s difference Depends Imports DESCRIPTION? use one ?Listing package either Depends Imports ensures ’s installed needed. main difference Imports just loads package, Depends attaches . differences. rest advice chapter applies whether package Depends Imports.Unless good reason otherwise, always list packages Imports Depends. ’s good package self-contained, minimises changes global environment (including search path). exception package designed used conjunction another package. example, analogue package builds top vegan. ’s useful without vegan, vegan Depends instead Imports. Similarly, ggplot2 really Depend scales, rather Importing .Now understand importance namespace, let’s dive nitty gritty details. two sides package namespace, imports exports, described NAMESPACE. ’ll learn file looks like next section. section , ’ll learn details exporting importing functions objects.","code":"\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n#> [4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"         \"package:base\"\nold <- search()\ntestthat::expect_equal(1, 1)\nsetdiff(search(), old)\n#> character(0)\nexpect_true(TRUE)\n#> Error in expect_true(TRUE): could not find function \"expect_true\"\n    \nlibrary(testthat)\nexpect_equal(1, 1)\nsetdiff(search(), old)\n#> [1] \"package:testthat\"\nexpect_true(TRUE)"},{"path":"namespace.html","id":"namespace-NAMESPACE","chapter":"13 Namespace","heading":"13.3 The NAMESPACE","text":"following code excerpt NAMESPACE file testthat package.can see NAMESPACE file looks bit like R code. line contains directive: S3method(), export(), exportClasses(), . directive describes R object, says whether ’s exported package used others, ’s imported another package used locally.total, eight namespace directives. Four describe exports:export(): export functions (including S3 S4 generics).exportPattern(): export functions match pattern.exportClasses(), exportMethods(): export S4 classes methods.S3method(): export S3 methods.four describe imports:import(): import functions package.importFrom(): import selected functions (including S4 generics).importClassesFrom(), importMethodsFrom(): import S4 classes methods.useDynLib(): import function C. described \ndetail compiled code.don’t recommend writing directives hand. Instead, chapter ’ll learn generate NAMESPACE file roxygen2. three main advantages using roxygen2:Namespace definitions live next associated function, \nread code ’s easier see ’s imported exported.Namespace definitions live next associated function, \nread code ’s easier see ’s imported exported.Roxygen2 abstracts away details NAMESPACE. \nneed learn one tag, @export, automatically generate right\ndirective functions, S3 methods, S4 methods S4 classes.Roxygen2 abstracts away details NAMESPACE. \nneed learn one tag, @export, automatically generate right\ndirective functions, S3 methods, S4 methods S4 classes.Roxygen2 makes NAMESPACE tidy. matter many times use\n@importFrom foo bar ’ll get one importFrom(foo, bar) \nNAMESPACE. makes easy attach import directives every function\nneed , rather trying manage one central place.Roxygen2 makes NAMESPACE tidy. matter many times use\n@importFrom foo bar ’ll get one importFrom(foo, bar) \nNAMESPACE. makes easy attach import directives every function\nneed , rather trying manage one central place.Note can choose use roxygen2 generate just NAMESPACE, just man/*.Rd, . don’t use namespace related tags, roxygen2 won’t touch NAMESPACE. don’t use documentation related tags, roxygen2 won’t touch man/.","code":"# Generated by roxygen2 (4.0.2): do not edit by hand\nS3method(as.character,expectation)\nS3method(compare,character)\nexport(auto_test)\nexport(auto_test_package)\nexport(colourise)\nexport(context)\nexportClasses(ListReporter)\nexportClasses(MinimalReporter)\nimportFrom(methods,setRefClass)\nuseDynLib(testthat,duplicate_)\nuseDynLib(testthat,reassign_function)"},{"path":"namespace.html","id":"namespace-workflow","chapter":"13 Namespace","heading":"13.4 Workflow","text":"Generating namespace roxygen2 just like generating function documentation roxygen2. use roxygen2 blocks (starting #') tags (starting @). workflow :Add roxygen comments .R files.Add roxygen comments .R files.Run devtools::document() (press Ctrl/Cmd + Shift + D RStudio) \nconvert roxygen comments .Rd files.Run devtools::document() (press Ctrl/Cmd + Shift + D RStudio) \nconvert roxygen comments .Rd files.Look NAMESPACE run tests check specification \ncorrect.Look NAMESPACE run tests check specification \ncorrect.Rinse repeat correct functions exported.Rinse repeat correct functions exported.","code":""},{"path":"namespace.html","id":"exports","chapter":"13 Namespace","heading":"13.5 Exports","text":"function usable outside package, must export . create new package usethis::create_package(), produces temporary NAMESPACE exports everything package doesn’t start . (single period). ’re just working locally, ’s fine export everything package. However, ’re planning sharing package others, ’s really good idea export needed functions. reduces chances conflict another package.export object, put @export roxygen block. example:generate export(), exportMethods(), exportClass() S3method() depending type object.export functions want people use. Exported functions must documented, must cautious changing interface — people using ! Generally, ’s better export little much. ’s easy export things didn’t ; ’s hard stop exporting function might break existing code. Always err side caution, simplicity. ’s easier give people functionality take away stuff ’re used .believe packages wide audience strive one thing well. functions package related single problem (set closely related problems). functions related purpose exported. example, packages utils.R file contains many small functions useful , aren’t part core purpose packages. never export functions.said, ’re creating package , ’s far less important disciplined. know ’s package, ’s fine local “misc” package contains passel functions find useful. don’t think release package.following sections describe export ’re using S3, S4 RC.","code":"\n#' @export\nfoo <- function(x, y, z) {\n  ...\n}\n# Defaults for NULL values\n`%||%` <- function(a, b) if (is.null(a)) b else a\n\n# Remove NULLs from a list\ncompact <- function(x) {\n  x[!vapply(x, is.null, logical(1))]\n}"},{"path":"namespace.html","id":"export-s3","chapter":"13 Namespace","heading":"13.5.1 S3","text":"want others able create instances S3 class, @export constructor function. S3 generics just regular R functions, can @export like functions.S3 methods represent complicated case four different scenarios:method exported generic: export every method.method exported generic: export every method.method internal generic: technically, don’t need export\nmethods. However, recommend exporting every S3 method write\n’s simpler makes less likely ’ll introduce hard \nfind bugs. Use devtools::missing_s3() list S3 methods \n’ve forgotten export.method internal generic: technically, don’t need export\nmethods. However, recommend exporting every S3 method write\n’s simpler makes less likely ’ll introduce hard \nfind bugs. Use devtools::missing_s3() list S3 methods \n’ve forgotten export.method generic required package. ’ll need import \ngeneric (see ), export method.method generic required package. ’ll need import \ngeneric (see ), export method.method generic suggested package. Namespace directives must\nrefer available functions, can reference suggested packages.\n’s possible use package hooks code add run-time,\nsufficiently complicated currently wouldn’t recommend .\nInstead, ’ll design package dependencies way avoids \nscenario.method generic suggested package. Namespace directives must\nrefer available functions, can reference suggested packages.\n’s possible use package hooks code add run-time,\nsufficiently complicated currently wouldn’t recommend .\nInstead, ’ll design package dependencies way avoids \nscenario.","code":""},{"path":"namespace.html","id":"export-s4","chapter":"13 Namespace","heading":"13.5.2 S4","text":"S4 classes: want others able extend class, @export .\nwant others create instances class extend ,\n@export constructor function, class.S4 generics: @export want generic publicly usable.S4 methods: need @export methods generics define. think ’s good idea @export every method: way don’t need remember whether created generic.","code":"\n# Can extend and create with new(\"A\", ...)\n#' @export\nsetClass(\"A\")\n\n# Can extend and create with new(\"B\", ...). You can use B()\n# to construct instances in your own code, but others can not\n#' @export\nB <- setClass(\"B\")\n\n# Can create with C(...) and new(\"C\", ...), but can't create\n# a subclass that extends C\n#' @export C\nC <- setClass(\"C\")\n\n# Can extend and create with D(...) or new(\"D\", ...)\n#' @export D\n#' @exportClass D\nD <- setClass(\"D\")"},{"path":"namespace.html","id":"export-rc","chapter":"13 Namespace","heading":"13.5.3 RC","text":"principles used S4 classes apply . Note due way RC currently implemented, ’s typically impossible classes extended outside package.","code":""},{"path":"namespace.html","id":"export-data","chapter":"13 Namespace","heading":"13.5.4 Data","text":"’ll learn data, files live data/ don’t use usual namespace mechanism don’t need exported.","code":""},{"path":"namespace.html","id":"imports","chapter":"13 Namespace","heading":"13.6 Imports","text":"NAMESPACE also controls external functions can used package without use ::.’s confusing DESCRIPTION (Imports field) \nNAMESPACE (import directives) seem involved imports. just unfortunate choice names. Imports field really nothing functions imported namespace: just makes sure package installed package . doesn’t make functions available. need import functions exactly way regardless whether package attached.Depends just convenience user: package attached, also attaches packages listed Depends. package loaded, packages Depends loaded, attached, need qualify function names :: specifically import .’s common packages listed Imports DESCRIPTION, NAMESPACE. fact, recommend: list package DESCRIPTION ’s installed, always refer explicitly pkg::fun(). Unless strong reason , ’s better explicit. ’s little work write, lot easier read come back code future. converse true. Every package mentioned NAMESPACE must also present Imports Depends fields.","code":""},{"path":"namespace.html","id":"import-r","chapter":"13 Namespace","heading":"13.6.1 R functions","text":"using just functions another package, recommendation note package name Imports: field DESCRIPTION file call function(s) explicitly using ::, e.g., pkg::fun().using functions repeatedly, can avoid :: importing function @importFrom pkg fun. also small performance benefit, :: adds approximately 5 µs function evaluation time. Operators can also imported similar manner, e.g., @importFrom magrittr %>%.Alternatively, repeatedly using many functions another package, can import using @import package. least recommended solution makes code harder read (can’t tell function coming ), @import many packages, increases chance conflicting function names.","code":""},{"path":"namespace.html","id":"import-s3","chapter":"13 Namespace","heading":"13.6.2 S3","text":"S3 generics just functions, rules functions apply. S3 methods always accompany generic, long can access generic (either implicitly explicitly), methods also available. words, don’t need anything special S3 methods. long ’ve imported generic, methods also available.","code":""},{"path":"namespace.html","id":"import-s4","chapter":"13 Namespace","heading":"13.6.3 S4","text":"use classes defined another package, place @importClassesFrom package ClassA ClassB ... next classes inherit imported classes, next methods implement generic imported classes.use generics defined another package, place @importMethodsFrom package GenericA GenericB ... next methods use imported generics.Since S4 implemented methods package, need make sure ’s available. easy overlook methods package always available search path ’re working interactively, ’s automatically loaded Rscript, tool often used run R command line.Pre R 3.2.0: Depends: methods DESCRIPTION.\nPost R 3.2.0: Imports: methods DESCRIPTION.Pre R 3.2.0: Depends: methods DESCRIPTION.\nPost R 3.2.0: Imports: methods DESCRIPTION.Since ’ll using lot functions methods,\n’ll probably also want import complete package :\n\n#' @import methods\nNULL\nmight just want import commonly used functions:\n\n#' @importFrom methods setClass setGeneric setMethod setRefClass\nNULL\n’m documenting “NULL” make clear directives don’t\napply just one function. doesn’t matter go, \npackage docs, described documenting packages, ’s\nnatural place put .Since ’ll using lot functions methods,\n’ll probably also want import complete package :might just want import commonly used functions:’m documenting “NULL” make clear directives don’t\napply just one function. doesn’t matter go, \npackage docs, described documenting packages, ’s\nnatural place put .","code":"\n#' @import methods\nNULL\n#' @importFrom methods setClass setGeneric setMethod setRefClass\nNULL"},{"path":"namespace.html","id":"import-src","chapter":"13 Namespace","heading":"13.6.4 Compiled functions","text":"make C/C++ functions available R, see compiled code.","code":""},{"path":"data.html","id":"data","chapter":"14 External data","heading":"14 External data","text":"’s often useful include data package. ’re releasing package broad audience, ’s way provide compelling use cases package’s functions. ’re releasing package specific audience, interested either data (e.g., NZ census data) subject (e.g., demography), ’s way distribute data along documentation (long audience R users).three main ways include data package, depending want able use :want store binary data make available user, put \ndata/. best place put example datasets.want store binary data make available user, put \ndata/. best place put example datasets.want store parsed data, make available user,\nput R/sysdata.rda. best place put data \nfunctions need.want store parsed data, make available user,\nput R/sysdata.rda. best place put data \nfunctions need.want store raw data, put inst/extdata.want store raw data, put inst/extdata.simple alternative three options include source package, either creating hand, using dput() serialise existing data set R code.possible location described detail .","code":""},{"path":"data.html","id":"data-data","chapter":"14 External data","heading":"14.1 Exported data","text":"common location package data (surprise!) data/. file directory .rda (.RData) file created save() containing single object (name file). easiest way adhere rules use usethis::use_data():’s possible use types files, don’t recommend .rda files already fast, small explicit. options described data(). larger datasets, may want experiment compression setting. default bzip2, sometimes gzip xz can create smaller files.DESCRIPTION contains LazyData: true, datasets lazily loaded. means won’t occupy memory use . following example shows memory usage loading nycflights13 package. can see memory usage doesn’t change inspect flights dataset stored inside package.recommend always include LazyData: true DESCRIPTION. usethis::create_package() . text slated revision 2nd edition. TL;DR include LazyData: true DESCRIPTION unless actually ship data package. usethis v2.1.0 changes behaviour create_package() use_data() accordingly.Often, data include data/ cleaned version raw data ’ve gathered elsewhere. highly recommend taking time include code used source version package. make easy update reproduce version data. suggest put code data-raw/. don’t need bundled version package, also add .Rbuildignore. one step :can see approach practice recent data packages. ’ve creating packages data rarely change, multiple packages can use examples:babynamesfueleconomynasaweathernycflights13usdanutrients","code":"\nx <- sample(1000)\nusethis::use_data(x, mtcars)\npryr::mem_used()\n#> 50.6 MB\nlibrary(nycflights13)\npryr::mem_used()\n#> 59 MB\n\ninvisible(flights)\npryr::mem_used()\n#> 99.7 MB\nusethis::use_data_raw()"},{"path":"data.html","id":"documenting-data","chapter":"14 External data","heading":"14.1.1 Documenting datasets","text":"Objects data/ always effectively exported (use slightly different mechanism NAMESPACE details important). means must documented. Documenting data like documenting function minor differences. Instead documenting data directly, document name dataset save R/. example, roxygen2 block used document diamonds data ggplot2 saved R/data.R looks something like :two additional tags important documenting datasets:@format gives overview dataset. data frames, \ninclude definition list describes variable. ’s usually\ngood idea describe variables’ units .@format gives overview dataset. data frames, \ninclude definition list describes variable. ’s usually\ngood idea describe variables’ units .@source provides details got data, often \\url{}.@source provides details got data, often \\url{}.Never @export data set.","code":"\n#' Prices of 50,000 round cut diamonds.\n#'\n#' A dataset containing the prices and other attributes of almost 54,000\n#' diamonds.\n#'\n#' @format A data frame with 53940 rows and 10 variables:\n#' \\describe{\n#'   \\item{price}{price, in US dollars}\n#'   \\item{carat}{weight of the diamond, in carats}\n#'   ...\n#' }\n#' @source \\url{http://www.diamondse.info/}\n\"diamonds\""},{"path":"data.html","id":"data-sysdata","chapter":"14 External data","heading":"14.2 Internal data","text":"Sometimes functions need pre-computed data tables. put data/ ’ll also available package users, appropriate. Instead, can save R/sysdata.rda. example, two colour-related packages, munsell dichromat, use R/sysdata.rda store large tables colour data.can use usethis::use_data() create file argument internal = TRUE:, make data reproducible ’s good idea include code used generate . Put data-raw/.Objects R/sysdata.rda exported (shouldn’t ), don’t need documented. ’re available inside package.","code":"\nx <- sample(1000)\nusethis::use_data(x, mtcars, internal = TRUE)"},{"path":"data.html","id":"data-extdata","chapter":"14 External data","heading":"14.3 Raw data","text":"want show examples loading/parsing raw data, put original files inst/extdata. package installed, files (folders) inst/ moved one level top-level directory (can’t names like R/ DESCRIPTION). refer files inst/extdata (whether installed ), use system.file(). example, readr package uses inst/extdata store delimited files use examples:Beware: default, file exist, system.file() return error - just returns empty string:want error message file exist, add argument mustWork = TRUE:","code":"\nsystem.file(\"extdata\", \"mtcars.csv\", package = \"readr\")\n#> [1] \"/home/runner/work/_temp/Library/readr/extdata/mtcars.csv\"\nsystem.file(\"extdata\", \"iris.csv\", package = \"readr\")\n#> [1] \"\"\nsystem.file(\"extdata\", \"iris.csv\", package = \"readr\", mustWork = TRUE)\n#> Error in system.file(\"extdata\", \"iris.csv\", package = \"readr\", mustWork = TRUE): no file found"},{"path":"data.html","id":"other-data","chapter":"14 External data","heading":"14.4 Other data","text":"Data tests: ’s ok put small files directly test directory.\nremember unit tests testing correctness, performance, keep\nsize small.Data tests: ’s ok put small files directly test directory.\nremember unit tests testing correctness, performance, keep\nsize small.Data vignettes. want show work already loaded\ndataset, put data data/. want show load raw data,\nput data inst/extdata.Data vignettes. want show work already loaded\ndataset, put data data/. want show load raw data,\nput data inst/extdata.","code":""},{"path":"data.html","id":"data-cran","chapter":"14 External data","heading":"14.5 CRAN notes","text":"Generally, package data smaller megabyte - ’s larger ’ll need argue exemption. usually easier data package won’t updated frequently. also make sure data optimally compressed:Run tools::checkRdaFiles() determine best compression file.Run tools::checkRdaFiles() determine best compression file.Re-run usethis::use_data() compress set optimal value.\n’ve lost code recreating files, can use\ntools::resaveRdaFiles() re-save place.Re-run usethis::use_data() compress set optimal value.\n’ve lost code recreating files, can use\ntools::resaveRdaFiles() re-save place.","code":""},{"path":"src.html","id":"src","chapter":"15 Compiled code","heading":"15 Compiled code","text":"R high-level, expressive language. expressivity comes price: speed. ’s incorporating low-level, compiled language like C C++ can powerfully complement R code. C C++ often require lines code (careful thought) solve problem, can orders magnitude faster R.Unfortunately, teaching program C C++ beyond scope book. ’d like learn, recommend starting C++ Rcpp package. Rcpp makes easy connect C++ R. ’d also recommend using RStudio many tools facilitate entire process. Start reading “Rewriting R code C++”, freely available book chapter Advanced R: gently introduces language translating examples familiar R code C++. Next, check Rcpp book resources listed learning .","code":""},{"path":"src.html","id":"cpp","chapter":"15 Compiled code","heading":"15.1 C++","text":"set package Rcpp, run::Create src/ directory hold .cpp files.Create src/ directory hold .cpp files.Add Rcpp LinkingTo Imports fields DESCRIPTION.Add Rcpp LinkingTo Imports fields DESCRIPTION.Set .gitignore file make sure don’t accidentally check \ncompiled files (learn git).Set .gitignore file make sure don’t accidentally check \ncompiled files (learn git).Tell two roxygen tags need add package:\n\n#' @useDynLib -package-name\n#' @importFrom Rcpp sourceCpp\nNULL\n#> NULLTell two roxygen tags need add package:","code":"\nusethis::use_rcpp()\n#' @useDynLib your-package-name\n#' @importFrom Rcpp sourceCpp\nNULL\n#> NULL"},{"path":"src.html","id":"cpp-workflow","chapter":"15 Compiled code","heading":"15.1.1 Workflow","text":"’re set , basic workflow now familiar:Create new C++ file:\n\ndefault template looks like :\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// simple example exporting C++ function R. can\n// source function R session using Rcpp::sourceCpp \n// function (via Source button editor toolbar)\n\n// using Rcpp click Help button editor toolbar\n\n// [[Rcpp::export]]\nint timesTwo(int x) {\n   return x * 2;\n}\nincludes basic function instructions get started. \ntwo important parts header #include, special\nattribute // [[Rcpp::export]].Create new C++ file:default template looks like :includes basic function instructions get started. \ntwo important parts header #include, special\nattribute // [[Rcpp::export]].Generate necessary modifications NAMESPACE documenting\nCtrl/Cmd + Shift + D.Generate necessary modifications NAMESPACE documenting\nCtrl/Cmd + Shift + D.Click Build & Reload build pane, press Ctrl/Cmd + Shift + B. can\ncontinue use standard devtools::load_all() process \nrisky. ’re loading unloading C code, chances \ncorrupting memory high, ’re better safer, \nslower, “Build & Reload” installs package restarts R.Click Build & Reload build pane, press Ctrl/Cmd + Shift + B. can\ncontinue use standard devtools::load_all() process \nrisky. ’re loading unloading C code, chances \ncorrupting memory high, ’re better safer, \nslower, “Build & Reload” installs package restarts R.Run timesTwo(10) console check works.Run timesTwo(10) console check works.Behind scenes, “Build reload” lot work . :Set R environment compile code warn ’re missing\nnecessary pieces.Set R environment compile code warn ’re missing\nnecessary pieces.Call Rcpp::compileAttributes(). inspects .cpp functions\nlooking attributes form // [[Rcpp::export]]. finds\none, generates code needed make function available \nR, creates src/RcppExports.cpp R/RcppExports.R. never\nmodify files hand.Call Rcpp::compileAttributes(). inspects .cpp functions\nlooking attributes form // [[Rcpp::export]]. finds\none, generates code needed make function available \nR, creates src/RcppExports.cpp R/RcppExports.R. never\nmodify files hand.Build DLL (dynamically linked library) make available R.Build DLL (dynamically linked library) make available R.","code":"#include <Rcpp.h>\nusing namespace Rcpp;\n\n// Below is a simple example of exporting a C++ function to R. You can\n// source this function into an R session using the Rcpp::sourceCpp \n// function (or via the Source button on the editor toolbar)\n\n// For more on using Rcpp click the Help button on the editor toolbar\n\n// [[Rcpp::export]]\nint timesTwo(int x) {\n   return x * 2;\n}"},{"path":"src.html","id":"cpp-man","chapter":"15 Compiled code","heading":"15.1.2 Documentation","text":"exported C++ function automatically gets wrapper function (located R/RcppExports.R). example, R timesTwo() function looks like:uses base function .Call() execute C function timesTwo provided “mypackage”. can use roxygen2 document like regular R function. instead using #' comments use //', C++ convention:generates roxygen comments R/RcppExports.R:distinctions two export directives important:[[Rcpp::export]] makes C++ function available R. \ntrouble remembering exact details, note everything comes \ntwos: Two /, two [, two : two ].[[Rcpp::export]] makes C++ function available R. \ntrouble remembering exact details, note everything comes \ntwos: Two /, two [, two : two ].@export makes R wrapper function available outside package \nadding NAMESPACE.@export makes R wrapper function available outside package \nadding NAMESPACE.","code":"\ntimesTwo <- function(x) {\n  .Call('timesTwo', PACKAGE = 'mypackage', x)\n}//' Multiply a number by two\n//' \n//' @param x A single integer.\n//' @export\n// [[Rcpp::export]]\nint timesTwo(int x) {\n   return x * 2;\n}\n#' Multiply a number by two\n#' \n#' @param x A single integer.\n#' @export\ntimesTwo <- function(x) {\n  .Call('timesTwo', PACKAGE = 'mypackage', x)\n}"},{"path":"src.html","id":"cpp-export","chapter":"15 Compiled code","heading":"15.1.3 Exporting C++ code","text":"make C++ code callable C++ code packages, add:generate header file, inst/include/mypackage.h can included packages (low-level details described Exporting C code). See “Rcpp Attributes” details, including combine hand-written automatically generated header files.","code":"// [[Rcpp::interfaces(r, cpp)]]"},{"path":"src.html","id":"cpp-import","chapter":"15 Compiled code","heading":"15.1.4 Importing C++ code","text":"use C++ code another package:DESCRIPTION, add LinkingTo: otherPackage. Confusingly nothing\nlinker. ’s called LinkingTo adds\notherPackage/include include path, allowing dynamically\n“link ” code via headers.DESCRIPTION, add LinkingTo: otherPackage. Confusingly nothing\nlinker. ’s called LinkingTo adds\notherPackage/include include path, allowing dynamically\n“link ” code via headers.C++ file, add:\n#include <otherPackage.h>C++ file, add:C++ functions otherPackage included otherPackage\nnamespace. Use otherPackage::foo() access functions, make\navailable globally using namespace otherPackage.C++ functions otherPackage included otherPackage\nnamespace. Use otherPackage::foo() access functions, make\navailable globally using namespace otherPackage.","code":"#include <otherPackage.h>"},{"path":"src.html","id":"cpp-best-practices","chapter":"15 Compiled code","heading":"15.1.5 Best practices","text":"print output use Rcout << ... (cout << ...). prints \nright place, might GUI console file (sink()\nactive)print output use Rcout << ... (cout << ...). prints \nright place, might GUI console file (sink()\nactive)long-running loops, regularly run Rcpp::checkUserInterrupt(). \naborts C++ user pressed Ctrl + C Escape R.long-running loops, regularly run Rcpp::checkUserInterrupt(). \naborts C++ user pressed Ctrl + C Escape R.Use .h extension headers include files. (don’t\nR CMD check complain).Use .h extension headers include files. (don’t\nR CMD check complain).Follow Martyn Plummer’s recommendations \nPortable C++ R packages.Follow Martyn Plummer’s recommendations \nPortable C++ R packages.Whenever use C++ code package, need clean \npackage unloaded. writing .onUnload()\nfunction unloads DLL:\n\n.onUnload <- function (libpath) {\n  library.dynam.unload(\"mypackage\", libpath)\n}Whenever use C++ code package, need clean \npackage unloaded. writing .onUnload()\nfunction unloads DLL:Use clang instead gcc compile C++ code: gives much\nbetter error messages. can make clang default creating \n.R/Makevars (linux mac) .R/Makevars.win (windows) file \nhome directory contains:\nCXX=clang++\n(don’t know home directory path.expand(\"~\") \ntell .)Use clang instead gcc compile C++ code: gives much\nbetter error messages. can make clang default creating \n.R/Makevars (linux mac) .R/Makevars.win (windows) file \nhome directory contains:(don’t know home directory path.expand(\"~\") \ntell .)speed compilation linux mac, install ccache, replace\n~/.R/Makevars :\nCC=ccache clang -Qunused-arguments\nCXX=ccache clang++ -Qunused-arguments\nCCACHE_CPP2=yesTo speed compilation linux mac, install ccache, replace\n~/.R/Makevars :","code":"\n.onUnload <- function (libpath) {\n  library.dynam.unload(\"mypackage\", libpath)\n}CXX=clang++CC=ccache clang -Qunused-arguments\nCXX=ccache clang++ -Qunused-arguments\nCCACHE_CPP2=yes"},{"path":"src.html","id":"clang","chapter":"15 Compiled code","heading":"15.2 C","text":"’re writing new compiled code, ’s almost always better use Rcpp. ’s less work, consistent, better documented, better tools. However, reasons choose C:’re working older package already uses C API.’re binding existing C library.two ways call C functions R: .C() .Call(). .C() quick dirty way call C function doesn’t know anything R .C() automatically converts R vectors corresponding C types. .Call() flexible, work: C function needs use R API convert inputs standard C data types.","code":""},{"path":"src.html","id":"getting-started-with-.call","chapter":"15 Compiled code","heading":"15.2.1 Getting started with .Call()","text":"call C function R, first need C function! R package, C code lives .c files src/. ’ll need include two header files:(Yes, including <Rinternals.h> seems like bad form. top , doesn’t actually give access “internal” internal API unless set additional flags. default just gives access “public” internal API, necessary done safety’s sake. Yes, confusing.)headers allow access R’s C API. Unfortunately API well documented. ’d recommend starting notes R’s C interface. , read “R API” “Writing R Extensions”. number exported functions documented, ’ll also need read R source code figure details.’s bare minimum need know: C functions talk R must use SEXP type inputs outputs. SEXP, short S expression, C struct used represent every type object R. C function typically starts converting SEXPs atomic C objects, ends converting C objects back SEXP. (R API designed conversions often don’t require copying.) following table lists functions convert length one R vectors C scalars:now enough information write simple C function can add two numbers:call R .Call():first argument .Call(), add_, come ? comes @useDynLib, creates line NAMESPACE looks like:directive instructs R create object called add_ describes C function pointer:.Call() takes pointer C function calls . R objects C type (SEXP) need make sure arguments type expect. Either R function, C function, just accept R crash every time accidentally supply wrong type input.complicated part working .Call() interface memory-management. Whenever create R-level data structure, must PROTECT() garbage collector doesn’t try free , UNPROTECT() end function. topic beyond scope chapter, can learn http://adv-r..co.nz/C-interface.html#c-vectors.","code":"#include <R.h>\n#include <Rinternals.h>#include <R.h>\n#include <Rinternals.h>\n\nSEXP add_(SEXP x_, SEXP y_) {\n  double x = asReal(x_);\n  double y = asReal(y_);\n  \n  double sum = x + y;\n  \n  return ScalarReal(sum);\n}\n#' @useDynLib mypackage add_\nadd <- function(x, y) .Call(add_, x, y)useDynLib(mypackage, add_)\nmypackage:::add_\n#> $name\n#> [1] \"add_\"\n#> \n#> $address\n#> <pointer: 0x107be3f40>\n#> $package\n#> NULL\n#> \n#> attr(,\"class\")\n#> [1] \"NativeSymbolInfo\""},{"path":"src.html","id":"getting-started-with-.c","chapter":"15 Compiled code","heading":"15.2.2 Getting started with .C()","text":".C() simpler .Call() can useful already standard C code. Since never create R objects .C(), never need worry memory management. use , first write void C function, using -place modification function parameters return values:like .Call() create R wrapper:(extract 3rd element result corresponds parameter.).C() automatically converts back forth R vectors C equivalents:Note .C() assumes function doesn’t know deal missing values throw error arguments contain NA. can correctly handle missing values, set NAOK = TRUE call .C().can learn .C() help, ?.C R-extensions.","code":"void add_(double* x, double* y, double* out) {\n  out[0] = x[0] + y[0];\n}\n#' @useDynLib mypackage add_\nadd <- function(x, y) {\n  .C(add_, x, y, numeric(1))[[3]]\n}"},{"path":"src.html","id":"c-workflow","chapter":"15 Compiled code","heading":"15.2.3 Workflow","text":"usual workflow still applies:Modify C code.Build reload package Ctrl/Cmd + Shift + BExperiment console.first time add @useDynLib, ’ll also need run devtools::document() (Ctrl/Cmd + Shift + D) reload package.","code":""},{"path":"src.html","id":"c-export","chapter":"15 Compiled code","heading":"15.2.4 Exporting C code","text":"R packages need provide DLLs can relocated; DLLs work regardless live disk. R users don’t build packages source. Instead, get binaries CRAN can get installed many different places. need relocatable DLLs adds steps job importing exporting C code R packages (problem arises C++, Rcpp attributes automate manual steps described ).R solves problem using function registration. export .Call() C function, register R_RegisterCCallable(). import .Call() C function, get pointer R_GetCCallable(). Similar techniques available .C() C functions, beyond scope book. ’ll see , user-friendly package tasks, users package can ignore details simply include header file.[Sidebar: Confusingly, ’s another type function registration. Instead registering C functions using namespace (.e. @useDynLib pkg fun), can register R_registerRoutines() @useDynLib mypackage, .registration = TRUE. learn details read Registering native extensions “Writing R extensions”.]register function, call R_RegisterCCallable(), defined <R_ext/Rdynload.h>. Function registration done function called R_init_<mypackage>. function called automatically “mypackage” DLL loaded. R_RegisterCCallable() three arguments:pointer DLL.name function.pointer function, cast DL_FUNC (.e. dynamically\nloaded function).following code registers add_() function defined :doesn’t matter code lives, ’s usually put file called src/mypackage-init.c.access registered function another package, call R_GetCCallable(). two arguments, package name function name. returns function pointer. function pointer type information, always wrapped helper function defines inputs:Rather relying package imports C code correctly, instead . Write inst/include/mypackageAPI.h provides wrapper function exported function. popular package xts. Download source package look include/ directory see .","code":"#include \"add.h\"\n#include <R_ext/Rdynload.h>\n\nvoid R_init_mypackage(DllInfo *info) {\n  R_RegisterCCallable(\"mypackage\", \"add\",  (DL_FUNC) &add_);\n}#include <R_ext/Rdynload.h>\n#include <R.h>\n#include <Rinternals.h>\n\nSEXP add_(SEXP x, SEXP y) {\n  static SEXP(*fun)(SEXP, SEXP) = NULL;\n  if (fun == NULL)\n    fun = (SEXP(*)(SEXP, SEXP)) R_GetCCallable(\"mypackage\", \"add\");\n  return fun(x, y);\n}"},{"path":"src.html","id":"c-import","chapter":"15 Compiled code","heading":"15.2.5 Importing C code","text":"Using C code another package varies based package implemented:uses system described , need LinkingTo: otherPackage\nDESCRIPTION, #include otherPackageAPI.h C file. (Remember\nLinkingTo linker, actually affects include path).uses system described , need LinkingTo: otherPackage\nDESCRIPTION, #include otherPackageAPI.h C file. (Remember\nLinkingTo linker, actually affects include path).registers functions, doesn’t provide header file, ’ll\nneed write wrapper . Since ’re using header\nfiles package, use Imports LinkingTo. also need \nmake sure package loaded. can importing function\n@importFrom mypackage foo, adding requireNamespace(\"mypackage\",  quietly = TRUE) .onLoad().registers functions, doesn’t provide header file, ’ll\nneed write wrapper . Since ’re using header\nfiles package, use Imports LinkingTo. also need \nmake sure package loaded. can importing function\n@importFrom mypackage foo, adding requireNamespace(\"mypackage\",  quietly = TRUE) .onLoad().doesn’t register functions, can’t use . ’ll \nask maintainer nicely even provide pull request.doesn’t register functions, can’t use . ’ll \nask maintainer nicely even provide pull request.","code":""},{"path":"src.html","id":"c-best-practices","chapter":"15 Compiled code","heading":"15.2.6 Best practices","text":"Avoid calls assert(), abort() exit(): kill \nR process, just C code. Instead, use error() \nequivalent calling stop() R.Avoid calls assert(), abort() exit(): kill \nR process, just C code. Instead, use error() \nequivalent calling stop() R.print output use Rprintf(), printf(). always prints \nright place, whether ’s GUI console file (sink() \nactive).print output use Rprintf(), printf(). always prints \nright place, whether ’s GUI console file (sink() \nactive).long-running loops, regularly call R_CheckUserInterrupt() allow\nuser interrupt C code.long-running loops, regularly call R_CheckUserInterrupt() allow\nuser interrupt C code.Don’t use C’s random number generators (like rand() random()),\ninstead use C API R’s rngs: unif_rand(), norm_rand(), etc.\nNote caveats “Random number generation” - must call GetRNGstate() \nPutRNGstate() .Don’t use C’s random number generators (like rand() random()),\ninstead use C API R’s rngs: unif_rand(), norm_rand(), etc.\nNote caveats “Random number generation” - must call GetRNGstate() \nPutRNGstate() .Use R macros ISNAN(x) R_FINITE(x) check NaNs infinite\nvalues. work platforms C99 isnan() isfinite().Use R macros ISNAN(x) R_FINITE(x) check NaNs infinite\nvalues. work platforms C99 isnan() isfinite().Like C++, whenever use C code package, unload \nDLL package unloaded:\n\n.onUnload <- function (libpath) {\n  library.dynam.unload(\"mypackage\", libpath)\n}Like C++, whenever use C code package, unload \nDLL package unloaded:Use clang instead gcc compile C code: gives much\nbetter error messages. can make clang default creating \n~/.R/Makevars contains:\nCC=clangUse clang instead gcc compile C code: gives much\nbetter error messages. can make clang default creating \n~/.R/Makevars contains:","code":"\n.onUnload <- function (libpath) {\n  library.dynam.unload(\"mypackage\", libpath)\n}CC=clang"},{"path":"src.html","id":"src-debugging","chapter":"15 Compiled code","heading":"15.3 Debugging compiled code","text":"’s possible, little extra work, use interactive debugger debug C/C++ way can use browser() debug() debug R code. Unfortunately won’t able use RStudio, ’ll run R command line.Open shell (e.g. Tools | Shell…) start R typing:start either lldb gdb, debuggers work code produced clang gcc respectively. Like R, lldb gdb provide REPL, run-eval-print loop enter commands look results. examples ’ll show results lldb, use (output gdb similar). interactive command ’ll tell explicit, long, lldb command short, cryptic, gdb command. lldb understand gdb commands, can use commands either lldb, depending whether choose explicit terse.’ve started debugger, start R typing process start (lldb) run (gdb). Now C/C++ code crashes ’ll dumped interactive debugger instead getting cryptic error message crash.Let’s start simple C++ function writes memory doesn’t “”:Use devtools::load_all() load current package. copy paste code creates bug. ’s crash report package working :tells us crash occurred EXC_BAD_ACCESS - one common types crash C/C++ code. Helpfully, lldb shows exactly line C++ code caused problem: vw-distance.cpp:54. Often just knowing problem occurs enough fix . ’re also now interactive prompt. many commands can run explore ’s going . useful listed :See list commands: help.See list commands: help.Show location callstack thread backtrace/bt. \nprint list calls leading error, much like traceback()\nR. Navigate callstack frame select <n>/frame <n>, \n.Show location callstack thread backtrace/bt. \nprint list calls leading error, much like traceback()\nR. Navigate callstack frame select <n>/frame <n>, \n.Evaluate next expression thread step-/next, step \nthread step-/step. Continue executing rest code \nthread step-/finishEvaluate next expression thread step-/next, step \nthread step-/step. Continue executing rest code \nthread step-/finishShow variables defined current frame frame variable/\ninfo locals, print value single variable \nframe variable <var>/p <var>.Show variables defined current frame frame variable/\ninfo locals, print value single variable \nframe variable <var>/p <var>.Instead waiting crash occur can also set breakpoints code. , start debugger, run R, :Press Ctrl + CPress Ctrl + CType breakpoint set --file foo.c --line 12/break foo.c:12.Type breakpoint set --file foo.c --line 12/break foo.c:12.process continue/c go back R console. Now run C code\n’re interested , debugger stop gets \nspecified line.process continue/c go back R console. Now run C code\n’re interested , debugger stop gets \nspecified line.can also set breakpoint C++ exception: allows figure exactly C++ error occurs:Press Ctrl + CPress Ctrl + CType breakpoint set -E c++.Type breakpoint set -E c++.process continue/c go back R console. Now exception\nthrown C++ code (R’s C API wrapped Rcpp code), \ndebugger stop.process continue/c go back R console. Now exception\nthrown C++ code (R’s C API wrapped Rcpp code), \ndebugger stop.Finally, can also use debugger code stuck infinite loop. Press Ctrl + C break debugger ’ll see line code causing problem.","code":"# If you compile with clang\nR --debugger=lldb\n# If you compile with gcc\nR --debugger=gdb\nRcpp::cppFunction(\"\nbool mistake() {\n  NumericVector x(1);\n  int n = INT_MAX;\n  x[n] = 0;\n  return true;\n}\n\", plugins = \"debug\", verbose = TRUE, rebuild = TRUE)\nmistake()Process 32743 stopped\n* thread #1: tid = 0x1f79f6, 0x... gggeom.so...`\n   frame #0: 0x0.. gggeom.so`vw_distance(x=..., y=...) + ... at vw-distance.cpp:54\n   51        int prev_idx = prev[idx];\n   52   \n   53       next[prev[idx]] = next_idx;\n-> 54       prev[next[idx]] = prev_idx;\n   55       prev[idx] = -1;\n   56       next[idx] = -1;\n   57"},{"path":"src.html","id":"make","chapter":"15 Compiled code","heading":"15.4 Makefiles","text":"makefiles beyond scope book, useful tool. good, gentle introduction focus reproducible research Karl Broman’s “Minimal make”.Generally, R packages avoid custom Makefile. Instead, use Makevars. Makevars make file overrides default make file generated R (located file.path(R.home(\"etc\"), \"Makeconf\")). allows take advantage R’s default behaviour (’s 150 lines, battle-tested across many years many systems, want !) able set flags need. commonly used flags :PKG_LIBS: Linker flags. common use PKG_LIBS = $(BLAS_LIBS). \nallows use BLAS library R.PKG_LIBS: Linker flags. common use PKG_LIBS = $(BLAS_LIBS). \nallows use BLAS library R.PKG_CFLAGS & PKG_CXXFLAGS: C C++ flags. commonly used set\ndefine directives -D.PKG_CFLAGS & PKG_CXXFLAGS: C C++ flags. commonly used set\ndefine directives -D.PKG_CPPFLAGS: Pre-processor flags (C++ flags!). commonly used \nset include directories -. package listed LinkingTo field\nDESCRIPTION automatically included - need \nexplicitly add .PKG_CPPFLAGS: Pre-processor flags (C++ flags!). commonly used \nset include directories -. package listed LinkingTo field\nDESCRIPTION automatically included - need \nexplicitly add .set flags Windows, use Makevars.win. build Makevars configure, use Makevars..default, R use system make, always GNU compatible (.e. Solaris). want use GNU extensions (extremely common), add SystemRequirements: GNU make DESCRIPTION. ’re sure ’re using GNU extensions, play safe add system requirement.","code":""},{"path":"src.html","id":"src-other","chapter":"15 Compiled code","heading":"15.5 Other languages","text":"possible connect R languages, interfaces nice one C++:Fortran: ’s possible call Fortran subroutines directly \n.Fortran(), via C C++ .Call(). See ?.Fortran andFortran: ’s possible call Fortran subroutines directly \n.Fortran(), via C C++ .Call(). See ?.Fortran andJava: rJava package makes \npossible call Java code within R. Note unlike C C++,\npassing R object Java call involve copy operation, something\nserious performance implications.Java: rJava package makes \npossible call Java code within R. Note unlike C C++,\npassing R object Java call involve copy operation, something\nserious performance implications.","code":""},{"path":"src.html","id":"src-workflow","chapter":"15 Compiled code","heading":"15.6 Development workflow","text":"developing C C++ code, ’s usually better use RStudio’s Build & Reload instead devtools::load_all(). Note known “Install Restart” recent versions RStudio. C objects persist reloads, change data structure, ’s better use Install Restart: otherwise ’s high chance crashes due differences versions C code.","code":""},{"path":"src.html","id":"src-cran","chapter":"15 Compiled code","heading":"15.7 CRAN issues","text":"Packages compiled code much likely difficulties getting CRAN without. reason? package must build source major platforms (Linux, Mac Windows). hard!CRAN provides automated service checking R packages windows:\nwin-builder. can easily access \nrunning devtools::check_win_release(), builds uploads package\nbundle. devel oldrel R versions can targeted \ncheck_win_devel() check_win_oldrelease(), respectively.CRAN provides automated service checking R packages windows:\nwin-builder. can easily access \nrunning devtools::check_win_release(), builds uploads package\nbundle. devel oldrel R versions can targeted \ncheck_win_devel() check_win_oldrelease(), respectively.’ve tried include important advice chapter, ’d\nrecommend reading entire section writing portable C C++ code “Writing\nR extensions”.’ve tried include important advice chapter, ’d\nrecommend reading entire section writing portable C C++ code “Writing\nR extensions”.exceptional circumstances, like binding Windows-functionality,\nmay able opt-cross-platform requirement, prepared\nmake strong case .exceptional circumstances, like binding Windows-functionality,\nmay able opt-cross-platform requirement, prepared\nmake strong case .interface CRAN’s automated manual checking can particularly frustrating compiled code. Requirements vary submission submission, based maintainer get much free time . rules inconsistently applied, package doesn’t pass, ’s better bite bullet make change rather trying argue :Sometimes need list authors copyright holders included\ncode DESCRIPTION.Sometimes need list authors copyright holders included\ncode DESCRIPTION.Sometimes package need work Solaris. due difficulty\naccessing computer running Solaris, fixing Solaris issues can hard.\nHowever, stronger negotiating position package \nproblems platforms.\nOne common gotcha: gcc/clang flags -Wall, -pedantic -O0 work\ndefault compiler Solaris.Sometimes package need work Solaris. due difficulty\naccessing computer running Solaris, fixing Solaris issues can hard.\nHowever, stronger negotiating position package \nproblems platforms.One common gotcha: gcc/clang flags -Wall, -pedantic -O0 work\ndefault compiler Solaris.","code":""},{"path":"inst.html","id":"inst","chapter":"16 Installed files","heading":"16 Installed files","text":"package installed, everything inst/ copied top-level package directory. sense inst/ opposite .Rbuildignore - .Rbuildignore lets remove arbitrary files directories top level, inst/ lets add . free put anything like inst/ one caution: inst/ copied top-level directory, never use subdirectory name existing directory. means avoid inst/build, inst/data, inst/demo, inst/exec, inst/help, inst/html, inst/inst, inst/libs, inst/Meta, inst/man, inst/po, inst/R, inst/src, inst/tests, inst/tools inst/vignettes.chapter discusses common files found inst/:inst/AUTHOR inst/COPYRIGHT. copyright authorship \npackage particularly complex, can use plain text files,\ninst/COPYRIGHTS inst/AUTHORS, provide information.inst/AUTHOR inst/COPYRIGHT. copyright authorship \npackage particularly complex, can use plain text files,\ninst/COPYRIGHTS inst/AUTHORS, provide information.inst/CITATION: cite package, see\npackage citation details.inst/CITATION: cite package, see\npackage citation details.inst/docs: older convention vignettes, avoided\nmodern packages.inst/docs: older convention vignettes, avoided\nmodern packages.inst/extdata: additional external data examples vignettes.\nSee external data detail.inst/extdata: additional external data examples vignettes.\nSee external data detail.inst/java, inst/python etc. See languages.inst/java, inst/python etc. See languages.find file inst/ code use system.file(). example, find inst/extdata/mydata.csv, ’d call system.file(\"extdata\", \"mydata.csv\", package = \"mypackage\"). Note omit inst/ directory path. work package installed, ’s loaded devtools::load_all().","code":""},{"path":"inst.html","id":"inst-citation","chapter":"16 Installed files","heading":"16.1 Package citation","text":"CITATION file lives inst directory intimately connected citation() function tells cite R R packages. Calling citation() without arguments tells cite base R:Calling package name tells cite package:customise citation package, add inst/CITATION looks like :need create inst/CITATION. can see, ’s pretty simple: need learn one new function, citEntry(). important arguments :entry: type citation, “Article”, “Book”, “PhDThesis” etc.entry: type citation, “Article”, “Book”, “PhDThesis” etc.standard bibliographic information like title, author (\npersonList()), year, journal, volume, issue, pages, …standard bibliographic information like title, author (\npersonList()), year, journal, volume, issue, pages, …complete list arguments can found ?bibentry.Use citHeader() citFooter() add additional exhortations.","code":"\ncitation()\n#> \n#> To cite R in publications use:\n#> \n#>   R Core Team (2022). R: A language and environment for\n#>   statistical computing. R Foundation for Statistical\n#>   Computing, Vienna, Austria. URL\n#>   https://www.R-project.org/.\n#> \n#> A BibTeX entry for LaTeX users is\n#> \n#>   @Manual{,\n#>     title = {R: A Language and Environment for Statistical Computing},\n#>     author = {{R Core Team}},\n#>     organization = {R Foundation for Statistical Computing},\n#>     address = {Vienna, Austria},\n#>     year = {2022},\n#>     url = {https://www.R-project.org/},\n#>   }\n#> \n#> We have invested a lot of time and effort in creating R,\n#> please cite it when using it for data analysis. See also\n#> 'citation(\"pkgname\")' for citing R packages.\ncitation(\"lubridate\")\n#> \n#> To cite lubridate in publications use:\n#> \n#>   Garrett Grolemund, Hadley Wickham (2011). Dates and Times\n#>   Made Easy with lubridate. Journal of Statistical Software,\n#>   40(3), 1-25. URL https://www.jstatsoft.org/v40/i03/.\n#> \n#> A BibTeX entry for LaTeX users is\n#> \n#>   @Article{,\n#>     title = {Dates and Times Made Easy with {lubridate}},\n#>     author = {Garrett Grolemund and Hadley Wickham},\n#>     journal = {Journal of Statistical Software},\n#>     year = {2011},\n#>     volume = {40},\n#>     number = {3},\n#>     pages = {1--25},\n#>     url = {https://www.jstatsoft.org/v40/i03/},\n#>   }citHeader(\"To cite lubridate in publications use:\")\n\ncitEntry(entry = \"Article\",\n  title        = \"Dates and Times Made Easy with {lubridate}\",\n  author       = personList(as.person(\"Garrett Grolemund\"),\n                   as.person(\"Hadley Wickham\")),\n  journal      = \"Journal of Statistical Software\",\n  year         = \"2011\",\n  volume       = \"40\",\n  number       = \"3\",\n  pages        = \"1--25\",\n  url          = \"https://www.jstatsoft.org/v40/i03/\",\n\n  textVersion  =\n  paste(\"Garrett Grolemund, Hadley Wickham (2011).\",\n        \"Dates and Times Made Easy with lubridate.\",\n        \"Journal of Statistical Software, 40(3), 1-25.\",\n        \"URL https://www.jstatsoft.org/v40/i03/.\")\n)"},{"path":"inst.html","id":"inst-other-langs","chapter":"16 Installed files","heading":"16.2 Other languages","text":"Sometimes package contains useful supplementary scripts programming languages. Generally, avoid , adds additional extra dependency, may useful wrapping substantial amounts code another language. example, gdata wraps Perl module Spreadsheet::ParseExcel read excel files R.convention put scripts nature subdirectory inst/, inst/python, inst/perl, inst/ruby etc. scripts essential package, make sure also add appropriate programming language SystemRequirements field DESCRIPTION. (field human reading don’t worry exactly specify .)Java special case best place learn documentation rJava package (http://www.rforge.net/rJava/).","code":""},{"path":"misc.html","id":"misc","chapter":"17 Other components","heading":"17 Other components","text":"four directories valid top-level directories. rarely used:demo/: package demos. useful prior introduction\nvignettes, longer recommended. See .demo/: package demos. useful prior introduction\nvignettes, longer recommended. See .exec/: executable scripts. Unlike files placed directories, files \nexec/ automatically flagged executable.exec/: executable scripts. Unlike files placed directories, files \nexec/ automatically flagged executable.po/: translations messages. useful beyond scope \nbook. See Internationalization chapter \n“R extensions” details.po/: translations messages. useful beyond scope \nbook. See Internationalization chapter \n“R extensions” details.tools/: auxiliary files needed configuration, sources need\ngenerate scripts.tools/: auxiliary files needed configuration, sources need\ngenerate scripts.","code":""},{"path":"misc.html","id":"demo","chapter":"17 Other components","heading":"17.1 Demos","text":"demo .R file lives demo/. Demos like examples tend longer. Instead focussing single function, show weave together multiple functions solve problem.list access demos demo():Show available demos: demo().Show demos package: demo(package = \"httr\").Run specific demo: demo(\"oauth1-twitter\", package = \"httr\").Find demo: system.file(\"demo\", \"oauth1-twitter.R\", package = \"httr\").demo must listed demo/00Index following form: demo-name   Demo description. demo name name file without extension, e.g. demo/-demo.R becomes -demo.default demo asks human input plot: “Hit  see next plot:”.\nbehaviour can overridden adding devAskNewPage(ask = FALSE) demo file.\ncan add pauses adding: readline(\"press key continue\").Generally, recommend using demos. Instead, consider writing vignette:Demos automatically tested R CMD check. means can\neasily break without knowledge.Demos automatically tested R CMD check. means can\neasily break without knowledge.Vignettes input output, readers can see results\nwithout run code .Vignettes input output, readers can see results\nwithout run code .Longer demos need mingle code explanation, RMarkdown better\nsuited task R comments.Longer demos need mingle code explanation, RMarkdown better\nsuited task R comments.Vignettes listed CRAN package page. makes easier \nnew users discover .Vignettes listed CRAN package page. makes easier \nnew users discover .","code":""},{"path":"git.html","id":"git","chapter":"18 Git and GitHub","heading":"18 Git and GitHub","text":"’re serious software development, need learn Git. Git version control system, tool tracks changes code shares changes others. Git useful combined GitHub, website allows share code world, solicit improvements via pull requests track issues. Git + GitHub popular version control system developers R packages (witness thousands R packages hosted GitHub).Git GitHub generally useful software development data analysis, just R packages. ’ve included , useful ’re making package. ’s way productive without Git GitHub back, enabling rapidly spot mistakes easily collaborate others.use Git + GitHub?makes sharing package easy. R user can install package \njust two lines code:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"username/packagename\")makes sharing package easy. R user can install package \njust two lines code:GitHub great way make barebones website package. Readers\ncan easily browse code, read documentation (via Markdown). can\nreport bugs, suggest new features GitHub issues, \npropose improvements code pull requests.GitHub great way make barebones website package. Readers\ncan easily browse code, read documentation (via Markdown). can\nreport bugs, suggest new features GitHub issues, \npropose improvements code pull requests.ever tried collaboratively write code someone sending\nfiles back forth via email Dropbox folder? takes lot effort\njust make sure two aren’t working file \noverwriting others’ changes. Git, can work \nfile time. Git either combine changes\nautomatically, show ambiguities conflicts.ever tried collaboratively write code someone sending\nfiles back forth via email Dropbox folder? takes lot effort\njust make sure two aren’t working file \noverwriting others’ changes. Git, can work \nfile time. Git either combine changes\nautomatically, show ambiguities conflicts.ever accidentally pressed s instead Cmd + S save \nfile? ’s easy accidentally introduce mistake takes \nminutes track . Git makes problem easy spot \nallows see exactly ’s changed undo mistakes.ever accidentally pressed s instead Cmd + S save \nfile? ’s easy accidentally introduce mistake takes \nminutes track . Git makes problem easy spot \nallows see exactly ’s changed undo mistakes.can many things tools (like subversion mercurial) websites (like gitlab bitbucket). Git useful conjunction GitHub, vice versa, ’ll make effort distinguish features belong Git belong GitHub. think Git + GitHub user-friendly system (especially new developers), least popularity means answer solution every possible question problem can found StackOverflow.say Git easy learn. initial experiences Git likely frustrating frequently curse strange terminology unhelpful error messages. Fortunately, many tutorials available online, aren’t always well written (many provide lot information little guidance need care), can absolutely master Git little practice. Don’t give ! Persevere ’ll unlock super-power code collaboration.","code":"\ninstall.packages(\"devtools\")\ndevtools::install_github(\"username/packagename\")"},{"path":"git.html","id":"git-rstudio","chapter":"18 Git and GitHub","heading":"18.1 RStudio, Git and GitHub","text":"RStudio makes day--day use Git simpler. ’ve set project use Git, ’ll see new pane toolbar icon. provide shortcuts commonly used Git commands. However, handful 150+ Git commands available RStudio, also need familiar using Git shell (aka command line console). ’s also useful familiar using Git shell get stuck ’ll need search solution Git command names.easiest way get shell RStudio Tools > Shell. open new shell located root directory project. (NB: Windows, opens bash shell, standard Linux shell, behaves little differently usual cmd.exe shell.)Don’t worry ’ve never used shell ’s similar using R. main difference instead functions, call commands, slightly different syntax. example, R might write f(x, y = 1), shell ’d write f x --y=1 f x -y1. Also, shell commands even less regular R functions, fortunately need familiar . chapter, won’t much shell apart running Git commands. However, ’s good idea learn three important shell commands:pwd: print working directory. tells directory ’re currently .cd <name>: change directory. Use cd .. move directory hierarchy.ls: list files. Shows files current directory.’ve never used shell , recommend playing Terminus. ’s fun way learn basics shell. also recommend taking look Philip Guo’s Basic Unix-like command line tutorial videos, http://www.ee.surrey.ac.uk/Teaching/Unix/unix1.html https://p1k3.com/userland-book/.","code":""},{"path":"git.html","id":"git-setup","chapter":"18 Git and GitHub","heading":"18.2 Initial set up","text":"’ve never used Git GitHub , start installing Git creating GitHub account. , link two together:Install Git:\nWindows: https://git-scm.com/download/win.\nOS X: https://git-scm.com/download/mac.\nDebian/Ubuntu: sudo apt-get install git-core.\nLinux distros: https://git-scm.com/download/linux.\nInstall Git:Windows: https://git-scm.com/download/win.OS X: https://git-scm.com/download/mac.Debian/Ubuntu: sudo apt-get install git-core.Linux distros: https://git-scm.com/download/linux.Tell Git name email address. used label commit\nstart collaborating others, ’s clear made\nchange. shell, run:\ngit config --global user.name \"FULL NAME\"\ngit config --global user.email \"EMAIL ADDRESS\"\n(can check ’re set correctly running\ngit config --global --list.)Tell Git name email address. used label commit\nstart collaborating others, ’s clear made\nchange. shell, run:(can check ’re set correctly running\ngit config --global --list.)Create account GitHub, https://github.com (free plan fine).\nUse email address .Create account GitHub, https://github.com (free plan fine).\nUse email address .needed, generate SSH key. SSH keys allow securely\ncommunicate websites without password. two parts \nSSH key: one public, one private. People public key can\nsecurely encrypt data can read someone \nprivate key.\nR, can check already SSH key-pair running:\n\nfile.exists(\"~/.ssh/id_rsa.pub\")\nreturns FALSE, ’ll need create new key. can either follow \ninstructions GitHub\nuse RStudio. Go RStudio’s global options, choose Git/SVN panel, \nclick “Create RSA key…”:\nneeded, generate SSH key. SSH keys allow securely\ncommunicate websites without password. two parts \nSSH key: one public, one private. People public key can\nsecurely encrypt data can read someone \nprivate key.R, can check already SSH key-pair running:returns FALSE, ’ll need create new key. can either follow \ninstructions GitHub\nuse RStudio. Go RStudio’s global options, choose Git/SVN panel, \nclick “Create RSA key…”:Give GitHub SSH public key: https://github.com/settings/ssh.\neasiest way find key click “View public key” \nRStudio’s Git/SVN preferences pane.Give GitHub SSH public key: https://github.com/settings/ssh.\neasiest way find key click “View public key” \nRStudio’s Git/SVN preferences pane.","code":"git config --global user.name \"YOUR FULL NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\nfile.exists(\"~/.ssh/id_rsa.pub\")"},{"path":"git.html","id":"git-init","chapter":"18 Git and GitHub","heading":"18.3 Create a local Git repository","text":"Now installed configured Git, can use ! use GitHub package, ’ll need initialise local repository, repo short. creates .git directory stores configuration files database records changes code. new repo exists computer; ’ll learn share others shortly.create new repo:RStudio, go project options, Git/SVN panel. Change \n“Version control system” “None” “Git”:\n\n’ll prompted restart RStudio.RStudio, go project options, Git/SVN panel. Change \n“Version control system” “None” “Git”:’ll prompted restart RStudio.shell, run git init. Restart RStudio reopen package.shell, run git init. Restart RStudio reopen package.Git initialised, ’ll see two new components:git pane, top-right, shows files \nchanged includes buttons important Git commands:\ngit pane, top-right, shows files \nchanged includes buttons important Git commands:git dropdown menu, found toolbar, includes Git GitHub commands\napply current file:\ngit dropdown menu, found toolbar, includes Git GitHub commands\napply current file:","code":""},{"path":"git.html","id":"git-status","chapter":"18 Git and GitHub","heading":"18.4 See what’s changed","text":"first benefit Git can easily see changes ’ve made. find really helpful, often accidentally mistype keyboard shortcuts, leaving stray characters code. RStudio Git pane lists every file ’s added, modified deleted. icon describes change:,\nModified. ’ve changed contents file.,\nModified. ’ve changed contents file.,\nUntracked. ’ve added new file Git hasn’t seen .,\nUntracked. ’ve added new file Git hasn’t seen .,\nDeleted. ’ve deleted file.,\nDeleted. ’ve deleted file.can get details modifications “diff”, . opens new window showing detailed differences:background colours tells whether text added (green) removed (red). (’re colourblind can use line numbers two columns far left guide: number first column identifies old version, number second column identifies new version.) grey lines code changes give additional context.shell, use git status see overview changes git diff show detailed differences.","code":""},{"path":"git.html","id":"git-commit","chapter":"18 Git and GitHub","heading":"18.5 Record changes","text":"fundamental unit work Git commit. commit takes snapshot code specified point time. Using Git commit like using anchors protection climbing. ’re crossing dangerous rock face want make sure ’ve used protection catch fall. Commits play similar role: make mistake, can’t fall past previous commit. Coding without commits like free-climbing: can travel much faster short-term, long-term chances catastrophic failure high! Like rock climbing protection, want judicious use commits. Committing frequently slow progress; use commits ’re uncertain dangerous territory. Commits also helpful others, show journey, just destination.five key components every commit:unique identifier, called SHA (short secure hash algorithm).unique identifier, called SHA (short secure hash algorithm).changeset describes files added, modified deleted.changeset describes files added, modified deleted.human-readable commit message.human-readable commit message.parent, commit came one. (two exceptions \nrule: initial commit doesn’t parent, merges, ’ll\nlearn later, two parents.)parent, commit came one. (two exceptions \nrule: initial commit doesn’t parent, merges, ’ll\nlearn later, two parents.)author.author.create commit two stages:stage files, telling Git changes included \nnext commit.stage files, telling Git changes included \nnext commit.commit staged files, describing changes message.commit staged files, describing changes message.commit window made three panes:top-left pane shows current status way Git pane \nmain RStudio window.top-left pane shows current status way Git pane \nmain RStudio window.bottom pane shows diff currently selected file.bottom pane shows diff currently selected file.top-right pane ’ll enter commit message, human\nreadable message summarising changes made commit. \nshortly.top-right pane ’ll enter commit message, human\nreadable message summarising changes made commit. \nshortly.create new commit:Save changes.Save changes.Open commit window clicking\n \npressing Ctrl + Alt + m.Open commit window clicking\n \npressing Ctrl + Alt + m.Select files. stage (select) single file inclusion, tick \ncheck box. stage files, press Ctrl/Cmd + , click\n.\nstage file, ’ll notice status changes. icon\nchange columns right (unstaged status) left (staged status),\nmight see one two new icons:\nAdded: :\nstaging untracked file, Git now knows want add \nrepo.\nRenamed: :\nrename file, Git initially sees deletion addition.\nstage changes, Git recognise ’s rename.\nSometimes ’ll see status columns, e.g. \n.\nmeans staged unstaged changes file.\nhappens ’ve made changes, staged , made \n. Clicking staged checkbox stage new changes, clicking\nunstage sets changes.Select files. stage (select) single file inclusion, tick \ncheck box. stage files, press Ctrl/Cmd + , click\n.stage file, ’ll notice status changes. icon\nchange columns right (unstaged status) left (staged status),\nmight see one two new icons:Added: :\nstaging untracked file, Git now knows want add \nrepo.Renamed: :\nrename file, Git initially sees deletion addition.\nstage changes, Git recognise ’s rename.Stage files, .Stage files, .Write commit message (top-right panel) describes changes\n’ve made. first line commit message called subject\nline brief (50 characters less). complicated commits,\ncan follow blank line paragraph bulleted list\nproviding detail. Write messages imperative, like ’re telling\nsomeone : “fix bug”, “fixed bug” \n“bug fixed”.Write commit message (top-right panel) describes changes\n’ve made. first line commit message called subject\nline brief (50 characters less). complicated commits,\ncan follow blank line paragraph bulleted list\nproviding detail. Write messages imperative, like ’re telling\nsomeone : “fix bug”, “fixed bug” \n“bug fixed”.Click Commit.Click Commit.Staging files little complicated shell. use git add stage new modified files, git rm stage deleted files. create commit, use git commit -m <message>.","code":""},{"path":"git.html","id":"commit-best-practices","chapter":"18 Git and GitHub","heading":"18.6 Commit best practices","text":"Ideally, commit minimal complete:Minimal: commit contain changes related single\nproblem. make easier understand commit glance, \ndescribe simple message. discover new problem, \nseparate commit.Minimal: commit contain changes related single\nproblem. make easier understand commit glance, \ndescribe simple message. discover new problem, \nseparate commit.Complete: commit solve problem claims solve.\nthink ’ve fixed bug, commit contain unit test\nconfirms ’re right.Complete: commit solve problem claims solve.\nthink ’ve fixed bug, commit contain unit test\nconfirms ’re right.commit message :concise, yet evocative. glance, able see\ncommit . enough detail can remember\n(understand) done.concise, yet evocative. glance, able see\ncommit . enough detail can remember\n(understand) done.Describe , . Since can always retrieve diff\nassociated commit, message doesn’t need say exactly \nchanged. Instead provide high-level summary focuses \nreasons change.Describe , . Since can always retrieve diff\nassociated commit, message doesn’t need say exactly \nchanged. Instead provide high-level summary focuses \nreasons change.:’ll easier work others. example, two people changed\nfile place, ’ll easier resolve conflicts \ncommits small ’s clear change made.’ll easier work others. example, two people changed\nfile place, ’ll easier resolve conflicts \ncommits small ’s clear change made.Project newcomers can easily understand history reading commit\nlogs.Project newcomers can easily understand history reading commit\nlogs.can load run package point along development history.\ncan tremendously useful tools like\nbisectr, allow use binary\nsearch quickly find commit introduced bug.can load run package point along development history.\ncan tremendously useful tools like\nbisectr, allow use binary\nsearch quickly find commit introduced bug.can figure exactly bug introduced, can easily\nunderstand (!).can figure exactly bug introduced, can easily\nunderstand (!).might think one else ever look repo, writing good commit messages worth effort. keep mind one important collaborator: future-! spend little time now polishing commit messages, future-thank need post-mortem bug.Remember directives aspirational. shouldn’t let get way. look commit history repositories, ’ll notice lot aren’t good, especially start get frustrated still haven’t managed fix bug. Strive follow guidelines, remember ’s better multiple bad commits one perfect commit.","code":""},{"path":"git.html","id":"git-ignore","chapter":"18 Git and GitHub","heading":"18.7 Ignoring files","text":"Often, files don’t want include repository. might transient (like LaTeX C build artefacts), large, generated demand. Rather carefully staging time, instead add .gitignore. prevent accidentally added. easiest way right-click file Git pane select Ignore:want ignore multiple files, can use wildcard “glob” like *.png. learn options, see ignoring files Pro-Git.developers never commit derived files, files can generated automatically. R package mean ignoring files NAMESPACE man/ directories ’re generated comments. practical pespective, ’s better commit files: R packages way generate .Rd files installation ignoring derived files means users install package GitHub documentation.","code":""},{"path":"git.html","id":"git-undo","chapter":"18 Git and GitHub","heading":"18.8 Undo a mistake","text":"best thing using commits can undo mistakes. RStudio makes particularly easy:undo changes ’ve just made, right click file Git\npane select “revert”. roll changes back previous\ncommit. Beware: can’t undo operation!\ncan also undo changes just part file diff window. Look\ndiscard chunk button block changes want \nundo:. \ncan also discard changes individual lines selected text.undo changes ’ve just made, right click file Git\npane select “revert”. roll changes back previous\ncommit. Beware: can’t undo operation!can also undo changes just part file diff window. Look\ndiscard chunk button block changes want \nundo:. \ncan also discard changes individual lines selected text.committed changes early, can modify previous commit \nstaging extra changes. click commit, select\n.\n(Don’t ’ve pushed previous commit GitHub - ’re\neffectively rewriting history, done care ’re\npublic.)didn’t catch mistake right away, ’ll need look backwards history find occurred:Open history window clicking\n \nGit pane.\n\nhistory window divided two parts. top part lists every\ncommit repo. bottom part shows commit:\nSHA (unique id), author, date, parent \nchanges commit.history window divided two parts. top part lists every\ncommit repo. bottom part shows commit:\nSHA (unique id), author, date, parent \nchanges commit.Navigate back time find commit mistake occurred.\nWrite parent SHA: ’s commit occurred \nmistake good.Navigate back time find commit mistake occurred.\nWrite parent SHA: ’s commit occurred \nmistake good.Now can use SHA shell:See file looked like past can copy--paste old\ncode:\ngit show <SHA> <filename>See file looked like past can copy--paste old\ncode:copy version past back present:\ngit checkout <SHA> <filename>copy version past back present:cases ’ll need finish staging committing files.(’s also possible use Git went back time prevented mistake happening first place. advanced technique called rebasing history. might imagine, going back time change past can profound impact present. can useful, needs done extreme care.)’re still stuck, try https://sethrobertson.github.io/GitFixUm/fixup.html http://justinhileman.info/article/git-pretty/. give step--step approaches fixing many common (common!) problems.","code":"git show <SHA> <filename>git checkout <SHA> <filename>"},{"path":"git.html","id":"github-init","chapter":"18 Git and GitHub","heading":"18.9 Synchronising with GitHub","text":"far ’ve working locally, using commits track progress project provide safe checkpoints. However, Git really shines start sharing code others GitHub. choices, recommend GitHub free open source projects, features ’ll need, popular choice R world.publish, push, code GitHub:Create new repo GitHub: https://github.com/new. Give \nname package, include package title repo\ndescription. Leave options , click Submit.Create new repo GitHub: https://github.com/new. Give \nname package, include package title repo\ndescription. Leave options , click Submit.Open shell, follow instructions new repo page.\n’ll look something like :\ngit remote add origin git@github.com:hadley/r-pkgs.git\ngit push -u origin master\nfirst line tells Git local repo remote version \nGitHub, calls “origin”. second line pushes current\nwork repo.Open shell, follow instructions new repo page.\n’ll look something like :first line tells Git local repo remote version \nGitHub, calls “origin”. second line pushes current\nwork repo.Now let’s make commit verify remote repo updates:Modify DESCRIPTION add URL BugReports fields link\nnew GitHub site. example, dplyr :\nURL: https://github.com/hadley/dplyr\nBugReports: https://github.com/hadley/dplyr/issuesModify DESCRIPTION add URL BugReports fields link\nnew GitHub site. example, dplyr :Save file commit (message “Updating DESCRIPTION add\nlinks GitHub site”).Save file commit (message “Updating DESCRIPTION add\nlinks GitHub site”).Push changes GitHub clicking\n. (\nrunning git push shell).Push changes GitHub clicking\n. (\nrunning git push shell).Go GitHub page look DESCRIPTION.Go GitHub page look DESCRIPTION.Usually, push include multiple commits. push much less often commit. often push versus commit completely , pushing code means publishing code. strive push code works.ensure code clean, recommend always running R CMD check push (topic ’ll learn chapter automated checking). want publish code doesn’t work (yet), recommend using branch, ’ll learn branching.","code":"git remote add origin git@github.com:hadley/r-pkgs.git\ngit push -u origin masterURL: https://github.com/hadley/dplyr\nBugReports: https://github.com/hadley/dplyr/issues"},{"path":"git.html","id":"github-benefit","chapter":"18 Git and GitHub","heading":"18.10 Benefits of using GitHub","text":"get decent website. GitHub page project, e.g. \nhttps://github.com/hadley/testthat (GitHub repo testthat), lists\nfiles directories package. .R files formatted\nsyntax highlighting, .md/.Rmd files rendered HTML.\n, include README.md file top-level directory, \ndisplayed homepage. ’ll learn benefits \ncreating file README.md.get decent website. GitHub page project, e.g. \nhttps://github.com/hadley/testthat (GitHub repo testthat), lists\nfiles directories package. .R files formatted\nsyntax highlighting, .md/.Rmd files rendered HTML.\n, include README.md file top-level directory, \ndisplayed homepage. ’ll learn benefits \ncreating file README.md.makes easy anyone install package (benefit \nhard work):\n\ndevtools::install_github(\"<your_username>/<your_package>\")makes easy anyone install package (benefit \nhard work):can track history project commit view, e.g. \nhttps://github.com/hadley/testthat/commits/master. ’m working \npackage others, often keep page open can see \n’re working . Individual commits show information \nsee commit/diff window RStudio.can track history project commit view, e.g. \nhttps://github.com/hadley/testthat/commits/master. ’m working \npackage others, often keep page open can see \n’re working . Individual commits show information \nsee commit/diff window RStudio.’s easy see history file. navigate file click\nHistory, ’ll see every commit affected file. Another useful\nview Blame; shows last change made line code, \nmade change, commit change belongs . tremendously\nhelpful ’re tracking bug.\ncan jump directly pages RStudio Git dropdown \nmain toolbar:\n’s easy see history file. navigate file click\nHistory, ’ll see every commit affected file. Another useful\nview Blame; shows last change made line code, \nmade change, commit change belongs . tremendously\nhelpful ’re tracking bug.can jump directly pages RStudio Git dropdown \nmain toolbar:can comment commits. comment commit whole, use \ncomment box bottom page. comment individual line,\nclick plus sign appears mouse line number,\n.\ngreat way let collaborators know see mistake \nquestion. ’s better email ’s public anyone\nworking repo (present future) can see conversation.","code":"\ndevtools::install_github(\"<your_username>/<your_package>\")"},{"path":"git.html","id":"git-pull","chapter":"18 Git and GitHub","heading":"18.11 Working with others","text":"use push send changes GitHub. ’re working others, also push changes GitHub. , see changes locally ’ll need pull changes GitHub. fact, make sure everyone sync, Git let push repo ’ve retrieved recent version pull.pull, Git first downloads (fetches) changes merges changes ’ve made. merge commit two parents. takes two different lines development combines single result. many cases, Git can automatically: example, changes made different files, different parts file. However, changes made place file, ’ll need resolve merge conflict .RStudio, ’ll discover merge conflict :pull fails error.pull fails error.Git pane, see status like\nRStudio currently doesn’t provide tools help merge conflicts, ’ll need use command line. recommend starting setting merge conflict “style” diff3. diff3 style shows three things get merge conflict: local changes, original file remote changes. default style diff2, shows changes remote changes. generally makes harder figure ’s happened.’ve encountered first merge conflict, following:\n# Abort merge\ngit merge --abort\n# Set conflict style\ngit config --global merge.conflictstyle diff3\n# Re-try merge\ngit pullIf ’ve encountered first merge conflict, following:’re middle merge conflict, just run\ngit config --global merge.conflictstyle diff3If ’re middle merge conflict, just runThis shows three versions conflicting code:top, local code.top, local code.middle, code last commit split \ntwo lines development (missing default conflict\nstyle, don’t see , follow instructions ).middle, code last commit split \ntwo lines development (missing default conflict\nstyle, don’t see , follow instructions ).bottom, remote code pulled GitHub.bottom, remote code pulled GitHub.need work conflict decide either version better, combine versions. , stage file, make sure ’ve deleted conflict markers. ’ve fixed conflicts, make new commit push GitHub.couple pointers fixing text generated roxygen:Don’t fix problems man/*.Rd files. Instead, resolve conflicts \nunderlying roxygen comments re-document package.Don’t fix problems man/*.Rd files. Instead, resolve conflicts \nunderlying roxygen comments re-document package.Merge conflicts NAMESPACE file prevent re-loading \nre-documenting package. Resolve enough package\ncan loaded, re-document generate clean correct NAMESPACE.Merge conflicts NAMESPACE file prevent re-loading \nre-documenting package. Resolve enough package\ncan loaded, re-document generate clean correct NAMESPACE.Handling merge conflicts one trickier parts Git. may need read tutorials get hang . Google StackOverflow great resources. get terribly confused, can always abort merge try running git merge --abort git pull.","code":"# Abort this merge\ngit merge --abort\n# Set the conflict style\ngit config --global merge.conflictstyle diff3\n# Re-try the merge\ngit pullgit config --global merge.conflictstyle diff3<<<<<<< HEAD\n\n||||||| merged common ancestors\n\n=======\n\n>>>>>>> remote"},{"path":"git.html","id":"github-issues","chapter":"18 Git and GitHub","heading":"18.12 Issues","text":"Every GitHub repo comes page tracking issues. Use ! encounter bug working another project, jot note issues page. smaller project, don’t worry much milestones, tags assigning issues specific people. useful get page issues (>50). get point, read GitHub guide issues: https://guides.github.com/features/issues/.useful technique closing issues commit message. Just put Closes #<issue number> somewhere commit message GitHub close issue next push. best thing closing issues way makes link issue commit. useful ever come back bug want see exactly fix . can also link issues without closing ; just refer #<issue number>.’ll learn NEWS.md, ’s good idea add bullet NEWS.md whenever close issue. bullet point describe issue terms users understand, opposed commit message written developers.","code":""},{"path":"git.html","id":"git-branch","chapter":"18 Git and GitHub","heading":"18.13 Branches","text":"Sometimes want make big changes code without disturb main stream development. Maybe want break multiple simple commits can easily track ’re . Maybe ’re sure ’ve done best approach want someone else review code. , maybe want try something experimental (can merge back experiment succeeds). Branches pull requests provide powerful tools handle situations.Although haven’t realised , ’re already using branches. default branch called master; ’s ’ve saving commits. synchronise code GitHub ’ll also branch called origin/master: ’s local copy commits GitHub, gets synchronised pull. git pull two things:git fetch origin master update local origin/master branch \nlatest commits GitHub.git fetch origin master update local origin/master branch \nlatest commits GitHub.git merge origin/master combine remote changes changes.git merge origin/master combine remote changes changes.’s useful create branches want (temporarily) break away main stream development. can create new branch git checkout -b <branch-name>. Names lower case letters numbers, - used separate words.Switch branches git checkout <branch-name>. example, return main line development use git checkout master. can also use branch switcher top right Git pane:’ve forgotten name branch shell, can use git branch list existing branches.’ve done , can use pull push buttons usual.’ve working branch , work might going master branch. integrate work branch, run git merge master. need resolve merge conflicts (see ). ’s best fairly frequently - less branch diverges master, easier merge.’re done working branch, merge back master, delete branch:(Git won’t let delete branch unless ’ve merged back master branch. want abandon branch without merging , ’ll need force delete -D instead -d. accidentally delete branch, don’t panic. ’s usually possible get back. See advice undoing mistakes).","code":"git push --set-upstream origin <branch-name>git checkout master\ngit merge <branch-name>\ngit branch -d <branch-name>"},{"path":"git.html","id":"git-pullreq","chapter":"18 Git and GitHub","heading":"18.14 Making a pull request","text":"pull request tool proposing discussing changes merging repo. common use pull request contribute someone else’s code: ’s easiest way propose changes code don’t control., ’ll learn pull requests make changes code. may seem bit pointless don’t need , can directly modify code. pull requests surprisingly useful allow get feedback proposed changes. use frequently RStudio get feedback merging major changes.GitHub good documentation using pull requests: https://help.github.com/articles/using-pull-requests/. chapter, ’ll focus basics need know use pull requests effectively, show fit Git commands ’ve learned far.create pull request, create branch, commit code, push branch GitHub. next go GitHub website ’ll see header invites submit pull request. can also :Switching branches:\nSwitching branches:Clicking create page looks like :pull request, fixes couple small problems, one submitted book’s GitHub site.three parts pull request:conversation,\n,\ncan discuss changes whole.conversation,\n,\ncan discuss changes whole.commits view,\n,\ncan see individual commit.commits view,\n,\ncan see individual commit.file changes,\n,\nsee overall diff commits, can comment\nindividual lines.file changes,\n,\nsee overall diff commits, can comment\nindividual lines.’re done discussing pull request, either choose merge delete . Merging equivalent running git merge <branchname> shell; deleting equivalent git branch -d <branchname>.","code":""},{"path":"git.html","id":"pr-make","chapter":"18 Git and GitHub","heading":"18.15 Submitting a pull request to another repo","text":"submit pull request repo don’t , first need create copy repo can , called fork, clone fork computer:Fork original repo going repo GitHub clicking\n.\ncreates copy repo belongs .Fork original repo going repo GitHub clicking\n.\ncreates copy repo belongs .Clone forked repo create local copy remote repo.\n’s possible within RStudio (using “Create New Project” \n“Version Control”) think ’s easier shell:\ngit clone git@github.com:<-name>/<repo>.git\ncd <repo>Clone forked repo create local copy remote repo.\n’s possible within RStudio (using “Create New Project” \n“Version Control”) think ’s easier shell:fork static copy repo: ’ve created , GitHub nothing keep sync upstream repo. problem ’re working pull request, changes might occur original repo. keep forked original repo sync, start telling repo upstream repo:can merge changes upstream repo local copy:working forked repo, recommend don’t work master branch. ’re really working main line development repo, using master branch makes things confusing.always create pull requests branches, can make little easier keep local repo sync upstream repo running:can update local repo following code:Changes may occur ’re working pull request, remember merge branch :pull request (PR) one--one mapping branch, can also use technique make updates based pull request discussion. Don’t create new pull request time make change; instead just need push branch PR based PR webpage automatically update.diagram illustrates main steps creating pull request updating request upstream repo changes:","code":"git clone git@github.com:<your-name>/<repo>.git\ncd <repo>git remote add upstream git@github.com:<original-name>/<repo>.git\ngit fetch upstreamgit merge upstream/mastergit branch -u upstream/master   git checkout master\ngit pullgit checkout <my-branch>\ngit merge master"},{"path":"git.html","id":"pr-accept","chapter":"18 Git and GitHub","heading":"18.16 Reviewing and accepting pull requests","text":"package gets popular, ’re likely receive pull requests. Receiving pull request fantastic. Someone cares package enough use , ’ve actually read source code made improvement!receive pull request, recommend reviewing using three step approach described Sarah Sharp. summarise three phases , highly recommend reading full article https://sarah.thesharps.us/2014/09/01/-gentle-art--patch-review/:good idea? don’t think contribution good fit \nproject, ’s polite let contributor know quickly \npossible. Thank work, refocus better area \nwork .good idea? don’t think contribution good fit \nproject, ’s polite let contributor know quickly \npossible. Thank work, refocus better area \nwork .overall approach sound? point want focus big\npicture: modified right functions right way? Avoid\nnitpicking minor style problems (’s final phase); instead just\nprovide pointer style preferences, e.g. tidyverse style guide\nhttps://style.tidyverse.org/.overall approach sound? point want focus big\npicture: modified right functions right way? Avoid\nnitpicking minor style problems (’s final phase); instead just\nprovide pointer style preferences, e.g. tidyverse style guide\nhttps://style.tidyverse.org/.polished? final review phase, make sure non-code\nparts PR polished. Prompt contributor update \ndocumentation, point spelling mistakes suggest better wording.\nrecommend asking contributor include bullet point NEWS.md,\nbriefly describing improvement thanking GitHub\nusername. details follow post release).polished? final review phase, make sure non-code\nparts PR polished. Prompt contributor update \ndocumentation, point spelling mistakes suggest better wording.recommend asking contributor include bullet point NEWS.md,\nbriefly describing improvement thanking GitHub\nusername. details follow post release).discussion complete, can incorporate changes clicking merge button. button doesn’t work, GitHub provides instructions command line. ’ve seen pieces , ’s useful read just understand exactly happening.","code":"# Create a new branch, and sync it with the pull request\ngit checkout -b <branch> master\ngit pull https://github.com/<user>/<branch>.git patch-3\n\n# Merge the changes into the main line of development\ngit checkout master\ngit merge --no-ff <branch>\n# Resolve conflicts, stage and add.\n\n# Sync your local changes with GitHub\ngit push origin master"},{"path":"git.html","id":"git-learning","chapter":"18 Git and GitHub","heading":"18.17 Learning more","text":"Git GitHub rich powerful set tools, ’s way chapter taught everything need know. However, now basic knowledge effective, good position learn . good resources :GitHub help, https://help.github.com, teaches \nGitHub, also good tutorials many Git features.GitHub help, https://help.github.com, teaches \nGitHub, also good tutorials many Git features.’d like learn details Git, read\nPro Git Scott Chacon Ben Straub.’d like learn details Git, read\nPro Git Scott Chacon Ben Straub.Finally, StackOverflow vital part Git - problem don’t know solve, StackOverflow first resource. ’s highly likely someone already exact problem , variety approaches solutions choose .","code":""},{"path":"r-cmd-check.html","id":"r-cmd-check","chapter":"19 Automated checking","heading":"19 Automated checking","text":"important part package development process R CMD check. R CMD check automatically checks code common problems. ’s essential ’re planning submitting CRAN, ’s useful even ’re automatically detects many common problems ’d otherwise discover hard way.R CMD check frustrating first time run - ’ll discover many problems need fixed. key making R CMD check less frustrating actually run often: sooner find problem, easier fix. upper limit approach run R CMD check every time make change. use GitHub, ’ll learn precisely GitHub Actions.","code":""},{"path":"r-cmd-check.html","id":"check-workflow","chapter":"19 Automated checking","heading":"19.1 Workflow","text":"R CMD check name command run terminal. don’t recommend calling directly. Instead, run devtools::check(), press Ctrl/Cmd + Shift + E RStudio. contrast R CMD check, devtools::check():Ensures documentation --date running\ndevtools::document().Ensures documentation --date running\ndevtools::document().Bundles package checking . best practice checking\npackages makes sure check starts clean slate: \npackage bundle doesn’t contain temporary files can accumulate\nsource package, e.g. artifacts like ..o files \naccompany compiled code, can avoid spurious warnings files \ngenerate.Bundles package checking . best practice checking\npackages makes sure check starts clean slate: \npackage bundle doesn’t contain temporary files can accumulate\nsource package, e.g. artifacts like ..o files \naccompany compiled code, can avoid spurious warnings files \ngenerate.Sets NOT_CRAN environment variable TRUE. allows \nselectively skip tests CRAN. (See ?testthat::skip_on_cran details.)Sets NOT_CRAN environment variable TRUE. allows \nselectively skip tests CRAN. (See ?testthat::skip_on_cran details.)workflow checking package simple, tedious:Run devtools::check(), press Ctrl/Cmd + Shift + E.Run devtools::check(), press Ctrl/Cmd + Shift + E.Fix first problem.Fix first problem.Repeat problems.Repeat problems.R CMD check returns three types messages:ERRORs: Severe problems fix regardless whether\n’re submitting CRAN.ERRORs: Severe problems fix regardless whether\n’re submitting CRAN.WARNINGs: Likely problems must fix ’re planning \nsubmit CRAN (good idea look even ’re ).WARNINGs: Likely problems must fix ’re planning \nsubmit CRAN (good idea look even ’re ).NOTEs: Mild problems. submitting CRAN, strive \neliminate NOTEs, even false positives. NOTEs,\nhuman intervention required, package submission process \neasier. ’s possible eliminate NOTE, ’ll need describe\n’s OK submission comments, described release\nnotes. ’re submitting CRAN, carefully read\nNOTE, don’t go way fix things don’t think\nproblems.NOTEs: Mild problems. submitting CRAN, strive \neliminate NOTEs, even false positives. NOTEs,\nhuman intervention required, package submission process \neasier. ’s possible eliminate NOTE, ’ll need describe\n’s OK submission comments, described release\nnotes. ’re submitting CRAN, carefully read\nNOTE, don’t go way fix things don’t think\nproblems.","code":""},{"path":"r-cmd-check.html","id":"check-checks","chapter":"19 Automated checking","heading":"19.2 Checks","text":"R CMD check composed 50 individual checks, described following sections. check, briefly describe , common problems , fix . problem R CMD check can’t understand fix , use list help figure need . make easier understand checks fit together, ’ve organised sections roughly corresponding chapters book. means somewhat different order ’ll see run check().list includes every check run R 3.1.1. ’re using recent version, may want consult recent online version chapter: https://r-pkgs.org/r-cmd-check.html. Please let know encounter problem chapter doesn’t help .","code":""},{"path":"r-cmd-check.html","id":"check-metadata","chapter":"19 Automated checking","heading":"19.2.1 Check metadata","text":"R CMD check always starts describing current environment. ’m running R 3.1.1 OS X UTF-8 charset:Using log directory ‘/Users/hadley/Documents/web/httr.Rcheck’Using R version 3.1.1 (2014-07-10)Using platform: x86_64-apple-darwin13.1.0 (64-bit)Using session charset: UTF-8Next description parsed package version printed. ’m checking httr version 0.5.0.9000 (’ll learn weird version number versioning).Checking file ‘httr/DESCRIPTION’package ‘httr’ version ‘0.5.0.9000’","code":""},{"path":"r-cmd-check.html","id":"package-structure","chapter":"19 Automated checking","heading":"19.2.2 Package structure","text":"Checking package directory. directory ’re checking must exist -\ndevtools::check() protects problem.Checking source package. must check source package, \nbinary installed package. never fail usedevtools::check().Checking executable files. must executable files \npackage: ’re portable, ’re open source, \nsecurity risk. Delete executable files package.\n(’re submitting CRAN, can silence warning listing\nexecutable file BinaryFiles field DESCRIPTION.)Checking hidden files directories. Linux OS X, files \nname starting . hidden default, ’ve probably included\npackage mistake. Either delete , important,\nuse .Rbuildignore remove package bundle. R automatically\nremoves common directories like .git .svn.Checking portable file names. R packages must work Windows,\nLinux OS X, can use file names work platforms.\neasiest way stick letters, numbers, underscores\ndashes. Avoid non-English letters spaces. Fix check renaming\nlisted files.Checking sufficient/correct file permissions. can’t read \nfile, can’t check . check detects unlikely occurence \nfiles package don’t permission read. Fix \nproblem fixing file permissions.Checking whether package ‘XYZ’ can installed. R CMD check runs\nR CMD install make sure ’s possible install package. \nfails, run devtools::install() RStudio’s Build & Reload\ndebug problems continuing.Checking installed package size. ’s easy accidentally include large\nfiles blow size package. check ensures \nwhole package less 5 MB subdirectory less 1 MB.\nsee message, check haven’t accidentally included \nlarge file.\nsubmitting CRAN, ’ll need justify size package.\nFirst, make sure package small possibly can : try\nrecompressing data, data CRAN notes; minimising\nvignettes, vignette CRAN notes.\n’s still large, consider moving data package.Checking installed package size. ’s easy accidentally include large\nfiles blow size package. check ensures \nwhole package less 5 MB subdirectory less 1 MB.\nsee message, check haven’t accidentally included \nlarge file.submitting CRAN, ’ll need justify size package.\nFirst, make sure package small possibly can : try\nrecompressing data, data CRAN notes; minimising\nvignettes, vignette CRAN notes.\n’s still large, consider moving data package.Checking top-level files. specified files directories \nallowed top level package (e.g. DESCRIPTION, R/, src/).\ninclude files, two choices:\ndon’t need installed (.e. ’re used \nsource package): add .Rbuildignore \nusethis::use_build_ignore().\nneed installed: move inst/. ’ll moved back \ntop-level package directory installed.\nChecking top-level files. specified files directories \nallowed top level package (e.g. DESCRIPTION, R/, src/).\ninclude files, two choices:don’t need installed (.e. ’re used \nsource package): add .Rbuildignore \nusethis::use_build_ignore().don’t need installed (.e. ’re used \nsource package): add .Rbuildignore \nusethis::use_build_ignore().need installed: move inst/. ’ll moved back \ntop-level package directory installed.need installed: move inst/. ’ll moved back \ntop-level package directory installed.Checking package subdirectories.\nDon’t include empty directories. usually removed\nautomatically R CMD build shouldn’t see error. ,\njust delete directory.\ncase files directories important. sub-directories\nlower-case, except R/. citation file, present,\ninst/CITATION. Rename needed.\ncontents inst/ shouldn’t clash top-level contents\npackage (like build/, R/ etc). , rename \nfiles/directories.\nChecking package subdirectories.Don’t include empty directories. usually removed\nautomatically R CMD build shouldn’t see error. ,\njust delete directory.Don’t include empty directories. usually removed\nautomatically R CMD build shouldn’t see error. ,\njust delete directory.case files directories important. sub-directories\nlower-case, except R/. citation file, present,\ninst/CITATION. Rename needed.case files directories important. sub-directories\nlower-case, except R/. citation file, present,\ninst/CITATION. Rename needed.contents inst/ shouldn’t clash top-level contents\npackage (like build/, R/ etc). , rename \nfiles/directories.contents inst/ shouldn’t clash top-level contents\npackage (like build/, R/ etc). , rename \nfiles/directories.Checking left-files. Remove files listed . ’ve\nincluded package accident.","code":""},{"path":"r-cmd-check.html","id":"description-1","chapter":"19 Automated checking","heading":"19.2.3 Description","text":"Checking DESCRIPTION meta-information.\nDESCRIPTION must valid. unlikely see error,\ndevtools::load_all() runs check time re-load\npackage.\nuse non-ASCII characters DESCRIPTION, must also\nspecify encoding. three encodings work \nplatforms: latin1, latin2 UTF-8. strongly recommend UTF-8:\nEncoding: UTF-8.\nLicense must refer either known license (complete list can\nfound https://svn.r-project.org/R/trunk/share/licenses/license.db),\nmust use file LICENSE file must exist. Errors \nlikely typos.\neither provide Authors@R Authors Maintainer.\n’ll get error ’ve specified , can fix \nremoving one didn’t want.\nChecking DESCRIPTION meta-information.DESCRIPTION must valid. unlikely see error,\ndevtools::load_all() runs check time re-load\npackage.DESCRIPTION must valid. unlikely see error,\ndevtools::load_all() runs check time re-load\npackage.use non-ASCII characters DESCRIPTION, must also\nspecify encoding. three encodings work \nplatforms: latin1, latin2 UTF-8. strongly recommend UTF-8:\nEncoding: UTF-8.use non-ASCII characters DESCRIPTION, must also\nspecify encoding. three encodings work \nplatforms: latin1, latin2 UTF-8. strongly recommend UTF-8:\nEncoding: UTF-8.License must refer either known license (complete list can\nfound https://svn.r-project.org/R/trunk/share/licenses/license.db),\nmust use file LICENSE file must exist. Errors \nlikely typos.License must refer either known license (complete list can\nfound https://svn.r-project.org/R/trunk/share/licenses/license.db),\nmust use file LICENSE file must exist. Errors \nlikely typos.either provide Authors@R Authors Maintainer.\n’ll get error ’ve specified , can fix \nremoving one didn’t want.either provide Authors@R Authors Maintainer.\n’ll get error ’ve specified , can fix \nremoving one didn’t want.Checking package dependencies.\npackages listed Depends, Imports LinkingTo must \ninstalled, version requirements must met, otherwise \npackage can’t checked. easy way install missing outdated\ndependencies run devtools::install_deps(dependencies = TRUE).\nPackages listed Suggests must installed, unless ’ve set\nenvironment variable _R_CHECK_FORCE_SUGGESTS_ false value\n(e.g. check(force_suggests = FALSE)). useful \nsuggested packages available platforms.\nR packages can cycle dependencies: .e. package \nrequires B, B can require (otherwise one load\nfirst?). see error, ’ll need rethink design \npackage. One easy fix move conflicting package \nImports Depends Suggests.\npackages used NAMESPACE must listed one \nImports (commonly) Depends (special cases).\nSee search path details.\nEvery package listed Depends must also imported \nNAMESPACE accessed pkg::foo. don’t , \npackage work attached search path (\nlibrary(mypackage)) work loaded (e.g. \nmypackage::foo())\nChecking package dependencies.packages listed Depends, Imports LinkingTo must \ninstalled, version requirements must met, otherwise \npackage can’t checked. easy way install missing outdated\ndependencies run devtools::install_deps(dependencies = TRUE).packages listed Depends, Imports LinkingTo must \ninstalled, version requirements must met, otherwise \npackage can’t checked. easy way install missing outdated\ndependencies run devtools::install_deps(dependencies = TRUE).Packages listed Suggests must installed, unless ’ve set\nenvironment variable _R_CHECK_FORCE_SUGGESTS_ false value\n(e.g. check(force_suggests = FALSE)). useful \nsuggested packages available platforms.Packages listed Suggests must installed, unless ’ve set\nenvironment variable _R_CHECK_FORCE_SUGGESTS_ false value\n(e.g. check(force_suggests = FALSE)). useful \nsuggested packages available platforms.R packages can cycle dependencies: .e. package \nrequires B, B can require (otherwise one load\nfirst?). see error, ’ll need rethink design \npackage. One easy fix move conflicting package \nImports Depends Suggests.R packages can cycle dependencies: .e. package \nrequires B, B can require (otherwise one load\nfirst?). see error, ’ll need rethink design \npackage. One easy fix move conflicting package \nImports Depends Suggests.packages used NAMESPACE must listed one \nImports (commonly) Depends (special cases).\nSee search path details.packages used NAMESPACE must listed one \nImports (commonly) Depends (special cases).\nSee search path details.Every package listed Depends must also imported \nNAMESPACE accessed pkg::foo. don’t , \npackage work attached search path (\nlibrary(mypackage)) work loaded (e.g. \nmypackage::foo())Every package listed Depends must also imported \nNAMESPACE accessed pkg::foo. don’t , \npackage work attached search path (\nlibrary(mypackage)) work loaded (e.g. \nmypackage::foo())Checking CRAN incoming feasibility. checks apply ’re\nsubmitting CRAN.\n’re submitting new package, can’t use name \nexisting package. ’ll need come new name.\n’re submitting update, version number must higher\ncurrent CRAN version. Update Version field \nDESCRIPTION.\nmaintainer package changed (even ’s just change\nemail address), new maintainer submit CRAN, \nold maintainer send confirmation email.\nmust use standard open source license, listed \nhttps://svn.r-project.org/R/trunk/share/licenses/license.db.\ncan use custom license CRAN legal\nresources review custom agreements.\nTitle Description must free spelling mistakes. \ntitle package must title case. Neither title description\ninclude either name package word “package”.\nReword title description needed.\n’re submitting new package, ’ll always get NOTE. \nreminds CRAN maintainers extra manual checks.\nAvoid submitting multiple versions package short\nperiod time. CRAN prefers one submission per month. \nneed fix major bug, apologetic.\nChecking CRAN incoming feasibility. checks apply ’re\nsubmitting CRAN.’re submitting new package, can’t use name \nexisting package. ’ll need come new name.’re submitting new package, can’t use name \nexisting package. ’ll need come new name.’re submitting update, version number must higher\ncurrent CRAN version. Update Version field \nDESCRIPTION.’re submitting update, version number must higher\ncurrent CRAN version. Update Version field \nDESCRIPTION.maintainer package changed (even ’s just change\nemail address), new maintainer submit CRAN, \nold maintainer send confirmation email.maintainer package changed (even ’s just change\nemail address), new maintainer submit CRAN, \nold maintainer send confirmation email.must use standard open source license, listed \nhttps://svn.r-project.org/R/trunk/share/licenses/license.db.\ncan use custom license CRAN legal\nresources review custom agreements.must use standard open source license, listed \nhttps://svn.r-project.org/R/trunk/share/licenses/license.db.\ncan use custom license CRAN legal\nresources review custom agreements.Title Description must free spelling mistakes. \ntitle package must title case. Neither title description\ninclude either name package word “package”.\nReword title description needed.Title Description must free spelling mistakes. \ntitle package must title case. Neither title description\ninclude either name package word “package”.\nReword title description needed.’re submitting new package, ’ll always get NOTE. \nreminds CRAN maintainers extra manual checks.’re submitting new package, ’ll always get NOTE. \nreminds CRAN maintainers extra manual checks.Avoid submitting multiple versions package short\nperiod time. CRAN prefers one submission per month. \nneed fix major bug, apologetic.Avoid submitting multiple versions package short\nperiod time. CRAN prefers one submission per month. \nneed fix major bug, apologetic.","code":""},{"path":"r-cmd-check.html","id":"namespace-1","chapter":"19 Automated checking","heading":"19.2.4 Namespace","text":"Checking namespace. must NAMESPACE file.\nRoxygen2 create described namespaces.Checking package namespace information. NAMESPACE \nparseable parseNamespaceFile() valid. check fails, ’s\nbug roxygen2.Checking whether package can loaded stated dependencies.\nRuns library(pkg) R_DEFAULT_PACKAGES=NULL, search path\nempty (.e. stats, graphics, grDevices, utils, datasets methods \nattached like usual). Failure typically indicates ’re missing \ndependency one packages.Checking whether namespace can loaded stated dependencies.\nRuns loadNamespace(pkg) R_DEFAULT_PACKAGES=NULL. Failure usually\nindicates problem namespace.","code":""},{"path":"r-cmd-check.html","id":"r-code","chapter":"19 Automated checking","heading":"19.2.5 R code","text":"Checking R files non-ASCII characters. maximum portability (.e.\npeople can use package Windows) avoid using non-ASCII\ncharacters R files. ’s ok use comments, object names\nshouldn’t use , strings use unicode escapes. See\nR/ CRAN notes details.Checking R files syntax errors. Obviously R code must valid.\n’re unlikely see error ’ve regularly using\ndevtools::load_all().Checking dependencies R code. Errors often indicate ’ve\nforgotten declare needed package DESCRIPTION. Remember \nnever use require() library() inside package - see\nnamespace imports details best practices.\nAlternatively, may accidentally used ::: access exported\nfunction package. Switch :: instead.Checking dependencies R code. Errors often indicate ’ve\nforgotten declare needed package DESCRIPTION. Remember \nnever use require() library() inside package - see\nnamespace imports details best practices.Alternatively, may accidentally used ::: access exported\nfunction package. Switch :: instead.Checking S3 generic/method consistency. S3 methods must compatible\nfunction signature generic. means method must \narguments generic, one exception: generic includes\n... method can additional arguments.\ncommon cause error defining print methods, \nprint() generic contains...:\n\n# BAD\nprint.my_class <- function(x) cat(\"Hi\")\n\n# GOOD\nprint.my_class <- function(x, ...) cat(\"Hi\")\n\n# Also ok\nprint.my_class <- function(x, ..., my_arg = TRUE) cat(\"Hi\")Checking S3 generic/method consistency. S3 methods must compatible\nfunction signature generic. means method must \narguments generic, one exception: generic includes\n... method can additional arguments.common cause error defining print methods, \nprint() generic contains...:Checking replacement functions. Replacement functions (e.g. functions \ncalled like foo(x) <- y), must value last argument.Checking R code possible problems. compound check \nwide range problems:\nCalls library.dynam() (library.dynam.unload()) look\nlike library.dynam(\"name\"), library.dynam(\"name.dll\"). Remove\nextension fix error.\nPut library.dynam() .onLoad(), .onAttach();\nput packageStartupMessage() .onAttach(), .onLoad().\nPut library.dynam.unload() .onUnload(). use \nfunctions, make sure ’re right place.\nDon’t use unlockBinding() assignInNamespace() modify objects\ndon’t belong .\ncodetools::checkUsagePackage() called check functions\ndon’t use variables don’t exist. sometimes raises false\npositives functions use non-standard evaluation (NSE),\nlike subset() (). Generally, think avoid NSE \npackage functions, hence avoid NOTE, can , see\n?globalVariables suppress NOTE.\nallowed use .Internal() package. Either call\nR wrapper function, write C function. (copy \npaste C function base R, make sure maintain copyright\nnotice, use GPL-2 compatible license, list R-core Author\nfield.)\nSimilarly allowed use ::: access non-exported\nfunctions packages. Either ask package maintainer \nexport function need, write version using\nexported functions. Alternatively, licenses compatible \ncan copy paste exported function package. \n, remember update Authors@R.\nDon’t use assign() modify objects global environment. \nneed maintain state across function calls, create \nenvironment e <- new.env(parent = emptyenv()) set \nget values :\n\ne <- new.env(parent = emptyenv())\n\nadd_up <- function(x) {\n  (.null(e$last_x)) {\n    old <- 0\n  } else {\n    old <- e$last_x\n  }\n\n  new <- old + x\n  e$last_x <- new\n  new\n}\nadd_up(10)\n#> [1] 10\nadd_up(20)\n#> [1] 30\nDon’t use attach() code. Instead refer variables\nexplicitly.\nDon’t use data() without specifying envir argument. Otherwise\ndata loaded global environment.\nDon’t use deprecated defunct functions. Update code use\nlatest versions.\nmust use TRUE FALSE code (examples), T \nF.\nChecking R code possible problems. compound check \nwide range problems:Calls library.dynam() (library.dynam.unload()) look\nlike library.dynam(\"name\"), library.dynam(\"name.dll\"). Remove\nextension fix error.Calls library.dynam() (library.dynam.unload()) look\nlike library.dynam(\"name\"), library.dynam(\"name.dll\"). Remove\nextension fix error.Put library.dynam() .onLoad(), .onAttach();\nput packageStartupMessage() .onAttach(), .onLoad().\nPut library.dynam.unload() .onUnload(). use \nfunctions, make sure ’re right place.Put library.dynam() .onLoad(), .onAttach();\nput packageStartupMessage() .onAttach(), .onLoad().\nPut library.dynam.unload() .onUnload(). use \nfunctions, make sure ’re right place.Don’t use unlockBinding() assignInNamespace() modify objects\ndon’t belong .Don’t use unlockBinding() assignInNamespace() modify objects\ndon’t belong .codetools::checkUsagePackage() called check functions\ndon’t use variables don’t exist. sometimes raises false\npositives functions use non-standard evaluation (NSE),\nlike subset() (). Generally, think avoid NSE \npackage functions, hence avoid NOTE, can , see\n?globalVariables suppress NOTE.codetools::checkUsagePackage() called check functions\ndon’t use variables don’t exist. sometimes raises false\npositives functions use non-standard evaluation (NSE),\nlike subset() (). Generally, think avoid NSE \npackage functions, hence avoid NOTE, can , see\n?globalVariables suppress NOTE.allowed use .Internal() package. Either call\nR wrapper function, write C function. (copy \npaste C function base R, make sure maintain copyright\nnotice, use GPL-2 compatible license, list R-core Author\nfield.)allowed use .Internal() package. Either call\nR wrapper function, write C function. (copy \npaste C function base R, make sure maintain copyright\nnotice, use GPL-2 compatible license, list R-core Author\nfield.)Similarly allowed use ::: access non-exported\nfunctions packages. Either ask package maintainer \nexport function need, write version using\nexported functions. Alternatively, licenses compatible \ncan copy paste exported function package. \n, remember update Authors@R.Similarly allowed use ::: access non-exported\nfunctions packages. Either ask package maintainer \nexport function need, write version using\nexported functions. Alternatively, licenses compatible \ncan copy paste exported function package. \n, remember update Authors@R.Don’t use assign() modify objects global environment. \nneed maintain state across function calls, create \nenvironment e <- new.env(parent = emptyenv()) set \nget values :\n\ne <- new.env(parent = emptyenv())\n\nadd_up <- function(x) {\n  (.null(e$last_x)) {\n    old <- 0\n  } else {\n    old <- e$last_x\n  }\n\n  new <- old + x\n  e$last_x <- new\n  new\n}\nadd_up(10)\n#> [1] 10\nadd_up(20)\n#> [1] 30Don’t use assign() modify objects global environment. \nneed maintain state across function calls, create \nenvironment e <- new.env(parent = emptyenv()) set \nget values :Don’t use attach() code. Instead refer variables\nexplicitly.Don’t use attach() code. Instead refer variables\nexplicitly.Don’t use data() without specifying envir argument. Otherwise\ndata loaded global environment.Don’t use data() without specifying envir argument. Otherwise\ndata loaded global environment.Don’t use deprecated defunct functions. Update code use\nlatest versions.Don’t use deprecated defunct functions. Update code use\nlatest versions.must use TRUE FALSE code (examples), T \nF.must use TRUE FALSE code (examples), T \nF.Checking whether package can loaded. R loads package \nlibrary(). Failure typically indicates problem \n.onLoad() .onAttach().Checking whether package can unloaded cleanly. Loads \nlibrary() detach()es. fails, check .onUnload() \n.onDetach().Checking whether namespace can unloaded cleanly.\nRuns loadNamespace(\"pkg\"); unloadNamespace(\"pkg\"). Check .onUnload() \nproblems.Checking loading without library search path.\nCalls library(x, lib.loc = ...). Failure indicates \nmaking false assumption .onLoad() .onAttach().","code":"\n# BAD\nprint.my_class <- function(x) cat(\"Hi\")\n\n# GOOD\nprint.my_class <- function(x, ...) cat(\"Hi\")\n\n# Also ok\nprint.my_class <- function(x, ..., my_arg = TRUE) cat(\"Hi\")\ne <- new.env(parent = emptyenv())\n\nadd_up <- function(x) {\n  if (is.null(e$last_x)) {\n    old <- 0\n  } else {\n    old <- e$last_x\n  }\n\n  new <- old + x\n  e$last_x <- new\n  new\n}\nadd_up(10)\n#> [1] 10\nadd_up(20)\n#> [1] 30"},{"path":"r-cmd-check.html","id":"data-1","chapter":"19 Automated checking","heading":"19.2.6 Data","text":"Checking contents ‘data’ directory.\ndata directory can contain file types described \nexported data.\nData files can contain non-ASCII characters encoding \ncorrectly set. usually shouldn’t problem ’re saving\n.Rdata files. see error, look Encoding() \ncolumn data frame, ensure none “unknown”. (’ll\ntypically need fix somewhere import process).\n’ve compressed data file bzip2 xz need declare\nleast Depends: R (>= 2.10) DESCRIPTION.\n’ve used sub-optimal compression algorithm data,\nre-compress suggested algorithm.\nChecking contents ‘data’ directory.data directory can contain file types described \nexported data.data directory can contain file types described \nexported data.Data files can contain non-ASCII characters encoding \ncorrectly set. usually shouldn’t problem ’re saving\n.Rdata files. see error, look Encoding() \ncolumn data frame, ensure none “unknown”. (’ll\ntypically need fix somewhere import process).Data files can contain non-ASCII characters encoding \ncorrectly set. usually shouldn’t problem ’re saving\n.Rdata files. see error, look Encoding() \ncolumn data frame, ensure none “unknown”. (’ll\ntypically need fix somewhere import process).’ve compressed data file bzip2 xz need declare\nleast Depends: R (>= 2.10) DESCRIPTION.’ve compressed data file bzip2 xz need declare\nleast Depends: R (>= 2.10) DESCRIPTION.’ve used sub-optimal compression algorithm data,\nre-compress suggested algorithm.’ve used sub-optimal compression algorithm data,\nre-compress suggested algorithm.","code":""},{"path":"r-cmd-check.html","id":"documentation","chapter":"19 Automated checking","heading":"19.2.7 Documentation","text":"can run common outside devtools::check() devtools::check_man() (automatically calls devtools::document() ). documentation problems, ’s best iterate quickly check_man(), rather running full check time.Checking Rd files. checks man/*.Rd files use correct\nRd syntax. fails, indicates bug roxygen2.Checking Rd metadata. Names aliases must unique across \ndocumentation files package. encounter problem ’ve\naccidentally used @name @aliases multiple places; make\nsure ’re unique.Checking Rd line widths. Lines Rd files must less 90\ncharacters wide. unlikely occur wrap R code,\nhence roxygen comments, 80 characters. long urls, use \nlink-shortening service like bit.ly.Checking Rd cross-references. Errors usually represent typos.\nRecall syntax linking functions packages:\n\\link[package_name]{function_name}. Sometimes accidentally switch \norder \\code{} \\link{}: \\link{\\code{function}} work.Checking missing documentation entries. exported objects must\ndocumented. See ?tools::undoc details.Checking code/documentation mismatches. check ensures \ndocumentation matches code. never fail ’re using\nroxygen2 automatically keeps sync.Checking Rd \\usage sections. arguments must documented, \n@params must document existing argument. may forgotten \ndocument argument, forgotten remove documentation argument\n’ve removed, misspelled argument name.\nS3 S4 methods need use special \\S3method{} \\S4method{}\nmarkup Rd file. Roxygen2 generate automatically.Checking Rd \\usage sections. arguments must documented, \n@params must document existing argument. may forgotten \ndocument argument, forgotten remove documentation argument\n’ve removed, misspelled argument name.S3 S4 methods need use special \\S3method{} \\S4method{}\nmarkup Rd file. Roxygen2 generate automatically.Checking Rd contents. checks autogenerated content made \npackage.skeleton(). Since ’re using package.skeleton() \nnever problem .Checking unstated dependencies examples. use package\nexample, make sure ’s listed Suggests field. \nrunning example code depends , test see ’s available \nrequireNamespace(\"pkg\", quietly = TRUE):\n\n#' @examples\n#' (requireNamespace(\"dplyr\", quietly = TRUE)) {\n#'   ...\n#' }Checking unstated dependencies examples. use package\nexample, make sure ’s listed Suggests field. \nrunning example code depends , test see ’s available \nrequireNamespace(\"pkg\", quietly = TRUE):Checking examples. Every documentation example must run without errors,\nmust take long. Exclude failing slow tests \\donttest{}.\nSee documenting functions details.\nExamples one last checks run, fixing problems can painful\nrun devtools::check() time. Instead, use\ndevtools::run_examples(): checks examples, optional\nparameter tells function start . way ’ve\ndiscovered error, can rerun just file, \nfiles lead .\nNB: can’t use unexported functions shouldn’t open new\ngraphics devices use two cores. Individual examples shouldn’t\ntake 5s.Checking examples. Every documentation example must run without errors,\nmust take long. Exclude failing slow tests \\donttest{}.\nSee documenting functions details.Examples one last checks run, fixing problems can painful\nrun devtools::check() time. Instead, use\ndevtools::run_examples(): checks examples, optional\nparameter tells function start . way ’ve\ndiscovered error, can rerun just file, \nfiles lead .NB: can’t use unexported functions shouldn’t open new\ngraphics devices use two cores. Individual examples shouldn’t\ntake 5s.Checking PDF version manual. Occassionally ’ll get error \nbuilding PDF manual. usually pdf built latex \n’ve forgotten escape something. Debugging painful - best\nbet look latex logs combined tex file work back \n.Rd files back roxygen comment. consider \nfailure bug roxygen2, please let know.","code":"\n#' @examples\n#' if (requireNamespace(\"dplyr\", quietly = TRUE)) {\n#'   ...\n#' }"},{"path":"r-cmd-check.html","id":"demos","chapter":"19 Automated checking","heading":"19.2.8 Demos","text":"Checking index information. ’ve written demos, demo must \nlisted demo/00Index. file look like:\ndemo-name-without-extension  Demo description\nanother-demo-name            Another descriptionChecking index information. ’ve written demos, demo must \nlisted demo/00Index. file look like:","code":"demo-name-without-extension  Demo description\nanother-demo-name            Another description"},{"path":"r-cmd-check.html","id":"compiled-code","chapter":"19 Automated checking","heading":"19.2.9 Compiled code","text":"Checking foreign function calls. .Call(), .C(), .Fortran(),\n.External() must always called either NativeSymbolInfo object\n(created @useDynLib) use .package argument. See\n?tools::checkFF details.Checking line endings C/C++/Fortran sources/headers. Always\nuse LF line ending.Checking line endings Makefiles. .Checking portable use $(BLAS_LIBS) $(LAPACK_LIBS).\nErrors indicate issue use BLAS LAPACK.Checking compiled code. Checks ’re using C functions\nshouldn’t. See details C best practices.","code":""},{"path":"r-cmd-check.html","id":"tests-1","chapter":"19 Automated checking","heading":"19.2.10 Tests","text":"Checking unstated dependencies tests. Every package used tests\nmust included dependencies.Checking tests. file tests/ run. ’ve followed \ninstructions testing ’ll least one file:\ntestthat.R. output R CMD check usually helpful,\nmay need look logfile package.Rcheck/tests/testthat.Rout.\nFix failing tests iterating devtools::test().\nOccasionally may problem tests pass run\ninteractively devtools::test(), fail R CMD check. \nusually indicates ’ve made faulty assumption testing\nenvironment, ’s often hard figure .Checking tests. file tests/ run. ’ve followed \ninstructions testing ’ll least one file:\ntestthat.R. output R CMD check usually helpful,\nmay need look logfile package.Rcheck/tests/testthat.Rout.\nFix failing tests iterating devtools::test().Occasionally may problem tests pass run\ninteractively devtools::test(), fail R CMD check. \nusually indicates ’ve made faulty assumption testing\nenvironment, ’s often hard figure .","code":""},{"path":"r-cmd-check.html","id":"vignettes-1","chapter":"19 Automated checking","heading":"19.2.11 Vignettes","text":"Checking ‘build’ directory. build/ used track vignette builds.\n’m sure check fail unless ’ve accidentally\n.Rbuildignored build/ directory.Checking installed files ‘inst/doc’. Don’t put files inst/doc -\nvignettes now live vignettes/.Checking files ‘vignettes’.\nProblems usually straightforward - ’ve included files \nalready included R (like jss.cls, jss.bst, Sweave.sty), \nleftover latex compilation files. Delete files.Checking sizes PDF files ‘inst/doc’. ’re making PDF\nvignettes, can make small possible running\ntools::compactPDF().Checking unstated dependencies vignettes. tests, every\npackage use vignette must listed DESCRIPTION.\npackage used vignette, elsewhere, make sure\n’s listed Suggests.Checking package vignettes ‘inst/doc’. checks every source\nvignette (.e. .Rmd) built equivalent (.e. .html) inst/doc.\nshouldn’t fail ’ve used standard process outlined \nvignettes. problem, start checking \n.Rbuildignore.Checking running R code vignettes. R code vignette\nrun. want deliberately execute errors (show user \nfailure looks like), make sure chunk error = TRUE, purl = FALSE.Checking re-building vignette outputs. vignette re-knit \nmake sure output corresponds input. , shouldn’t\nfail normal circumstances.run vignettes, package first must installed. means check():Builds package.Installs package without vignettes.Builds vignettes.Re-installs package vignettes.lot compiled code, can rather slow. may want add ---build-vignettes commands list “Build Source Packages” field project options:","code":""},{"path":"r-cmd-check.html","id":"gha","chapter":"19 Automated checking","heading":"19.3 Checking after every commit with GitHub actions","text":"’re already using GitHub, described git GitHub, highly recommend also using GitHub actions. GitHub actions allow run code every time push GitHub.use GitHub actions:Run usethis::use_github_action_check_standard() set GitHub action runs R CMD check Linux, Mac, Windows.Run usethis::use_github_action_check_standard() set GitHub action runs R CMD check Linux, Mac, Windows.Commit push GitHub.Commit push GitHub.Wait minutes see results email.Wait minutes see results email.setup place, R CMD check run every time push GitHub whenever someone else submits pull request. ’ll find failures right away, makes easier fix. Using automated checks also encourages check often locally, know fails ’ll find minutes later, often ’ve moved new problem.","code":""},{"path":"r-cmd-check.html","id":"other-uses","chapter":"19 Automated checking","heading":"19.3.1 Other uses","text":"Since GitHub actions allows run arbitrary code, many things can use :Re-publishing book website every time make change source.\n(Like book!)Re-publishing book website every time make change source.\n(Like book!)Building vignettes publishing website.Building vignettes publishing website.Automatically building documentation website package.Automatically building documentation website package.Learn using GitHub actions R https://github.com/r-lib/actions/tree/master/examples.","code":""},{"path":"release.html","id":"release","chapter":"20 Releasing a package","heading":"20 Releasing a package","text":"want package significant traction R community, need submit CRAN. Submitting CRAN lot work just providing version github, vast majority R users install packages github, CRAN provides discoverability, ease installation stamp authenticity. CRAN submission process can frustrating, ’s worthwhile, chapter make painless possible.get package ready release, follow steps:Pick version number.Run document R CMD check.Check ’re aligned CRAN policies.Update README.md NEWS.md.Submit package CRAN.Prepare next version updating version numbers.Publicise new version.","code":""},{"path":"release.html","id":"release-version","chapter":"20 Releasing a package","heading":"20.1 Version number","text":"’ve following advice versioning, version number -development package four components, major.minor.patch.dev, dev least 9000. number 9000 arbitrary, provides strong visual signal ’s something different version number. Released packages don’t dev component, now need drop pick version number based changes ’ve made. example, current version 0.8.1.9000 next CRAN version 0.8.2, 0.9.0 1.0.0? Use advice decide:Increment patch, e.g. 0.8.2 patch: ’ve fixed\nbugs without adding significant new features. ’ll often patch\nrelease , release, discover show-stopping bug needs \nfixed ASAP. releases patch number 0.Increment patch, e.g. 0.8.2 patch: ’ve fixed\nbugs without adding significant new features. ’ll often patch\nrelease , release, discover show-stopping bug needs \nfixed ASAP. releases patch number 0.Increment minor, e.g. 0.9.0, minor release. minor\nrelease can include bug fixes, new features changes backward\ncompatibility. common type release. ’s perfectly fine \nmany minor releases need use two (even three!)\ndigits, e.g. 1.17.0.Increment minor, e.g. 0.9.0, minor release. minor\nrelease can include bug fixes, new features changes backward\ncompatibility. common type release. ’s perfectly fine \nmany minor releases need use two (even three!)\ndigits, e.g. 1.17.0.Increment major, e.g. 1.0.0, major release. \nbest reserved changes backward compatible \nlikely affect many users. Going 0.b.c 1.0.0 typically\nindicates package feature complete stable API.\npractice, backward compatibility --nothing threshold. \nexample, make API-incompatible change rarely-used part \ncode, may deserve major number change. fix bug\nmany people depend , feel like API breaking change. Use\nbest judgement.Increment major, e.g. 1.0.0, major release. \nbest reserved changes backward compatible \nlikely affect many users. Going 0.b.c 1.0.0 typically\nindicates package feature complete stable API.practice, backward compatibility --nothing threshold. \nexample, make API-incompatible change rarely-used part \ncode, may deserve major number change. fix bug\nmany people depend , feel like API breaking change. Use\nbest judgement.","code":""},{"path":"release.html","id":"compatibility","chapter":"20 Releasing a package","heading":"20.2 Backward compatibility","text":"big difference major minor versions whether code backward compatible. difference bit academic R community way people update packages running update.packages(), always updates latest version package, even major version changed, potentially breaking code. R users becoming familiar tools like packrat, capture package versions per-project basis, need little cautious making big backward incompatible changes, regardless version number.importance backward compatibility directly proportional number people using package: trading time users’ time. harder strive maintain backward compatibility, harder develop new features fix old mistakes. Backward compatible code also tends harder read need maintain multiple paths support functionality previous versions. concerned backward compatibility, don’t let paralyse .good reasons make backward incompatible changes - made design mistake makes package harder use ’s better fix sooner rather later. need make backward incompatible change, ’s best gradually. Provide interim version(s) now ’d like , provide advice ’s going change. Depending ’re changing, use one following techniques let users know ’s happening:Don’t immediately remove function. First deprecate . example,\nimagine package version 0.5.0 want remove fun(). \nversion, 0.6.0, ’d use .Deprecated() display warning message\nwhenever someone uses function:\n\n# 0.6.0\nfun <- function(x, y, z) {\n  .Deprecated(\"sum\")\n  x + y + z\n}\n\nfun(1, 2, 3)\n#> Warning: 'fun' deprecated.\n#> Use 'sum' instead.\n#> See help(\"Deprecated\")\n#> [1] 6\n, remove function got 0.7.0 (\nstrict, got 1.0.0 since ’s backward\nincompatible change).Don’t immediately remove function. First deprecate . example,\nimagine package version 0.5.0 want remove fun(). \nversion, 0.6.0, ’d use .Deprecated() display warning message\nwhenever someone uses function:, remove function got 0.7.0 (\nstrict, got 1.0.0 since ’s backward\nincompatible change).Similarly, ’re removing function argument, first warn :\n\nbar <- function(x, y, z) {\n  (!missing(y)) {\n    warning(\"argument y deprecated; please use z instead.\", \n      call. = FALSE)\n    z <- y\n  }\n}\n\nbar(1, 2, 3)\n#> Warning: argument y deprecated; please use z instead.Similarly, ’re removing function argument, first warn :’re deprecating lot code, can useful add helper\nfunction. example, ggplot2 gg_dep automatically\ndisplays message, warning error, depending much version\nnumber changed.\n\ngg_dep <- function(version, msg) {\n  v <- .package_version(version)\n  cv <- packageVersion(\"ggplot2\")\n\n  # current major number greater last-good major number, \n  # current minor number 1 greater last-good minor number,\n  # return error.\n  (cv[[1,1]] > v[[1,1]]  ||  cv[[1,2]] > v[[1,2]] + 1) {\n    stop(msg, \" (Defunct; last used version \", version, \")\",\n      call. = FALSE)\n\n  # minor number differs one, give warning\n  } else (cv[[1,2]] > v[[1,2]]) {\n    warning(msg, \" (Deprecated; last used version \", version, \")\",\n      call. = FALSE)\n\n  # subminor number greater, provide message\n  } else (cv[[1,3]] > v[[1,3]]) {\n    message(msg, \" (Deprecated; last used version \", version, \")\")\n  }\n\n  invisible()\n}’re deprecating lot code, can useful add helper\nfunction. example, ggplot2 gg_dep automatically\ndisplays message, warning error, depending much version\nnumber changed.Significant changes existing function requires planning, including\nmaking gradual changes multiple versions. Try develop sequence\ntransformations change can accompanied informative\nerror message.Significant changes existing function requires planning, including\nmaking gradual changes multiple versions. Try develop sequence\ntransformations change can accompanied informative\nerror message.want use functionality new version another package,\ndon’t make hard install-time dependency DESCRIPTION (forcing\nusers upgrade package might break code). Instead\ncheck version run-time:\n\n(packageVersion(\"ggplot2\") < \"1.0.0\") {\n  stop(\"ggplot2 >= 1.0.0 needed function.\", call. = FALSE)\n}\nalso useful ’re responding changes one \ndependencies - ’ll want version work \nchange. allow submit CRAN time,\neven package. may generate R CMD check\nnotes. example:\n\n(packageVersion(\"foo\") > \"1.0.0\") {\n  foo::baz()\n} else {\n  foo::bar()\n}\nbaz doesn’t exist foo version 1.0.0, ’ll get note \ndoesn’t exist foo’s namespace. Just explain ’re working\naround difference versions submission CRAN.want use functionality new version another package,\ndon’t make hard install-time dependency DESCRIPTION (forcing\nusers upgrade package might break code). Instead\ncheck version run-time:also useful ’re responding changes one \ndependencies - ’ll want version work \nchange. allow submit CRAN time,\neven package. may generate R CMD check\nnotes. example:baz doesn’t exist foo version 1.0.0, ’ll get note \ndoesn’t exist foo’s namespace. Just explain ’re working\naround difference versions submission CRAN.","code":"\n# 0.6.0\nfun <- function(x, y, z) {\n  .Deprecated(\"sum\")\n  x + y + z\n}\n\nfun(1, 2, 3)\n#> Warning: 'fun' is deprecated.\n#> Use 'sum' instead.\n#> See help(\"Deprecated\")\n#> [1] 6\nbar <- function(x, y, z) {\n  if (!missing(y)) {\n    warning(\"argument y is deprecated; please use z instead.\", \n      call. = FALSE)\n    z <- y\n  }\n}\n\nbar(1, 2, 3)\n#> Warning: argument y is deprecated; please use z instead.\ngg_dep <- function(version, msg) {\n  v <- as.package_version(version)\n  cv <- packageVersion(\"ggplot2\")\n\n  # If current major number is greater than last-good major number, or if\n  # current minor number is more than 1 greater than last-good minor number,\n  # return an error.\n  if (cv[[1,1]] > v[[1,1]]  ||  cv[[1,2]] > v[[1,2]] + 1) {\n    stop(msg, \" (Defunct; last used in version \", version, \")\",\n      call. = FALSE)\n\n  # If minor number differs by one, give a warning\n  } else if (cv[[1,2]] > v[[1,2]]) {\n    warning(msg, \" (Deprecated; last used in version \", version, \")\",\n      call. = FALSE)\n\n  # If only subminor number is greater, provide a message\n  } else if (cv[[1,3]] > v[[1,3]]) {\n    message(msg, \" (Deprecated; last used in version \", version, \")\")\n  }\n\n  invisible()\n}\nif (packageVersion(\"ggplot2\") < \"1.0.0\") {\n  stop(\"ggplot2 >= 1.0.0 needed for this function.\", call. = FALSE)\n}\nif (packageVersion(\"foo\") > \"1.0.0\") {\n  foo::baz()\n} else {\n  foo::bar()\n}"},{"path":"release.html","id":"release-process","chapter":"20 Releasing a package","heading":"20.3 The submission process","text":"manually submit package CRAN, create package bundle (devtools::build()) upload https://cran.r-project.org/submit.html, along comments describe process followed. section shows make submission easy possible providing standard structure comments. Later, submission, ’ll see actually submit package devtools::release().submitting CRAN, remember CRAN staffed volunteers, full-time jobs. typical week 100 submissions three volunteers process . less work make likely pleasant submission experience.recommend store submission comments file called cran-comments.md. cran-comments.md checked git (can track time), listed .Rbuildignore (’s included package). extension suggests, recommend using Markdown gives standard way laying plain text. However, contents never rendered another format, don’t need worry sticking closely. cran-comments.md recent version httr:layout designed easy skim, easy match R CMD check results seen CRAN maintainers. includes two sections:Check results: always state errors warnings.\nNOTEs go bulleted list. NOTE, include message\nR CMD check brief description think ’s OK.\nNOTEs, ’d say “ERRORs, WARNINGs NOTEs”Check results: always state errors warnings.\nNOTEs go bulleted list. NOTE, include message\nR CMD check brief description think ’s OK.\nNOTEs, ’d say “ERRORs, WARNINGs NOTEs”Downstream dependencies: downstream dependencies, run\nR CMD check package summarise results. \ndownstream dependencies, keep section, say: “currently\ndownstream dependencies package”.Downstream dependencies: downstream dependencies, run\nR CMD check package summarise results. \ndownstream dependencies, keep section, say: “currently\ndownstream dependencies package”.described detail .","code":"## R CMD check results\nThere were no ERRORs or WARNINGs. \n\nThere was 1 NOTE:\n\n* checking dependencies in R code ... NOTE\n  Namespace in Imports field not imported from: 'R6'\n\n  R6 is a build-time dependency.\n\n## Downstream dependencies\nI have also run R CMD check on downstream dependencies of httr \n(https://github.com/wch/checkresults/blob/master/httr/r-release). \nAll packages that I could install passed except:\n\n* Ecoengine: this appears to be a failure related to config on \n  that machine. I couldn't reproduce it locally, and it doesn't \n  seem to be related to changes in httr (the same problem exists \n  with httr 0.4)."},{"path":"release.html","id":"release-test-env","chapter":"20 Releasing a package","heading":"20.3.1 Test environments","text":"checking package need make sure passed current development version R works least two platforms. R CMD check continuously evolving, ’s good idea check package latest development version, R-devel. can install R-devel machine:Mac: install https://mac.r-project.org/.Mac: install https://mac.r-project.org/.Windows: install https://cran.r-project.org/bin/windows/base/rdevel.htmlWindows: install https://cran.r-project.org/bin/windows/base/rdevel.htmlLinux: either build source, better, learn Docker containers\nrun R-devel container https://github.com/rocker-org/rocker.Linux: either build source, better, learn Docker containers\nrun R-devel container https://github.com/rocker-org/rocker.’s painful manage multiple R versions, especially since ’ll need reinstall packages. Instead, can run R CMD check CRAN’s servers devtools::check_win_*() family functions. build package submit CRAN win-builder. 10-20 minutes submission, ’ll receive e-mail telling check results.CRAN runs multiple platforms: Windows, Mac OS X, Linux, Solaris. don’t need run R CMD check every one platforms, ’s really good idea least two. increases chances spotting code relies idiosyncrasies specific platform. two easy ways check different platforms:rhub::check() lets manually run R CMD check platform \nchoosing.rhub::check() lets manually run R CMD check platform \nchoosing.usethis::use_github_action_check_standard() helps set GitHub\nactions automatically run R CMD check every time push GitHub.usethis::use_github_action_check_standard() helps set GitHub\nactions automatically run R CMD check every time push GitHub.Debugging code works computer fails elsewhere painful. happens , either install virtualisation tool can run another operating system locally, find friend help figure problem. Don’t submit package hope CRAN help figure problem.","code":""},{"path":"release.html","id":"release-check","chapter":"20 Releasing a package","heading":"20.3.2 Check results","text":"’ve already learned use R CMD check ’s important automated checking. Compared running R CMD check locally, important differences running CRAN submission:must fix ERRORs WARNINGs. package contains errors\nwarnings accepted CRAN.must fix ERRORs WARNINGs. package contains errors\nwarnings accepted CRAN.Eliminate many NOTEs possible. NOTE requires human oversight,\nprecious commodity. notes \nbelieve important, almost always easier fix (even \nfix bit hack) persuade CRAN ’re OK. See\ncheck descriptions details fix individual\nproblems.\nNOTEs less likely package \nflagged additional human checks. time consuming \nCRAN, best avoided possible.Eliminate many NOTEs possible. NOTE requires human oversight,\nprecious commodity. notes \nbelieve important, almost always easier fix (even \nfix bit hack) persuade CRAN ’re OK. See\ncheck descriptions details fix individual\nproblems.NOTEs less likely package \nflagged additional human checks. time consuming \nCRAN, best avoided possible.can’t eliminate NOTE, document cran-comments.md,\ndescribing think spurious. comments easy \nscan, easy match R CMD check. Provide CRAN maintainers\neverything need one place, even means repeating .\nNB: always one NOTE first submit package.\nreminds CRAN new submission ’ll need \nextra checks. can’t eliminate , just mention \ncran-comments.md first submission.can’t eliminate NOTE, document cran-comments.md,\ndescribing think spurious. comments easy \nscan, easy match R CMD check. Provide CRAN maintainers\neverything need one place, even means repeating .NB: always one NOTE first submit package.\nreminds CRAN new submission ’ll need \nextra checks. can’t eliminate , just mention \ncran-comments.md first submission.","code":""},{"path":"release.html","id":"release-deps","chapter":"20 Releasing a package","heading":"20.3.3 Reverse dependencies","text":"Finally, ’re releasing new version existing package, ’s responsibility check downstream dependencies (.e. packages list package Depends, Imports, Suggests LinkingTo fields) continue work. help , devtools provides devtools::revdep_check(). section slated revision 2nd edition. meantime, know functionality now provided revdepcheck package. :Sets temporary library doesn’t clobber existing packages \ninstalled.Sets temporary library doesn’t clobber existing packages \ninstalled.Installs dependencies downstream dependencies.Installs dependencies downstream dependencies.Runs R CMD check package.Runs R CMD check package.Summarises results single file.Summarises results single file.Run usethis::use_revdep() set package useful template.packages fail R CMD check, give package authors least two weeks fix problem submit package CRAN (can easily get maintainer e-mail addresses revdep_maintainers()). two weeks , re-run checks, list remaining failures cran-comments.md. package accompanied brief explanation either tells CRAN ’s false positive R CMD check (e.g. couldn’t install dependency locally) ’s legitimate change API (maintainer hasn’t fixed yet).Inform CRAN release process: “advised downstream package maintainers problems two weeks ago”. ’s example recent release dplyr:","code":"Important reverse dependency check notes (full details at \nhttps://github.com/wch/checkresults/tree/master/dplyr/r-release);\n\n* COPASutils, freqweights, qdap, simPH: fail for various reasons. All package \n  authors were informed of the upcoming release and shown R CMD check issues \n  over two weeks ago.\n\n* ggvis: You'll be receiving a submission that fixes these issues very shortly\n  from Winston.\n\n* repra, rPref: uses a deprecated function."},{"path":"release.html","id":"cran-policies","chapter":"20 Releasing a package","heading":"20.4 CRAN policies","text":"well automated checks provided R CMD check, number CRAN policies must checked manually. CRAN maintainers typically look closely package’s first submission.’ve summarised common problems :’s vital maintainer’s e-mail address stable \nway CRAN contact , problems \ncan’t get touch remove package CRAN. make\nsure ’s something ’s likely around , ’s \nheavily filtered.’s vital maintainer’s e-mail address stable \nway CRAN contact , problems \ncan’t get touch remove package CRAN. make\nsure ’s something ’s likely around , ’s \nheavily filtered.must clearly identified copyright holders DESCRIPTION:\nincluded external source code, must ensure license\ncompatible. See licensing chapter, license section DESCRIPTION, src/ licensing\ndetails.must clearly identified copyright holders DESCRIPTION:\nincluded external source code, must ensure license\ncompatible. See licensing chapter, license section DESCRIPTION, src/ licensing\ndetails.must “make reasonable efforts” get package working across\nmultiple platforms. Packages don’t work least two \nnormally considered.must “make reasonable efforts” get package working across\nmultiple platforms. Packages don’t work least two \nnormally considered.make external changes without explicit user permission. Don’t write \nfile system, change options, install packages, quit R, send information\ninternet, open external software, etc.make external changes without explicit user permission. Don’t write \nfile system, change options, install packages, quit R, send information\ninternet, open external software, etc.submit updates frequently. policy suggests new version\nevery 1-2 months .submit updates frequently. policy suggests new version\nevery 1-2 months .recommend following CRAN Policy Watch Twitter account tweets whenever ’s policy change. can also look GitHub repository powers : https://github.com/eddelbuettel/crp/commits/master/texi.","code":""},{"path":"release.html","id":"important-files","chapter":"20 Releasing a package","heading":"20.5 Important files","text":"now package ’s ready submit CRAN. , two important files update: README.md describes package , NEWS.md describes ’s changed since previous version. recommend using Markdown files, ’s useful readable plain text (e.g. emails) HTML (e.g. GitHub, blog posts). basic writing formatting syntax available https://help.github.com/articles/basic-writing--formatting-syntax/.","code":""},{"path":"release.html","id":"readme","chapter":"20 Releasing a package","heading":"20.5.1 README.md","text":"goal README.md answer following questions package:use ?use ?get ?GitHub, README.md rendered HTML displayed repository home page.normally structure README follows:paragraph describes high-level purpose package.paragraph describes high-level purpose package.example shows use package solve simple problem.example shows use package solve simple problem.Installation instructions, giving code can copied pasted R.Installation instructions, giving code can copied pasted R.overview describes main components package. \ncomplex packages, point vignettes details.overview describes main components package. \ncomplex packages, point vignettes details.","code":""},{"path":"release.html","id":"readme-rmd","chapter":"20 Releasing a package","heading":"20.5.2 README.Rmd","text":"include example README (good idea!) may want generate R Markdown. easiest way get started use usethis::use_readme_rmd(). creates template README.Rmd adds .Rbuildignore. template looks like::Outputs Github flavoured Markdown.Outputs Github flavoured Markdown.Includes comment README.md remind edit README.Rmd, \nREADME.md.Includes comment README.md remind edit README.Rmd, \nREADME.md.Sets recommended knitr options, including saving image \nREADME-chunkname.png (automatically .Rbuildignored.)Sets recommended knitr options, including saving image \nREADME-chunkname.png (automatically .Rbuildignored.)’ll need remember re-knit README.Rmd time modify . use git, use_readme_rmd() automatically adds following “pre-commit” hook:prevents git commit succeeding unless README.md recent README.Rmd. get false positive, can ignore check git commit ---verify. Note git commit hooks stored repository, every time clone repo, ’ll need run usethis::use_readme_rmd() set .","code":"---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n`​``{r, echo = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"README-\"\n)\n`​``#!/bin/bash\nif [[ README.Rmd -nt README.md ]]; then\n  echo \"README.md is out of date; please re-knit README.Rmd\"\n  exit 1\nfi "},{"path":"release.html","id":"news","chapter":"20 Releasing a package","heading":"20.5.3 NEWS.md","text":"README.md aimed new users. NEWS.md aimed existing users: list API changes release. number formats can use package news, recommend NEWS.md. ’s well supported GitHub, permitted CRAN, easy re-purpose formats.Organise NEWS.md follows:Use top-level heading version: e.g. # mypackage 1.0. \nrecent version go top.Use top-level heading version: e.g. # mypackage 1.0. \nrecent version go top.change included bulleted list. lot \nchanges might want break using subheadings, ## Major changes,\n## Bug fixes etc. usually stick simple list just \nreleasing package ’ll reorganise sections, needed.\n’s hard know advance exactly sections ’ll need.change included bulleted list. lot \nchanges might want break using subheadings, ## Major changes,\n## Bug fixes etc. usually stick simple list just \nreleasing package ’ll reorganise sections, needed.\n’s hard know advance exactly sections ’ll need.item related issue GitHub, include issue number \nparentheses, e.g. (#​10). item related pull request, include\npull request number author, e.g. (#​101, @hadley). \nmakes easy navigate relevant issues GitHub.item related issue GitHub, include issue number \nparentheses, e.g. (#​10). item related pull request, include\npull request number author, e.g. (#​101, @hadley). \nmakes easy navigate relevant issues GitHub.main challenge NEWS.md getting habit noting change make change.","code":""},{"path":"release.html","id":"release-submission","chapter":"20 Releasing a package","heading":"20.6 Release","text":"’re now ready submit package CRAN. easiest way run devtools::release(). :Builds package runs R CMD check one last time.Builds package runs R CMD check one last time.Asks number yes/questions verify followed \ncommon best practices.Asks number yes/questions verify followed \ncommon best practices.Allows add questions check process including \nunexported release_questions() function package. \nreturn character vector questions ask. example, httr :\n\nrelease_questions <- function() {\n  c(\n    \"run OAuth demos?\",\n    \"inst/cacert.pem date?\"\n  )\n}\nuseful reminding manual tasks \ncan’t otherwise automated.Allows add questions check process including \nunexported release_questions() function package. \nreturn character vector questions ask. example, httr :useful reminding manual tasks \ncan’t otherwise automated.Uploads package bundle \nCRAN submission form including \ncomments cran-comments.md.Uploads package bundle \nCRAN submission form including \ncomments cran-comments.md.Within next minutes, ’ll receive email notifying submission asking approve (confirms maintainer address correct). Next CRAN maintainers run checks get back results. normally takes around 24 hours, occasionally can take 5 days.","code":"\nrelease_questions <- function() {\n  c(\n    \"Have you run all the OAuth demos?\",\n    \"Is inst/cacert.pem up to date?\"\n  )\n}"},{"path":"release.html","id":"on-failure","chapter":"20 Releasing a package","heading":"20.6.1 On failure","text":"package pass R CMD check violation CRAN policies, CRAN maintainer e-mail describe problem(s). Failures frustrating, feedback may curt may feel downright insulting. Arguing CRAN maintainers likely waste time . Instead:Breathe. rejected CRAN package end world. happens \neveryone. Even members R-core go process CRAN\nfriendlier . numerous packages rejected CRAN.\nbanned submitting CRAN two weeks many \nexisting packages minor problems.Breathe. rejected CRAN package end world. happens \neveryone. Even members R-core go process CRAN\nfriendlier . numerous packages rejected CRAN.\nbanned submitting CRAN two weeks many \nexisting packages minor problems.response gets really riled , take couple days cool \nresponding. Ignore ad hominem attacks, strive respond \ntechnical issues.response gets really riled , take couple days cool \nresponding. Ignore ad hominem attacks, strive respond \ntechnical issues.devtools problem causes CRAN maintainer annoyed , \ndeeply sorry. forward message along address,\n’ll send hand-written apology card.devtools problem causes CRAN maintainer annoyed , \ndeeply sorry. forward message along address,\n’ll send hand-written apology card.Unless feel extremely strongly discussion merited, don’t respond e-mail. Instead:Fix identified problems make recommended changes. Re-run\ndevtools::check() make sure didn’t accidentally introduce \nnew problems.Fix identified problems make recommended changes. Re-run\ndevtools::check() make sure didn’t accidentally introduce \nnew problems.Add “Resubmission” section top cran-comments.md. \nclearly identify package resubmission, list changes\nmade.\n## Resubmission\nresubmission. version :\n\n* Converted DESCRIPTION title title case.\n\n* clearly identified copyright holders DESCRIPTION\n  LICENSE files.Add “Resubmission” section top cran-comments.md. \nclearly identify package resubmission, list changes\nmade.necessary, update check results downstream dependencies sections.necessary, update check results downstream dependencies sections.Run devtools::submit_cran() re-submit package without working\nrelease() questions second time.Run devtools::submit_cran() re-submit package without working\nrelease() questions second time.","code":"## Resubmission\nThis is a resubmission. In this version I have:\n\n* Converted the DESCRIPTION title to title case.\n\n* More clearly identified the copyright holders in the DESCRIPTION\n  and LICENSE files."},{"path":"release.html","id":"binary-builds","chapter":"20 Releasing a package","heading":"20.6.2 Binary builds","text":"package accepted CRAN built platform. ’s possible may uncover errors. Wait 48 hours checks packages run, go check results page package:Prepare patch release fixes problems submit using process .","code":""},{"path":"release.html","id":"post-release","chapter":"20 Releasing a package","heading":"20.7 Prepare for next version","text":"package accepted CRAN, couple technical tasks :use GitHub, go repository release page. Create new release\ntag version v1.2.3 (.e. “v” followed version package).\nCopy paste contents relevant NEWS.md section release\nnotes.use GitHub, go repository release page. Create new release\ntag version v1.2.3 (.e. “v” followed version package).\nCopy paste contents relevant NEWS.md section release\nnotes.use git, GitHub, tag release git tag -v1.2.3.use git, GitHub, tag release git tag -v1.2.3.Add .9000 suffix Version field DESCRIPTION indicate\ndevelopment version. Create new heading NEWS.md commit changes.Add .9000 suffix Version field DESCRIPTION indicate\ndevelopment version. Create new heading NEWS.md commit changes.","code":""},{"path":"release.html","id":"promotion","chapter":"20 Releasing a package","heading":"20.8 Publicising your package","text":"Now ’re ready fun part: publicising package. really important. one use helpful new package don’t know exists.Start writing release announcement. R Markdown document briefly describes package (people haven’t used can understand care), ’s new version. Start contents NEWS.md, ’ll need modify . goal NEWS.md comprehensive; goal release announcement highlight important changes. Include link end announcement full release notes people can see changes. possible, recommend showing examples new features: ’s much easier understand benefit new feature can see action.number places can include announcement:blog, publish . now publish package release\nannouncements RStudio blog.blog, publish . now publish package release\nannouncements RStudio blog.use Twitter, tweet #rstats hashtag.use Twitter, tweet #rstats hashtag.Send \nr-packages mailing list.\nMessages sent list automatically forwarded R-help mailing\nlist.Send \nr-packages mailing list.\nMessages sent list automatically forwarded R-help mailing\nlist.","code":""},{"path":"release.html","id":"congratulations","chapter":"20 Releasing a package","heading":"20.9 Congratulations!","text":"released first package CRAN made end book!Marwick, Ben, Carl Boettiger, Lincoln Mullen. 2018a. “Packaging Data Analytical Work Reproducibly Using R (Friends).” American Statistician 72 (1): 80–88. https://doi.org/10.1080/00031305.2017.1375986.———. 2018b. “Packaging Data Analytical Work Reproducibly Using R (Friends).” PeerJ Preprints 6 (March): e3192v2. https://doi.org/10.7287/peerj.preprints.3192v2.Müller, Kirill, Lorenz Walthert. 2018. Styler: Non-Invasive Pretty Printing R Code. http://styler.r-lib.org.Silge, Julia, John C. Nash, Spencer Graves. 2018. “Navigating R Package Universe.” R Journal 10 (2): 558–63. https://doi.org/10.32614/RJ-2018-058.","code":""}]
